// Copyright (c) 2021, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.

import "memmap";
import "registers";

import "audio";
import "joypad";
import "metasprites";
import "metatiles";
import "ui";
import "textbox";
import "rng";
import "interrupts";
import "gamestate";


let FRAMES_PER_SECOND = 60;


in lowram {
    // A shadow of the INIDISP register
    var _brightness_buffer : u8;


    // A shadow of the BG1 scroll registers.
    //
    // (2x u16 words)
    var bg1_scrollX : u16;
    var bg1_scrollY : u16;

    // A shadow of the BG2 scroll registers.
    //
    // (2x u16 words)
    var bg2_scrollX : u16;
    var bg2_scrollY : u16;
}


in code {



// Pause the game for a second
//
// DB = 0x7e
#[mem8, idx8]
func wait_one_second() {

    a = FRAMES_PER_SECOND;

    do {
        push8(a);

        wait_frame();

        a = pop8();
        a--;
    } while !zero;
}



// Wait until the end of the current frame, process VBlank routines.
//
// REQUIRES: NMI enabled, IRQs disabled
//
// DB = lowram
func wait_frame() {
    // MUST NOT modify zpTmp variables.

    push8(p);
    push8(data_bank);

    push8(program_bank);
    data_bank = pop8();
// DB = 0x80


    mem16_idx16();
    #[mem16, idx16] {
        rng.increment_rng();
    }
    mem8();
    #[mem8, idx16] {
        a = _brightness_buffer | INIDISP_FORCE_BLANK;

        wait_until_interrupt();

        // Force-blank screen to prevent corrupt graphics on VBlank overrun
        INIDISP = a;


        metasprites.update_oam__vblank();

        metatiles.transitions.transfer_buffer__vblank();

        textbox.transfer_buffer__vblank();
        ui.transfer_buffer__vblank();


        // Update scroll registers

        BG1HOFS = a = *(&<:bg1_scrollX as *u8);
        BG1HOFS = a = *(&>:bg1_scrollX as *u8);
        BG1VOFS = a = *(&<:bg1_scrollY as *u8);
        BG1VOFS = a = *(&>:bg1_scrollY as *u8);

        BG2HOFS = a = *(&<:bg2_scrollX as *u8);
        BG2HOFS = a = *(&>:bg2_scrollX as *u8);
        BG2VOFS = a = *(&<:bg2_scrollY as *u8);
        BG2VOFS = a = *(&>:bg2_scrollY as *u8);


        INIDISP = a = _brightness_buffer;
    }

    idx8();
    mem16();
    #[mem16, idx8] {
        metatiles.process_draw_tile_buffer__vblank();
    }

    mem16_idx16();
    #[mem16, idx16] {
        aa = *(&nmiCounter as *u16) & 0xff;

        frameCounter_loword = aa = aa + frameCounter_loword;
        if zero {
            frameCounter_hiword++;
        }
    }

    mem8_idx8();
    #[mem8, idx8] {
        nmiCounter = 0;

        joypad.update_state__inline();

        audio.process_sfx_queue__inline();
    }


    data_bank = pop8();
    p = pop8();

// DB = unknown
}



// Change the brightness of the display.
//
// NOTE: Will also wait until the end of the current frame
//
// DB = lowram
#[mem8]
func wait_frame_and_change_brightness(new_brightness : u8 in a) {
    _brightness_buffer = a;

    ^return wait_frame();
}



// Preform a fadeout animation until the display is disabled (force-blank).
//
// NOTE: If the system is in force-blank, this function will not fadeout.
//
// RETURNS: Force-blank
//
// DB = lowram
#[mem8, idx8]
func wait_multiple_frames_and_fadeout() {
    a = _brightness_buffer;
    if negative {
        ^return wait_frame();
    }
    if a >= 15 + 1 {
        a = 15;
    }
    do {
        a--;
        wait_frame_and_change_brightness(a);
        a = _brightness_buffer;
    } while !negative;

// In force blank.
}



// Preform a fadeout animation until the display is disabled (force-blank) at one-third speed.
//
// NOTE: If the system is in force-blank, this function will not fadeout.
//
// RETURNS: Force-blank
//
// DB = lowram
#[mem8, idx8]
func wait_multiple_frames_and_fadeout__slow() {
    while true {
        a = _brightness_buffer;
        if negative {
            // In force blank.
            return;
        }
        if a >= 15 + 1 {
            a = 15;
        }
        a--;
        wait_frame_and_change_brightness(a);

        wait_frame();
        wait_frame();
    }
}


// Preform a fade-in animation.
//
// NOTE: If the screen's brightness if full, this function will not do anything.
//
// DB = lowram
#[mem8, idx8]
func wait_multiple_frames_and_fadein() {
    a = _brightness_buffer;
    if a >= 15 {
        a = 0;
    }
    do {
        wait_frame_and_change_brightness(a);

        a = _brightness_buffer;
        a++;
    } while a < 15 + 1;
}


}

