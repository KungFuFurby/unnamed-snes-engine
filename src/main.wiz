// Copyright (c) 2021, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.

import "memmap";
import "registers";

import "common/reset";
import "common/dma";

// This import is required to prevent a "could not resolve identifier" compile error
import "game/entityloop";

import "audio";
import "gamemodes";
import "resources-over-usb2snes";

import "game/metasprites";
import "game/gamestate";


import "src/entities/sword-particles";
import "src/entities/bouncing-off-walls";
import "src/entities/crossbow-man";
import "src/entities/key";
import "src/entities/skeleton";
import "src/entities/slime";
import "src/entities/swarming";
import "src/entities/rook";
import "src/entities/boss";
import "src/entities/boss-bomb";
import "src/entities/smoke-particles";
import "src/entities/player-bomb";
import "src/entities/credits-orb";
import "src/entities/projectile";
import "src/entities/projectile-angled";
import "src/entities/test--calc-angle";

import "gen/enums";
import "gen/function-tables";


in code {


// Must only be called once.
//
// DB = 0x80
#[fallthrough, mem8, idx16]
inline func main__inline() {
    mem8_idx8();
    #[mem8, idx8] {
        INIDISP = a = INIDISP_FORCE_BLANK;

        resources_over_usb2snes.init();
    }
    idx16();

    audio.setup__inline();

    metasprites.setup__forceblank();

    push8(a = 0x7e);
    data_bank = pop8();
// DB = 0x7e

    mem8_idx8();
    #[mem8, idx8] {
        carry = gamestate.init();
        if carry {
            // Gamestate backup exists, load that instead of the title screen.
            set_next_game_mode_to_room_transition(RoomTransitions.fadein_reset_player);
        } else {
            // No gamestate backup, show the title screen
            set_next_game_mode(GameModes.TITLE_SCREEN);
        }

        execute_game_mode__inline();
    }
}

}

