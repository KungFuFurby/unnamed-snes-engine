// Copyright (c) 2021, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.

import "memmap";
import "../wiz/common/snes/snes";

import "entities/_variables";

import "gameloop";
import "metatiles";
import "metasprites";
import "resources";
import "common/dma";

import "entities/player";
import "entities/bouncing-off-walls";


in code {


// DB = 0x80
#[fallthrough, mem8, idx16]
func main() {
    metasprites.setup__fblank();

    snes.ppu.irq_enable = a = snes.ppu.IRQ_ENABLE_AUTOJOY | snes.ppu.IRQ_ENABLE_NMI;


    // Setup screen
    {
        wait_until_interrupt();

        snes.ppu.brightness = a = snes.ppu.BRIGHTNESS_FORCE_BLANK | snes.ppu.BRIGHTNESS_MASK;


        snes.ppu.bg_mode = a = 1 | snes.ppu.BG_MODE_MODE1_BG3_PRIORITY;
        snes.ppu.bg1_tilemap = a = (VRAM_BG1_MAP_WADDR >> snes.ppu.BG_TILESET_ADDRESS_BIT_ALIGN << snes.ppu.BG_TILEMAP_ADDRESS_SHIFT_LEFT) | snes.ppu.BG_TILEMAP_MIRROR_X;

        snes.ppu.bg12_tileset = a = (VRAM_BG1_TILES_WADDR >> snes.ppu.BG_TILESET_ADDRESS_BIT_ALIGN << snes.ppu.BG12_TILESET_ADDRESS_BG1_SHIFT);


        snes.ppu.screen_enable_mask = a = snes.ppu.SCREEN_ENABLE_BG1 | snes.ppu.SCREEN_ENABLE_OBJ;



        metatiles.load_tileset__forceblank(#:far& resources.metatile_tilesets.dungeon,
                                           &resources.metatile_tilesets.dungeon as u16);

        // Transfer common sprite tiles to VRAM
        snes.ppu.vram_address_hl = xx = VRAM_OBJ_WADDR;
        dma.transfer_to_vram__forceblank(#:far& resources.obj_base_tiles, &resources.obj_base_tiles as u16, sizeof(typeof(resources.obj_base_tiles)));

        // Transfer common sprite palette
        snes.ppu.cgram_address = a = 128;
        dma.transfer_to_cgram__forceblank(#:far& resources.obj_base_palette, &resources.obj_base_palette as u16, sizeof(typeof(resources.obj_base_palette)));
    }


    push8(a = 0x7e);
    data_bank = pop8();
// DB = 0x7e


    metatiles.load_map(0);

    idx8();
    #[idx8] {
        metatiles.draw_map__forceblank();

        metatiles.populate_map_tile_properties();

        gameloop.init();
    }
    idx16();


    create_dummy_entities();


    ^while true {
        idx8();
        #[idx8] {
            gameloop.process();
        }
        idx16();

        metasprites.draw_shadows();

        metasprites.finalize_buffer();

        // VBlank
        {
            push8(program_bank);
            data_bank = pop8();
        // DB = 0x80

            wait_until_interrupt();

            metasprites.update_oam__vblank();

            snes.ppu.brightness = a = 0xf;

            push8(a = 0x7e);
            data_bank = pop8();
        // DB = 0x7e
        }
    }
}



// Create some dummy entities
// DB = 0x7e
#[mem8, idx16]
func create_dummy_entities() {
    entities.SoA.xPos[1].px = a = 64;
    entities.SoA.yPos[1].px = a = 64;

    entities.SoA.xPos[2].px = a = 128;
    entities.SoA.yPos[2].px = a = 64;

    entities.SoA.xPos[3].px = a = 192;
    entities.SoA.yPos[3].px = a = 64;

    entities.SoA.xPos[4].px = a = 224;
    entities.SoA.yPos[4].px = a = 64;


    entities.SoA.xPos[5].px = a = 64;
    entities.SoA.yPos[5].px = a = 112;

    entities.SoA.xPos[6].px = a = 192;
    entities.SoA.yPos[6].px = a = 112;


    entities.SoA.xPos[7].px = a = 32;
    entities.SoA.yPos[7].px = a = 160;

    entities.SoA.xPos[8].px = a = 64;
    entities.SoA.yPos[8].px = a = 160;

    entities.SoA.xPos[9].px = a = 128;
    entities.SoA.yPos[9].px = a = 160;

    entities.SoA.xPos[10].px = a = 192;
    entities.SoA.yPos[10].px = a = 160;

    entities.SoA.xPos[11].px = a = 224;
    entities.SoA.yPos[11].px = a = 160;


    a = entities.ShadowSize.SMALL as u8;
    entities.SoA._shadowAndBlank[4].shadowSize = a as entities.ShadowSize;
    entities.SoA._shadowAndBlank[5].shadowSize = a as entities.ShadowSize;
    entities.SoA._shadowAndBlank[6].shadowSize = a as entities.ShadowSize;
    entities.SoA._shadowAndBlank[7].shadowSize = a as entities.ShadowSize;
    entities.SoA._shadowAndBlank[11].shadowSize = a as entities.ShadowSize;

    a = entities.ShadowSize.MEDIUM as u8;
    entities.SoA._shadowAndBlank[1].shadowSize = a as entities.ShadowSize;
    entities.SoA._shadowAndBlank[3].shadowSize = a as entities.ShadowSize;
    entities.SoA._shadowAndBlank[8].shadowSize = a as entities.ShadowSize;
    entities.SoA._shadowAndBlank[10].shadowSize = a as entities.ShadowSize;

    a = entities.ShadowSize.LARGE as u8;
    entities.SoA._shadowAndBlank[2].shadowSize = a as entities.ShadowSize;
    entities.SoA._shadowAndBlank[9].shadowSize = a as entities.ShadowSize;


    xx = entities.SoA.LAST_INDEX;
    do {
        mem16();
        #[mem16] {
            aa = entities.bouncing_off_walls.process as u16;
            entities.SoA.process_function[unaligned xx] = aa as func(u8 in x);

            entities.SoA.xVelocity[unaligned xx] = aa =  0x0120;
            entities.SoA.yVelocity[unaligned xx] = aa = -0x0120 as u16;
        }
        mem8();

        a = entities.SoA.shadowSize[xx] as u8;
        if a == entities.ShadowSize.SMALL as u8 {
            entities.SoA.tileHitbox_halfWidth[xx] = a = 3;
            entities.SoA.tileHitbox_halfHeight[xx] = a = 2;
        }
        else if a == entities.ShadowSize.MEDIUM as u8 {
            entities.SoA.tileHitbox_halfWidth[xx] = a = 6;
            entities.SoA.tileHitbox_halfHeight[xx] = a = 3;
        }
        else {
            entities.SoA.tileHitbox_halfWidth[xx] = a = 8;
            entities.SoA.tileHitbox_halfHeight[xx] = a = 4;
        }


        xx--;
        xx--;
    }
    while !zero;
}

}

