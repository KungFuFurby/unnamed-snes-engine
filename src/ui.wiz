// Copyright (c) 2022, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.

import "memmap";
import "../wiz/common/snes/snes";

import "resources";

import "player";
import "gamestate";
import "common/dma";

import "audio";
import "../gen/resources";


namespace ui {


let HEALTH_BAR_MAX = 32;

let HEALTH_BAR_TILE_X = 1;
let HEALTH_BAR_TILE_Y = 1;

let KEYS_TILE_X = HEALTH_BAR_TILE_X + 1;
let KEYS_TILE_Y = HEALTH_BAR_TILE_Y + 1;


let HB_ANIMATION_TIMER = 3;


let HB_PREFIX_TILE  = 1;
let HB_EMPTY_TILE   = 2;
let HB_FIRST_TILE   = 3;
let HB_FULL_TILE    = 6;


let HB_SHIFT = 2;

let MAX_HB_TILES = HEALTH_BAR_MAX >> HB_SHIFT;


let KEY_TILE         = 7;
let KEY_TILE_PALETTE = 1;

let MAX_UI_KEYS      = 5;


in wram7e {
    struct HealthBarBuffer {
        prefix_tile : u8,
        bar : [ u8 ; MAX_HB_TILES ],
    };

    // Tile buffer
    var __far_healthBarBuffer : HealthBarBuffer;
        // (This hack is required to access `healthBarBuffer` via addr addressing.)
        var healthBarBuffer @ &__far_healthBarBuffer : HealthBarBuffer;

    // Number of tiles to show in the health bar.
    // Equal to max player health >> HB_SHIFT.
    // Must be <= MAX_HB_TILES.
    var nHealthBarTiles : u8;

    // Health bar value
    var healthBarValue : u8;

    // Countdown timer for healthbar increment/decrement animation.
    var healthBarTimer : i8;


    // Tile buffer for the key counter UI
    // (low byte of the tilemap entries)
    var keyBuffer : [u8 ; MAX_UI_KEYS];
}


in lowram {
    // If non-zero then textBuffer will be uploaded to the PPU on the next VBlank.
    // (byte flag)
    var healthBarBufferFlag : u8;

    // If non-zero then `keyBuffer` will be uploaded to the PPU on the next VBlank.
    // (byte flag)
    var keyBufferFlag : u8;
}



in code {


// Initialize the UI variables
//
// ASSUMES: player is initialized.
//
// DB = 0x7e
inline func init() {

    healthBarBuffer.prefix_tile = a = HB_PREFIX_TILE;

    healthBarTimer = 0;

    max_player_health_changed();
    draw_key_bar(gamestate.data._keyCount);

    _redraw_health_bar(player.health);
}



// Setup the PPU, load UI tiles into VRAM.
//
// REQUIRES: Force-Blank
// Uses DMA channel 0
//
// DB = 0x80
#[mem8, idx16]
inline func setup_ppu__forceblank() {

    // Transfer UI tiles VRAM
    resources.load_tiles_resource_into_vram(resources.tiles.ui, VRAM_BG3_TILES_WADDR);

    // BG3 tilemap cleared by the Textbox subsystem

    // Set palette and order bits for Key UI
    {
        snes.ppu.vram_control = a = snes.ppu.VRAM_CONTROL_INCREMENT_1 | snes.ppu.VRAM_CONTROL_REMAP_MODE_0 | snes.ppu.VRAM_CONTROL_SIZE_2;
        snes.ppu.vram_address_hl = xx = VRAM_BG3_MAP_WADDR + KEYS_TILE_Y * 32 + KEYS_TILE_X;

        a = 0x20 | KEY_TILE_PALETTE << 2;
        xx = MAX_UI_KEYS;
        do {
            snes.ppu.vram_write_data_h = a;
            xx--;
        } while !zero;
    }

    // BG3 scroll registers reset by the Textbox subsystem

    // Write UI back to VRAM after it has been erased by the Textbox subsystem
    healthBarBufferFlag = 0;
    keyBufferFlag = 0;
}



// Transfer the `healthBarBuffer` to VRAM if required.
//
// REQUIRES: V-Blank
// Uses DMA channel 0
//
// DB = 0x80
#[mem8, idx16]
inline func transfer_buffer__vblank() {
    // MUST NOT modify zpTmp variables.

    a = healthBarBufferFlag;
    if zero {
        snes.ppu.vram_control = snes.ppu.VRAM_CONTROL_INCREMENT_1 | snes.ppu.VRAM_CONTROL_REMAP_MODE_0 | snes.ppu.VRAM_CONTROL_SIZE_1;

        snes.ppu.vram_address_hl = xx = VRAM_BG3_MAP_WADDR + HEALTH_BAR_TILE_Y * 32 + HEALTH_BAR_TILE_X;

        snes.dma0.control = a = snes.dma.CONTROL_MODE_A;
        snes.dma0.mdma_dest = a = <:&snes.ppu.vram_write_data_l;

        snes.dma0.src_address_hl = xx = &healthBarBuffer as u16;
        snes.dma0.src_address_bank = a = #:far &__far_healthBarBuffer;

        snes.dma0.mdma_size_hl = xx = sizeof(HealthBarBuffer);

        snes.dma.mdma_enable = a = snes.dma.ENABLE_0;

        healthBarBufferFlag = a;
    }

    a = keyBufferFlag;
    if zero {
        snes.ppu.vram_control = snes.ppu.VRAM_CONTROL_INCREMENT_1 | snes.ppu.VRAM_CONTROL_REMAP_MODE_0 | snes.ppu.VRAM_CONTROL_SIZE_1;

        snes.ppu.vram_address_hl = xx = VRAM_BG3_MAP_WADDR + KEYS_TILE_Y * 32 + KEYS_TILE_X;

        snes.dma0.control = a = snes.dma.CONTROL_MODE_A;
        snes.dma0.mdma_dest = a = <:&snes.ppu.vram_write_data_l;

        snes.dma0.src_address_hl = xx = &keyBuffer as u16;
        snes.dma0.src_address_bank = a = #:far &keyBuffer;

        snes.dma0.mdma_size_hl = xx = sizeof(typeof(keyBuffer));

        snes.dma.mdma_enable = a = snes.dma.ENABLE_0;

        keyBufferFlag = a;
    }
}



// Resize health bar.
//
// Should be called whenever the player's max health changes.
//
// ASSUMES: player's health changes when max health changes.
//
// DB = 0x7e
#[mem8, idx8]
func max_player_health_changed() {
    a = player.maxHealth >>> HB_SHIFT;
    if a >= MAX_HB_TILES + 1 {
        a = MAX_HB_TILES;
    }
    nHealthBarTiles = a;


    healthBarTimer = 0;
}



// DB = 0x7e
#[mem8, idx8]
inline func process() {

    a = healthBarValue;
    cmp(a, player.health);
    if !zero {
        healthBarTimer--;
        if negative {
            if carry {
                a--;
            } else {
                audio.queue_sound_effect(sound_effects.player_heal);

                a = healthBarValue;
                a++;
            }

            _redraw_health_bar(a);

            a = healthBarValue;
            if a == player.health {
                a = 0;
            } else {
                a = HB_ANIMATION_TIMER - 1;
            }
            healthBarTimer = a as i8;
        }
    }
}



// Redraw the health bar
//
// ASSUMES: player max health >= player health
//
// DB = 0x7e
#[mem8, idx8]
func _redraw_health_bar(newValue : u8 in a) {

    x = 0;

    healthBarValue = a;

    // Draw full tiles
    a >>>= HB_SHIFT;
    if a >= MAX_HB_TILES + 1 {
        a = MAX_HB_TILES;
    }
    if !zero {
        y = a;
        x = a;

        a = HB_FULL_TILE;
        do {
            healthBarBuffer.bar[x] = a;
            x--;
        } while !negative;

        x = y;
    }


    // Draw partial tile
    a = healthBarValue & ((1 << HB_SHIFT) - 1);
    if !zero {
        healthBarBuffer.bar[x] = a = a + (HB_FIRST_TILE - 1);
        x++;
    }


    // Draw empty tiles
    if x < nHealthBarTiles {
        a = HB_EMPTY_TILE;
        do {
            healthBarBuffer.bar[x] = a;
            x++;
        } while x < nHealthBarTiles;
    }


    // Clear tiles after max health
    if x < MAX_HB_TILES {
        do {
            healthBarBuffer.bar[x] = 0;
            x++;
        } while x < MAX_HB_TILES;
    }


    // Upload to VRAM on next VBlank
    healthBarBufferFlag = 0;
}



// Redraw the key bar UI.
//
// MUST be called then the key count changes.
//
// DB = 0x7e
#[mem8, idx8]
func draw_key_bar(nKeys : u8 in x) {
    if x >= MAX_UI_KEYS + 1 {
        x = MAX_UI_KEYS;
    }

    y = x;
    if !zero {
        a = KEY_TILE;
        do {
            y--;
            keyBuffer[y] = a;
        } while !zero;
    }

    // Clear tiles after keys
    if x < MAX_UI_KEYS {
        do {
            keyBuffer[x] = 0;
            x++;
        } while x < MAX_UI_KEYS;
    }

    keyBufferFlag = 0;
}


}


}

