// Copyright (c) 2022, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.


import "../memmap";

import "_variables";
import "_common";

import "smoke-particles";
import "player-bomb";

import "../player";

import "../ui";
import "../metatiles";
import "../metasprites";
import "../common/math";


import "../../gen/cosine-tables";


let N_INVINCIBILITY_FRAMES = 20;


namespace entities {
namespace base {


in zeropage {
    // Centre of the collision (if one occurs)
    var collisionCentre_x : u8;
    var collisionCentre_y : u8;
}


in rodata0 {
    // Table of Cosine tables for each `set_velocity_after_player_sword_collision` collisionSpeed.
    const _SwordStrikeCosineTables : [*[ i16 ; 32 ]] = [
        CosineTables.SwordStrike_Slower         as *[i16 ; 32],
        CosineTables.SwordStrike_Slow           as *[i16 ; 32],
        CosineTables.SwordStrike_Medium         as *[i16 ; 32],
        CosineTables.SwordStrike_Fast           as *[i16 ; 32],
        CosineTables.SwordStrike_ExtraFast      as *[i16 ; 32],
        CosineTables.SwordStrike_FastFastFast   as *[i16 ; 32],
    ];
    let SwordStrikeCosineTables = far &_SwordStrikeCosineTables as far *const * const i16;
};


// Named Indexes into `SwordStrikeCosineTables`
namespace SwordCollisionSpeed {
    let SLOWER         = 0;
    let SLOW           =  2;
    let MEDIUM         =  4;
    let FAST           =  6;
    let EXTRA_FAST     =  8;
    let FAST_FAST_FAST = 10;
}


in code {



// Collision functions
// ===================



// Hurt the player from a collision.
//
// KEEP: Y
//
// DB = 0x7e
#[mem8, idx8]
#[fallthrough]
func hurt_player__collision(entityId : u8 in y) {

    a = SoA.attackPower[y];
}

// Hurt the player from a collision with a custom attack power stat.
//
// KEEP: Y
//
// DB = 0x7e
#[mem8, idx8]
func hurt_player__collision__attack_power(entityId : u8 in y, attackPower : u8 in a) {

var _tmp : u8 in zpTmp_byte_0;

    x = player.iframeCounter;
    if zero {
        // ::TODO add different types of attacks and defences::

        _tmp = a;

        a = player.health - _tmp;
        if !carry {
            a = 0;
        }
        player.health = a;


        player.set_state_hurt__enemy_collision__inline(y);

        y = currentEntityId;
    }
}


// ASSUMES: `collisionState` is valid.
//
// KEEY: Y
//
// DB = 0x7e
#[mem8, idx8]
inline func __take_damage_from_player_attack__inline(entityId : u8 in y) {
    // ::TODO add more types of attacks and defences::

    // MUST NOT modify X

    a = collisionState;
    if a & CollisionState.PLAYER_BOMB != 0 {
        a = player_bomb.BOMB_ATTACK_POWER;
    }
    else {
        a = player.swordAttackPower;
    }

    // rsb (ie, a = health - a)
    carry = true;
    a ^= 0xff;
    a += SoA.health[y];

    if !carry {
        a = 0;
    }
    SoA.health[y] = a;
}



// Take damage from the player's attack.
//
// ASSUMES: `collisionState` is valid.
//
// KEEP: Y
//
// DB = 0x7e
#[mem8, idx8]
func take_damage_from_player_attack(entityId : u8 in y) {

    __take_damage_from_player_attack__inline(y);
}



// Take damage from the player's sword and then call `set_velocity_after_player_sword_collision`.
//
// ASSUMES: `collisionState` is valid.
// ASSUMES: `collisionCentre` is valid if the entity collided with the sword hitbox.
//
// KEEP: Y
//
// DB = 0x7e
#[mem8, idx8, fallthrough]
func take_damage_from_player_attack_with_knockback(entityId : u8 in y, collisionSpeed : u8 in x) {

    // MUST NOT modify X
    __take_damage_from_player_attack__inline(y);
    return set_velocity_after_player_attack_collision(y, x);
}



// Change velocity of the entity based on the collision type.
//
// ASSUMES: `collisionCentre` is valid if the entity collided with the sword hitbox.
//
// ASSUMES: collisionSpeed is a valid index into SwordStrikeCosineTables.
//
// PARAM: collisionSpeed - index into SwordStrikeCosineTables.
//
// KEEP: Y
//
// DB = 0x7e
#[mem8, idx8]
func set_velocity_after_player_attack_collision(entityId : u8 in y, collisionSpeed : u8 in x) {
var _farPtr : far *u16 in zpTmp_farPtr;

    mem16();
    #[mem16] {
        *(&_farPtr as *u16) = aa = SwordStrikeCosineTables[unaligned x] as u16;
        #:_farPtr = x = #:far &_SwordStrikeCosineTables;
    }
    mem8();


    a = collisionState;
    if a & CollisionState.PLAYER_BOMB != 0 {
        // Attacked by a bomb
        x = calc_angle_32x2(a = player_bomb.explosion_xPos,
                            a = player_bomb.explosion_yPos,
                            x = SoA.xPos_px[y],
                            y = a = SoA.yPos_px[y]);
    }
    else {
        // Attacked by a sword
        x = calc_angle_32x2(a = player.xPos.px,
                            a = player.yPos.px,
                            collisionCentre_x,
                            collisionCentre_y);
    }
    y = x;

    x = currentEntityId;

    mem16();
    #[mem16] {
        SoA.xVelocity[unaligned x] = aa = _farPtr[unaligned y];

        #[idx16] {
            yy = aa = (yy + CosineTables.SINE_OFFSET) & CosineTables.TABLE_MASK;
        }

        SoA.yVelocity[unaligned x] = aa = _farPtr[unaligned y];
    }
    mem8();

    y = x;
}



// Test for a player bomb collision.
//
// NOTE: This function does not modify `collisionState`
//
// KEEP: Y
//
// DB = 0x7e
#[mem8, idx8]
func test_player_bomb_collision(entityId : u8 in y) : bool in carry {
    a = SoA.iframeCounter[y];
    if zero {
        // Only test for a bomb collision if not in iframe

        a = player_bomb.explosion_xPos;
        if !zero {
            // The player bomb exploded
            a = __player_bomb_manhattan_distance__inline(y, a);
            if a < player_bomb.BOMB_EXPLOSION_DISTANCE {
                return true;
            }
        }
    }

    return false;
}



// Test a projectile entity for tile and player collisions.
//
// This function preforms the same tests as `process_collisions()`, except
// it uses the projectile version of the MetaTile collision tests.
//
// See `process_collisions()` for the behaviour of this function.
//
// ASSUMES: The entity is a projectile
//
// KEEP: Y
// RETURN: collisionState
//
// DB = 0x7e
#[mem8, idx8]
func process_collisions__projectile(entityId : u8 in y) {
    metatiles.move_entity_and_collision_test__projectile_bounded(y);

    return __process_collisions__after_metatile_checks(y);
}




// Test for player collisions and tile collisions.
//
// The results of the collision tests will be stored in `collisionState`.
//
// If there is a player collision, the `player.hitbox_collided_with_entity__inline()`
// or `player.hurtbox_collided_with_entity__inline()` function will be called.
//
// Also updates `SoA.movementState`, `SoA.iframeCounter` and `SoA.health`.
//
// ASSUMES `entityId` is not player.
//
// KEEP: Y
// RETURN: collisionState
//
// DB = 0x7e
#[mem8, idx8, fallthrough]
func process_collisions(entityId : u8 in y) {

    metatiles.move_entity_and_collision_test__bounded(y);

// fallthrough
}


// KEEP: Y
// DB = 0x7e
#[mem8, idx8]
func __process_collisions__after_metatile_checks(entityId : u8 in y) {

    a = SoA.iframeCounter[y];
    if zero {
        // Only test for a player collision if not in iframe

        a = player_bomb.explosion_xPos;
        if !zero {
            // The player bomb exploded
            a = __player_bomb_manhattan_distance__inline(y, a);
            if a < player_bomb.BOMB_EXPLOSION_DISTANCE {
                collisionState = a = CollisionState.ANY_PLAYER_WEAPON | CollisionState.PLAYER_BOMB;
                return;
            }
        }


        idx16();
        #[mem8, idx16] {
            // xx = msFrameAddr
            // yy = entityId

            xx = entities.SoA.msFrameAddr[unaligned yy];

            carry = __test__entity_hurtbox__player_hitbox(yy, xx);
            if carry {
                // collided with player's attack

                mem8_idx8();
                #[mem8, idx8] {
                    player.hitbox_collided_with_entity__inline(y);
                    y = currentEntityId;

                    // ::TODO Different iframe intervals for different entities::
                    // ::TODO Different iframe intervals for NTSC/PAL::
                    SoA.iframeCounter[y] = a = N_INVINCIBILITY_FRAMES;


                    // ::TODO decrement health::


                    collisionState = a = CollisionState.ANY_PLAYER_WEAPON | CollisionState.PLAYER_SWORD;

                    return;
                }
            }

            carry = __test__entity_hitbox__player_hurtbox(yy, xx);
            if carry {
                // Collided with player's hurtbox

                mem8_idx8();
                #[mem8, idx8] {
                    collisionState = a = CollisionState.PLAYER_HURTBOX;

                    return;
                }
            }
        }
        mem8_idx8();
    }
    else {
        SoA.iframeCounter[y] = --a;
    }


    collisionState = 0;

    return;
}



// COLLISION TESTS
// ===============


// Add the entity's unsigned xPos to a signed i8 accumulator with clamping.
//
// ASSUMES: negative flag contains the MSB of A (the previous instruction is an `lda`).
//
// KEEP: xx & yy
//
// DB = 0x7e
#[mem8, idx16]
inline func __add_xPos_to_i8a_clamp(ia8 : u8 in a, n : bool in negative, entityId : u16 in yy) : u8 in a {
    if negative {
        a += entities.SoA.xPos_px[yy];
        return a if carry;
            a = 0;
    }
    else {
        a += entities.SoA.xPos_px[yy];
        return a if !carry;
            a = 0xff;
    }

    return a;
}


// Add the entity's unsigned yPos to a signed i8 accumulator with clamping.
//
// ASSUMES: negative flag contains the MSB of A (the previous instruction is an `lda`).
//
// KEEP: xx & yy
//
// DB = 0x7e
#[mem8, idx16]
inline func __add_yPos_to_i8a_clamp(i8a : u8 in a, n : bool in negative, entityId : u16 in yy) : u8 in a {
    if negative {
        a += entities.SoA.yPos_px[yy];
        return a if carry;
            a = 0;
    }
    else {
        a += entities.SoA.yPos_px[yy];
        return a if !carry;
            a = 0xff;
    }

    return a;
}



// Test for a collision between an entity's hurtbox and the player's hurtbox.
//
// NOTE: This function will NOT call the player collided callback.
//
// ASSUMES `entityId` is not player.
//
// KEEP: xx & yy
// RETURN: true if there is a collision
//
// DB = 0x7e
#[mem8, idx16]
func __test__entity_hitbox__player_hurtbox(entityId : u16 in yy, msFrameAddr : u16 in xx) : bool in carry {

var _hb_left   : u8 in zpTmp_byte_0;
var _hb_right  : u8 in zpTmp_byte_1;
var _hb_top    : u8 in zpTmp_byte_2;
var _tmp       : u8 in zpTmp_byte_3;


    // calculate entity hitbox left
    // Add i8 signed offset to entity's u8 unsigned position (with clamping)
    a = metasprites.MsDataFormat.hitbox_left[xx] as u8;
    if negative {
        // Putting the no-hitbox test here as it is faster.
        if a == metasprites.MsDataFormat.NO_AABB_VALUE {
            // MS frame has no hitbox
            return false;
        }

        a += entities.SoA.xPos_px[yy];
        if !carry {
            a = 0;
        }
    }
    else {
        a += entities.SoA.xPos_px[yy];
        if carry {
            a = 0xff;
        }
    }

    ^if a < player.playerHurtbox.right {
        _hb_left = a;

        a = metasprites.MsDataFormat.hitbox_right[xx] as u8;
        a = __add_xPos_to_i8a_clamp(a, negative, yy);
        if a >= player.playerHurtbox.left {
            _hb_right = a;

            a = metasprites.MsDataFormat.hitbox_top[xx] as u8;
            a = __add_yPos_to_i8a_clamp(a, negative, yy);
            if a < player.playerHurtbox.bottom {
                _hb_top = a;

                a = metasprites.MsDataFormat.hitbox_bottom[xx] as u8;
                a = __add_yPos_to_i8a_clamp(a, negative, yy);
                if a >= player.playerHurtbox.top {
                    // Calculate collision centre and return true
                    //   centre_y = avg(min(hb_bottom, player_bottom), max(hb_top, player_top))
                    //   centre_x = avg(min(hb_right, player_right), max(hb_left, player_left))

                    // a = _hb_bottom;
                    if a >= player.playerHurtbox.bottom {
                        a = player.playerHurtbox.bottom;
                    }
                    _tmp = a;

                    a = _hb_top;
                    if a < player.playerHurtbox.top {
                        a = player.playerHurtbox.top;
                    }
                    collisionCentre_y = a = (a + _tmp) >>>># 1;

                    a = _hb_right;
                    if a >= player.playerHurtbox.right {
                        a = player.playerHurtbox.right;
                    }
                    _tmp = a;

                    a = _hb_left;
                    if a < player.playerHurtbox.left {
                        a = player.playerHurtbox.left;
                    }
                    collisionCentre_x = a = (a + _tmp) >>>># 1;

                    return true;
                }
            }
        }
    }

    return false;
}



// Test for a collision between an entity's hurtbox and the player's hitbox.
//
// NOTE: This function will NOT call the player collided callback.
//
// ASSUMES `entityId` is not player.
//
// KEEP: xx & yy
// RETURN: true if there is a collision
//
// DB = 0x7e
#[mem8, idx16]
func __test__entity_hurtbox__player_hitbox(entityId : u16 in yy, msFrameAddr : u16 in xx) : bool in carry {

var _hb_left   : u8 in zpTmp_byte_0;
var _hb_right  : u8 in zpTmp_byte_1;
var _hb_top    : u8 in zpTmp_byte_2;
var _tmp       : u8 in zpTmp_byte_3;


    // calculate entity hurtbox left
    // Add i8 signed offset to entity's u8 unsigned position (with clamping)
    a = metasprites.MsDataFormat.hurtbox_left[xx] as u8;
    if negative {
        // Putting the no-hitbox test here as it is faster.
        if a == metasprites.MsDataFormat.NO_AABB_VALUE {
            // MS frame has no hitbox
            return false;
        }

        a += entities.SoA.xPos_px[yy];
        if !carry {
            a = 0;
        }
    }
    else {
        a += entities.SoA.xPos_px[yy];
        if carry {
            a = 0xff;
        }
    }

    ^if a < player.playerHitbox.right {
        _hb_left = a;

        a = metasprites.MsDataFormat.hurtbox_right[xx] as u8;
        a = __add_xPos_to_i8a_clamp(a, negative, yy);
        if a >= player.playerHitbox.left {
            _hb_right = a;

            a = metasprites.MsDataFormat.hurtbox_top[xx] as u8;
            a = __add_yPos_to_i8a_clamp(a, negative, yy);
            if a < player.playerHitbox.bottom {
                _hb_top = a;

                a = metasprites.MsDataFormat.hurtbox_bottom[xx] as u8;
                a = __add_yPos_to_i8a_clamp(a, negative, yy);
                if a >= player.playerHitbox.top {
                    // Calculate collision centre and return true
                    //   centre_y = avg(min(hb_bottom, player_bottom), max(hb_top, player_top))
                    //   centre_x = avg(min(hb_right, player_right), max(hb_left, player_left))

                    // a = _hb_bottom;
                    if a >= player.playerHitbox.bottom {
                        a = player.playerHitbox.bottom;
                    }
                    _tmp = a;

                    a = _hb_top;
                    if a < player.playerHitbox.top {
                        a = player.playerHitbox.top;
                    }
                    collisionCentre_y = a = (a + _tmp) >>>># 1;

                    a = _hb_right;
                    if a >= player.playerHitbox.right {
                        a = player.playerHitbox.right;
                    }
                    _tmp = a;

                    a = _hb_left;
                    if a < player.playerHitbox.left {
                        a = player.playerHitbox.left;
                    }
                    collisionCentre_x = a = (a + _tmp) >>>># 1;

                    return true;
                }
            }
        }
    }

    return false;
}


// Distance tests
// ==============


// Calculate the manhattan distance
//
// NOTE: This value is clipped to a maximum output of 255
//
// ASSUMES: `explosion_xPos == player_bomb.explosion_xPos` and `explosion_xPos != 0`.
//
// KEEP: Y
//
// DB = 0x7e
#[mem8, idx8]
inline func __player_bomb_manhattan_distance__inline(entityId : u8 in y, explosion_xPos : u8 in a) : u8 in a {
var _tmp       : u8 in zpTmp_byte_0;

    a = a - SoA.xPos_px[y];
    if !carry {
        a = negate8(a);
    }
    _tmp = a;

    a = player_bomb.explosion_yPos - SoA.yPos_px[y];
    if !carry {
        a = negate8(a);
    }

    a += _tmp;
    if carry {
        a = 0xff;
    }

    return a;
}



// Calculate the Manhattan distance to the player
//
// NOTE: This value is clipped to a maximum output of 255
//
// KEEP: Y
//
// DB = 0x7e
#[mem8, idx8]
func manhattan_distance_to_player(entityId : u8 in y) : u8 in a {
var _tmp       : u8 in zpTmp_byte_0;

    a = SoA.xPos_px[y] - player.xPos.px;
    if !carry {
        a = negate8(a);
    }
    _tmp = a;

    a = SoA.yPos_px[y] - player.yPos.px;
    if !carry {
        a = negate8(a);
    }

    a += _tmp;
    if carry {
        a = 0xff;
    }

    return a;
}

}

}
}



// MetaSprite functions
// ====================

namespace entities {

import "../metasprites";

let set_ms_animation_x               = metasprites.set_entity_animation_x;
let set_ms_animation                 = metasprites.set_entity_animation;
let set_ms_animation_if_changed      = metasprites.set_entity_animation_if_changed;

let stop_ms_animation = metasprites.stop_entity_animation;

let is_ms_non_looping_animation_running = metasprites.is_entity_non_looping_animation_running;

}


