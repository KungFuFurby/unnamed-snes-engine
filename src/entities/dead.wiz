// Copyright (c) 2022, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.


import "../memmap";

import "_variables";



namespace entities {
namespace dead {


in code {


// Transforms an entity into a dead entity.
//
// ASSUMES: entityId is an active entity.
//
// KEEP: Y
//
// DB = 0x7e
#[mem8, idx8]
func change_to_dead_entity(entityId : u8 in x) {
    // Do not change entity state.   Only change process_function.
    //
    // This is to prevent memory corruption if `entities.SoA` is modified after calling this function.

    mem16();
    #[mem16] {
        (&SoA.process_function[0] as *u16)[unaligned y] = aa = &process__first_dead_frame as u16;
    }
    mem8();
}



// The first frame of the dead entity.
//
// KEEP: Y
//
// DB = 0x7e
#[mem8, idx8]
func process__first_dead_frame(entityId : u8 in y) : bool in carry {
    // This function is responsible for initialising the dead entity's state
    // (not `change_to_dead_entity`).

    // ::TODO death animation (poof)::
    return false;
}


}

}
}

