// Copyright (c) 2021, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.

import "../memmap";
import "../metasprites";

let PLAYER_ENTITY_ID = 0;


namespace entities {
    let N_ENTITIES = 21;

    struct pos {
        sx : u8,
        px : u8
    };

    namespace MovementState {
        let RIGHT_COLLISION = 1 << 0;
        let LEFT_COLLISION  = 1 << 1;
        let UP_COLLISION    = 1 << 2;
        let DOWN_COLLISION  = 1 << 3;

        let X_AXIS_COLLISION = RIGHT_COLLISION | LEFT_COLLISION;
        let Y_AXIS_COLLISION = UP_COLLISION | DOWN_COLLISION;
    };

    namespace CollisionState {
        let PLAYER_WEAPON   = 1 << 7;
        let PLAYER_HURTBOX  = 1 << 6;

        let PLAYER_WEAPON_BIT   = 7;
        let PLAYER_HURTBOX_BIT  = 6;
    };


    struct _u8pair {
        first : u8,
        second : u8,
    };

    struct U8Aabb {
        left : u8,
        right : u8,
        top : u8,
        bottom : u8,
    };


    in zeropage {
        // The entityId of the current entity
        //
        // This variable is only valid during an entity's process function.
        //
        // (byte index)
        var currentEntityId : u8;


        // Collision flags
        // (bitfield of `entities.CollisionState`)
        var collisionState : u8;
    }


    // Entity 0 is always the player
    namespace SoA {
        let LAST_INDEX = (N_ENTITIES - 1) * 2;

        // Byte access size
        let BA_SIZE = N_ENTITIES * 2 - 1;


        in lowram_roomstate {
            // Process function for the entity.  Called once per frame by the undo loop.
            //
            // INPUT: entityId: index into `entities.SoA` Structure-of-Arrays.
            // RETURN: carry set if entity is still active in the next frame.
            //
            // NOTE: `currentEntityId` will contain a copy of `entityId` to provide an easy
            //       way to restore the X register if it gets overwritten.
            //
            // NOTE: The player entity (entityId 0) MUST NOT change this variable.
            //
            // DB = 0x7e
            #[mem8, idx8]
            var process_function : [func(entityId : u8 in y) : bool in carry ; N_ENTITIES];


            // Metasprite draw function.
            //
            // INPUT: Y = entityId: index into `entities.SoA` Structure-of-Arrays.
            //
            // DB = 0x7e
            #[mem8, idx8]
            var ms_draw_function : [func(msFrame : u16 in yy, xPos : u16 in metasprites.xPos, yPos : u16 in metasprites.yPos) ; N_ENTITIES];
        }

        in wram7e_roomstate {
            var xPos : [pos ; N_ENTITIES];
                var xPos_u16 @ &xPos[0]    : [u16 ; N_ENTITIES];
                var xPos_sx  @ &xPos[0].sx : [u8  ; BA_SIZE];
                var xPos_px  @ &xPos[0].px : [u8  ; BA_SIZE];

            var yPos : [pos ; N_ENTITIES];
                var yPos_u16 @ &yPos[0]    : [u16 ; N_ENTITIES];
                var yPos_sx  @ &yPos[0].sx : [u8  ; BA_SIZE];
                var yPos_px  @ &yPos[0].px : [u8  ; BA_SIZE];


            // Previous position of the entity
            //
            // You SHOULD NOT write to these variables.
            // They will be automatically updated in the MetaSprite draw function
            //
            // (2x uint8)
            var _previousPosition : [ _u8pair ; N_ENTITIES];
                var previousXpos @ &_previousPosition[0].first  : [u8 ; BA_SIZE];
                var previousYpos @ &_previousPosition[0].second : [u8 ; BA_SIZE];


            var _zPosAndBlank : [_u8pair ; N_ENTITIES];

                // Z position of the entity
                // (byte)
                var zPos @ &_zPosAndBlank[0].first : [u8 ; N_ENTITIES * 2];


            // ------------------------------------------------------------------------------------
            // IMPORTANT NOTE: MetaSprite variables should not be directly modified by entity code.
            //                 Please use the provided functions instead.
            // ------------------------------------------------------------------------------------

            var _msAnimationIdAndPfIndex : [_u8pair ; N_ENTITIES];

                // The id of the MetaSprite animation.
                // NOTE: This variable might not be the current animation.
                var msAnimationId                   @ &_msAnimationIdAndPfIndex[0].first : [ u8 ; BA_SIZE];

                // Index into the MetaSprite animation process function table.
                //
                // (byte index into function table)
                var msAnimationProcessFunctionIndex @ &_msAnimationIdAndPfIndex[0].second : [u8 ; BA_SIZE];

            // MetaSprite frame table address.
            // Points to a addr table of `metasprites.MsDataFormat` data structure
            var metaSpriteFrameTable : [u16 ; N_ENTITIES];

            // MetaSprite animation table address.
            // Points to a addr table of `metasprites.AnimationDataFormat` data structure
            var msAnimationTable : [u16 ; N_ENTITIES];

            // Address of the start of the current MetaSprite animation.
            // (word address pointing to `metasprites.AnimationDataFormat` data)
            var msAnimationAddr : [u16 ; N_ENTITIES];

            // Current position within the MetaSprite animation
            // (word address pointing into the middle of `metasprites.AnimationDataFormat` data)
            var msAnimationPos : [u16 ; N_ENTITIES];

            // Address of the current MetaSprite Frame.
            // (word address pointing to a `metasprites.MsDataFormat` data structure)
            var msFrameAddr : [u16 ; N_ENTITIES];

            // Counter value until the next animation frame.
            // Data format depends on the animation's process function.
            var msAnimationCounter : [u16 ; N_ENTITIES];



            var _shadowSizeAndBlank : [ _u8pair ; N_ENTITIES];
                // The size of the shadow underneath the entity
                var shadowSize @ &_shadowSizeAndBlank[0].first : [ metasprites.ShadowSize ; BA_SIZE ];


            // Signed 16 bit X velocity
            var xVelocity : [ u16 ; N_ENTITIES ];
                var xVelocity_sx @ &<:xVelocity[0] : [u8 ; BA_SIZE];
                var xVelocity_px @ &>:xVelocity[0] : [u8 ; BA_SIZE];

            // Signed 16 bit Y velocity
            var yVelocity : [ u16 ; N_ENTITIES ];
                var yVelocity_sx @ &<:yVelocity[0] : [u8 ; BA_SIZE];
                var yVelocity_px @ &>:yVelocity[0] : [u8 ; BA_SIZE];


            var tileHitbox : [ _u8pair ; N_ENTITIES ];
                var tileHitbox_halfWidth  @ &tileHitbox[0].first  : [u8 ; BA_SIZE];
                var tileHitbox_halfHeight @ &tileHitbox[0].second : [u8 ; BA_SIZE];



            var _movementStateAndIframeCounter : [ _u8pair ; N_ENTITIES ];

                // Updated by `metatiles.move_entity_and_collision_test` or `entities.base.process_collisions`
                // (bitfield of `entities.MovementState`)
                var movementState @ &_movementStateAndIframeCounter[0].first : [u8 ; BA_SIZE];

                // Updated by `base.process_collisions`
                // Invincibility frames counter
                var iframeCounter @ &_movementStateAndIframeCounter[0].second : [u8 ; BA_SIZE];


            var _healthAndAttackPower : [ _u8pair ; N_ENTITIES ];

                // Entity health
                var health @ &_healthAndAttackPower[0].first : [u8 ; BA_SIZE];

                // Attack Power stat
                var attackPower @ &_healthAndAttackPower[0].second : [u8 ; BA_SIZE];


            // Vision parameters
            // (two bytes, depends on the vision system used)
            var _visionAB : [ _u8pair ; N_ENTITIES ];
                var visionA @ &_visionAB[0].first : [u8 ; BA_SIZE];
                var visionB @ &_visionAB[0].second : [u8 ; BA_SIZE];


            // ::TODO should I add a third vision variable?::
            // ::: Currently small end of vision_cone is constant::


            // Variables used to store the entity's state between `process_function` calls
            //
            // NOTE: if I add more states here then I need to clear them in `spawn_entity`
            var state_0 : [ u16 ; N_ENTITIES ];
            var state_1 : [ u16 ; N_ENTITIES ];
            var state_2 : [ u16 ; N_ENTITIES ];
            var state_3 : [ u16 ; N_ENTITIES ];
            var state_4 : [ u16 ; N_ENTITIES ];
            var state_5 : [ u16 ; N_ENTITIES ];
            var state_6 : [ u16 ; N_ENTITIES ];
            var state_7 : [ u16 ; N_ENTITIES ];


            // Split state variables into low/high pairs (to easily allocate a byte variable)
                var state_0_l @ &<:state_0[0] : [u8 ; BA_SIZE];
                var state_0_h @ &>:state_0[0] : [u8 ; BA_SIZE];

                var state_1_l @ &<:state_1[0] : [u8 ; BA_SIZE];
                var state_1_h @ &>:state_1[0] : [u8 ; BA_SIZE];

                var state_2_l @ &<:state_2[0] : [u8 ; BA_SIZE];
                var state_2_h @ &>:state_2[0] : [u8 ; BA_SIZE];

                var state_3_l @ &<:state_3[0] : [u8 ; BA_SIZE];
                var state_3_h @ &>:state_3[0] : [u8 ; BA_SIZE];
        }
    }


    in wram7e_roomstate {
        // Mapping of active and unused entities (including player).
        //
        // indexes 0 to `numberOfActiveEntities - 1` (inclusive) are active entityIds.
        // indexes `numberOfActiveEntities` to `ACTIVE_ENTITIES_TABLE__LAST_POS` (inclusive) are unused entities.
        //
        // (list of SoA indexes)
        var activeEntitiesTable : [u8 ; N_ENTITIES];


        // The number of active entities.
        //
        // This variable is used as the mid-point separating active and unused entities in `activeEntitiesTable`.
        //
        // This variable is set to 1 if only the player entity is active.
        // This variable is set to `ACTIVE_ENTITIES_TABLE__LAST_POS` when no more entities can be created.
        //
        // This variable MUST NEVER BE zero.
        //
        // (byte counter)
        var numberOfActiveEntities : u8;


        let ACTIVE_ENTITIES_TABLE__LAST_POS = sizeof(typeof(activeEntitiesTable)) - 1;
    }
}


