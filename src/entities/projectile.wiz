// Copyright (c) 2022, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.

import "../memmap";

import "../entity_api";
import "_base";

import "gen/enums";
import "../../gen/entities";


namespace entities {
namespace projectile {


let SPEED = 0x0280;


let N_FRAMES_IN_WALL = 40;
let N_FRAMES_IN_PLAYER = 10;
let N_FRAMES_IN_SWORD  = 10;


in wram7e {

// If non-zero then the projectile is inactive and will despawn when timer reaches 0.
var SoA_despawnTimer : [ u8 ; SoA.BA_SIZE] in SoA.var_0_l;

}



in code {


// Entity process routine.
//
// Called when the entity is spawned
//
// DB = 0x7e
#[mem8, idx8]
func init(entityId : u8 in y, parameter : u8 in x) {

    mem16();
    #[mem16] {
        // Set starting velocity depending on `parameter`

        if x == init_parameter.up as u8 {
            SoA.yVelocity[unaligned y] = aa = -SPEED as u16;
        }
        else if x == init_parameter.down as u8 {
            SoA.yVelocity[unaligned y] = aa = SPEED;
        }
        else if x == init_parameter.left as u8 {
            SoA.xVelocity[unaligned y] = aa = -SPEED as u16;
        }
        else if x == init_parameter.right as u8 {
            SoA.xVelocity[unaligned y] = aa = SPEED;
        }
    }
    mem8();

    ^return set_ms_animation_x(y, x);
}



// Entity process routine.
//
// Called once per frame.
//
// DB = 0x7e
#[mem8, idx8]
func process(entityId : u8 in y) {

    a = SoA_despawnTimer[y];
    if !zero {
        a--;
        SoA_despawnTimer[y] = a;

        if zero {
            SoA.health[y] = a;
        }

        return;
    }


    base.process_collisions__projectile(y);


    if collisionState $ CollisionState.ANY_PLAYER_WEAPON_BIT {
        // ::TODO animate projectile's fall to ground ::
        SoA.zPos[y] = a = 0;
        SoA_despawnTimer[y] = a = N_FRAMES_IN_SWORD;

        ^return queue_sound_effect(sound_effects.sword_hit_bolt);
    }
    else if collisionState $ CollisionState.PLAYER_HURTBOX_BIT {
        base.hurt_player__collision(y);

        SoA_despawnTimer[y] = a = N_FRAMES_IN_PLAYER;
    }
    else {
        a = SoA.movementState[y];
        if !zero {
            SoA_despawnTimer[y] = a = N_FRAMES_IN_WALL;

            ^return queue_sound_effect(sound_effects.bolt_hits_wall);
        }
    }
}


}

}
}

