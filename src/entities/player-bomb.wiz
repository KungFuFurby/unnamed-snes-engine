// Copyright (c) 2021, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.

import "../memmap";

import "_variables";
import "_base";
import "_common";
import "smoke-particles";
import "../player";
import "../metasprites";

import "../../gen/entities";
import "../../gen/ms-drawing-functions";


namespace entities {
namespace player_bomb {

// ::TODO adjust:;
let BOMB_ATTACK_POWER = 6;

let BOMB_EXPLOSION_DISTANCE = 48;



let DROP_ACTIVE_BOMB_PARAMETER = 123;

let PICKUP_DISTANCE = 9;

let BOMB_DROP_HEIGHT = 14;

let EXPLOSION_TIMER = 80;



let BOMB_RESPAWN_TIMER = EXPLOSION_TIMER + 120;



in zeropage {
    // X-Position of an optional player bomb explosion.
    //
    // If this variable is zero.  There is no explosion.
    //
    // This variable is set/cleared at the start of every frame to ensure all entities can react
    // to the explosion (and entities react to the explosion exactly once).
    var explosion_xPos : u8;

    // The y-position of the explosion.
    // NOTE: This variable is only valid if `explosion_xPos` is non-zero.
    var explosion_yPos : u8;
}

in wram7e {
    // The value to load into `explosion_xPos` on the next frame.
    // Reset to 0 at the start of the new frame.
    //
    // By delaying the `explosion_xPos` write until the start of the next frame we ensure
    // all entities can read the explosion variables without any complicated logic.
    var explosion_xPos_pending : u8;
}


enum State : u8 {
    ON_GROUND   = 0,
    INVISIBLE   = 2,
    FALLING     = 4,
    ACTIVE      = 6,
};


in wram7e_roomstate {

var SoA_state            : [ State     ; SoA.BA_SIZE ] in SoA.state_0_l;

var SoA_timer            : [ u8        ; SoA.BA_SIZE ] in SoA.state_0_h;

}


in code {


// DB = 0x7e
#[mem8, idx8]
func init(entityId : u8 in y, parameter : u8 in x) {
    // Do not spawn a bomb on the ground if the player is holding a bomb.
    a = player.state as u8;
    if a == player.State.HOLDING_BOMB as u8 {
        if x == DROP_ACTIVE_BOMB_PARAMETER {
            // This bomb was spawned by the player.  It is an active bomb.
            set_state__active__inline(y);
        }
        else {
            set_state__invisible(y);
        }
    }
}



// DB = 0x7e
#[mem8, idx8]
func process(entityId : u8 in y) {
    x = SoA_state[y] as u8;
    return process__state_functions[unaligned x](y);
}


const process__state_functions = [
    process__on_ground,
    process__invisible,
    process__falling,
    process__active,
];



// On Ground state
// ===============


// KEEP: Y
//
// DB = 0x7e
#[mem8, idx8]
inline func set_state__on_ground__inline(entityid : u8 in y) {
    a = State.ON_GROUND as u8;
    SoA_state[y] = a as State;
}


// DB = 0x7e
#[mem8, idx8]
func process__on_ground(entityId : u8 in y) {
    a = player.state as u8;
    if a == player.State.WALKING as u8 {
        a = entities.base.manhattan_distance_to_player(y);

        if a < PICKUP_DISTANCE {
            set_state__invisible(y);

            player.pickup_bomb__inline(y);
        }
    }
}



// Invisible state
// ===============


// KEEP: Y
//
// DB = 0x7e
#[mem8, idx8]
func set_state__invisible(entityid : u8 in y) {
    a = State.INVISIBLE as u8;
    SoA_state[y] = a as State;

    // Do not draw entity's MetaSprite.
    //
    // Setting `ms_draw_function` to null.
    // The previous method (zPos = 255) created a glitched bomb sprite in the middle of a scroll-up room transition.
    mem16();
    #[mem16] {
        (&SoA.ms_draw_function as *u16)[unaligned y] = aa = &metasprites.drawing_functions.null_function as u16;
    }
    mem8();

    // A is non-zero
    SoA_timer[y] = a;

    x = y;
    SoA.shadowSize[x] = metasprites.ShadowSize.NONE;
}



// KEEP: Y
//
// DB = 0x7e
#[mem8, idx8]
func process__invisible(entityId : u8 in y) {
    a = player.state as u8;
    if a == player.State.HOLDING_BOMB as u8 {
        SoA_timer[y] = a = BOMB_RESPAWN_TIMER;
        return;
    }

    x = y;
    SoA_timer[x]--;
    goto set_state__falling if zero;
}



// Falling state
// =============


// KEEP: Y
//
// DB = 0x7e
#[mem8, idx8]
func set_state__falling(entityId : u8 in y) {
    a = State.FALLING as u8;
    SoA_state[y] = a as State;

    SoA.zPos[y] = a = SoA.yPos_px[y] + 8;

    // Make the entity visible again.
    mem16();
    #[mem16] {
        (&SoA.ms_draw_function as *u16)[unaligned y] = aa = &metasprites.drawing_functions.square_single16 as u16;
    }
    mem8();

    a = metasprites.ShadowSize.SMALL as u8;
    SoA.shadowSize[y] = a as metasprites.ShadowSize;
}


// KEEP: Y
//
// DB = 0x7e
#[mem8, idx8]
func process__falling(entityId : u8 in y) {
    a = SoA.zPos[y];
    if zero {
        set_state__on_ground__inline(y);
        return;
    }

    a--;
    if !zero {
        a--;
    }
    SoA.zPos[y] = a;

    if a < 16 {
        a = metasprites.ShadowSize.MEDIUM as u8;
        SoA.shadowSize[y] = a as metasprites.ShadowSize;
    }
}



// Active Bomb state
// =================


// KEEP: Y
//
// DB = 0x7e
#[mem8, idx8]
inline func set_state__active__inline(entityid : u8 in y) {
    a = State.ACTIVE as u8;
    SoA_state[y] = a as State;

    SoA.zPos[y] = a = BOMB_DROP_HEIGHT;

    SoA_timer[y] = a = EXPLOSION_TIMER;

    entities.set_ms_animation(y, ms_animations.active);
}



// DB = 0x7e
#[mem8, idx8]
func process__active(entityId : u8 in y)
{
    // Drop the bomb.
    a = SoA.zPos[y];
    if !zero {
        a--;
        a--;
        SoA.zPos[y] = a;
    }

    x = y;
    SoA_timer[x]--;
    if zero {
        __set_explosion_position__inline(y);

        ^return entities.smoke_particles.change_to_smoke_entity(y, smoke_particles.init_parameter.explosion as u8);
    }
}



// Explosion handling code
// =======================


// Update explosion position variables.
//
// This function MUST BE called once per frame at the start of the gameloop.
//
// DB = 0x7e
#[mem8, idx8]
inline func prepare_explosion_variables__inline() {
    explosion_xPos = a = explosion_xPos_pending;

    // explosion_yPos is set by `__set_explosion_position__inline()`

    // Reset the next frame's `explosion_xPos` value to zero (no-explosion)
    explosion_xPos_pending = 0;
}


// Set the next frame's bomb explosion position.
//
// ASSUMES: It is not possible to explode two player bombs on two consecutive frames.
//
// KEEP: Y
//
// DB = 0x7e
#[mem8, idx8]
inline func __set_explosion_position__inline(entityId : u8 in y) {
    a = SoA.xPos_px[y];
    if zero {
        // If xPos is 0, there is no explosion.
        // Ensure entities will react to the explosion.
        a++;
    }
    explosion_xPos_pending = a;

    explosion_yPos = a = SoA.yPos_px[y];
}


}
}

}

