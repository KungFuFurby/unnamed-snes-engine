// Copyright (c) 2022, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.

import "../memmap";

import "_variables";
import "player";
import "projectile";

import "../common/math";
import "../../wiz/common/snes/snes";

import "../../gen/entities";


namespace entities {
namespace projectile_angled {


// NOTE: If this value is changed, then you should also change the speed multiplier
//       in `__init__calc_vertical_velocity` and `__init__calc_horizontal_velocity`.
let SPEED = 0x0280;

let MAX_ALT_AXIS_SPEED = 0x00f0;


in code {


// Reuse process routine from projectile entity.
let process = entities.projectile.process;



// Entity process routine.
//
// Called when the entity is spawned
//
// DB = 0x7e
#[mem8, idx8]
func init(entityId : u8 in x, parameter : u8 in y) {

    SoA.metaSpriteFrame[unaligned x] = a = y;

    mem16();
    #[mem16] {
        // Set starting velocity depending on `parameter`

        if y == init_parameter.up as u8 {
            SoA.yVelocity[unaligned x] = aa = -SPEED as u16;
            return __init__calc_horizontal_velocity(x);
        }
        else if y == init_parameter.down as u8 {
            SoA.yVelocity[unaligned x] = aa = SPEED;
            return __init__calc_horizontal_velocity(x);
        }
        else if y == init_parameter.left as u8 {
            SoA.xVelocity[unaligned x] = aa = -SPEED as u16;
            ^return __init__calc_vertical_velocity(x);
        }
        else if y == init_parameter.right as u8 {
            SoA.xVelocity[unaligned x] = aa = SPEED;
            ^return __init__calc_vertical_velocity(x);
        }
    }
    mem8();
}



// Calculate (and set) the horizontal velocity of the bolt.
//
// DB = 0x7e
//
// MESSY CODE WARNING: Code starts with mem16 and returns with mem8.
#[idx8]
func __init__calc_horizontal_velocity(entityId : u8 in x) {

    // xVelocity = (signed (bolt_xPos - player_xPos) / unsigned abs(bolt_yPos - player_yPos)) * 2

    #[mem16] {
        aa = SoA.xPos_u16[unaligned x] - *(&player.xPos as *u16);
        if !carry {
            aa = negate16(aa);
        }
        *(far &snes.divider.left_hl) = aa;

        mem8();

        #[mem8] {
            a = SoA.yPos_px[unaligned x] - player.yPos.px;
            if !carry {
                a = negate8(a);
            }
            *(far &snes.divider.right) = a;

            // Must wait 16 cycles before reading result.
            // Comparison used to determine sign of velocity and waste CPU cycles.
            nop();                          // 2

            a = SoA.xPos_px[unaligned x];   // 4
            if a < player.xPos.px {         // 3 + 2
                mem16();                    // 3
                #[mem16] {                  // +2 from `lda.l RDDIV` below == 16 cycles
                    aa = *(far &snes.divider.div_result_hl);
                    aa <<<= 1;
                    if aa >= MAX_ALT_AXIS_SPEED + 1 {
                        aa = MAX_ALT_AXIS_SPEED;
                    }
                }
            }
            else {                          // 2 + 4 + 3 + 3
                mem16();                    // 3
                #[mem16] {                  // +1 from `lda.l RDDIV` below == 16 cycles
                    aa = *(far &snes.divider.div_result_hl);
                    aa <<<= 1;
                    if aa >= MAX_ALT_AXIS_SPEED + 1 {
                        aa = MAX_ALT_AXIS_SPEED;
                    }
                    aa = negate16(aa);
                }
            }
        }
    // mem16

        SoA.xVelocity[unaligned x] = aa;
    }

    // This function MUST return with mem8 and idx8
    mem8_idx8();
}



// Calculate (and set) the horizontal velocity of the bolt.
//
// DB = 0x7e
//
// MESSY CODE WARNING: Code starts with mem16 and returns with mem8.
#[idx8]
func __init__calc_vertical_velocity(entityId : u8 in x) {
    #[mem16] {
        aa = SoA.yPos_u16[unaligned x] - *(&player.yPos as *u16);
        if !carry {
            aa = negate16(aa);
        }
        *(far &snes.divider.left_hl) = aa;

        mem8();

        #[mem8] {
            a = SoA.xPos_px[unaligned x] - player.xPos.px;
            if !carry {
                a = negate8(a);
            }
            *(far &snes.divider.right) = a;

            // Must wait 16 cycles before reading result
            // Comparison used to determine sign of velocity and waste CPU cycles.
            nop();                          // 2

            a = SoA.yPos_px[unaligned x];   // 4
            if a < player.yPos.px {         // 3 + 2
                mem16();                    // 3
                #[mem16] {                  // +2 from `lda.l RDDIV` below == 16 cycles
                    aa = *(far &snes.divider.div_result_hl);
                    aa <<<= 1;
                    if aa >= MAX_ALT_AXIS_SPEED + 1 {
                        aa = MAX_ALT_AXIS_SPEED;
                    }
                }
            }
            else {                          // 2 + 4 + 3 + 3
                mem16();                    // 3
                #[mem16] {                  // +1 from `lda.l RDDIV` below == 16 cycles
                    aa = *(far &snes.divider.div_result_hl);
                    aa <<<= 1;
                    if aa >= MAX_ALT_AXIS_SPEED + 1 {
                        aa = MAX_ALT_AXIS_SPEED;
                    }
                    aa = negate16(aa);
                }
            }
        }
    // mem16

        SoA.yVelocity[unaligned x] = aa;
    }

    // This function MUST return with mem8 and idx8
    mem8_idx8();
}

}

}
}

