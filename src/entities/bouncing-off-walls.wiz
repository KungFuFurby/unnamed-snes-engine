// Copyright (c) 2021, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.

import "../memmap";

import "_variables";
import "_base";
import "../common/math";

import "../../gen/entities";


namespace entities {
namespace bouncing_off_walls {


// (animation frames)
let SoA_animationCounter = SoA.state_0_l;


// The speed of the entity after being struck by the player's sword.
// (index increment by 2 into `set_velocity_after_player_sword_collision` collisionSpeed parameter)
let SoA_hurtSpeed = SoA.state_0_h;



let INITIAL_SPEED     = 0x0120;

let FIRST_SWORD_SPEED = base.SwordCollisionSpeed.SLOW;
let MAX_SWORD_SPEED   = base.SwordCollisionSpeed.FAST_FAST_FAST;


let ANIMATION_DELAY = 4;
let ANIMATION_FRAME_MASK = 0x7;


in code {


// Entity process routine.
//
// Called when the entity is spawned
//
// DB = 0x7e
#[mem8, idx8]
func init(entityId : u8 in y, parameter : u8 in x) {
    mem16();
    #[mem16] {
        // Set starting velocity depending on `parameter`

        aa = 0;
        if x < init_parameter.up as u8 || x == init_parameter.down_right as u8 {
            aa = INITIAL_SPEED;
        }
        else if x >= init_parameter.up_left as u8 && x < init_parameter.down as u8 {
            aa = -INITIAL_SPEED as u16;
        }
        SoA.xVelocity[unaligned y] = aa;

        aa = 0;
        if x >= init_parameter.down_left as u8 {
            aa = INITIAL_SPEED;
        }
        else if x >= init_parameter.up_right as u8 && x < init_parameter.left as u8 {
            aa = -INITIAL_SPEED as u16;
        }
        SoA.yVelocity[unaligned y] = aa;
    }
    mem8();

    SoA_hurtSpeed[unaligned y] = a = FIRST_SWORD_SPEED - 2;

    SoA.metaSpriteFrame[unaligned y] = a = ms_frames.frame0;
}



// Entity process routine.
//
// Called once per frame.
//
// DB = 0x7e
#[mem8, idx8]
func process(entityId : u8 in y) : bool in carry {

    y = base.process_collisions(y);


    // React to colliding with player's weapon
    if collisionState $ CollisionState.PLAYER_WEAPON_BIT {
        collided_with_player_hitbox(y);
    }


    // React to colliding with player
    if collisionState $ CollisionState.PLAYER_HURTBOX_BIT {
        collided_with_player_hurtbox(y);
    }


    // Change velocity on a tile collision

    a = SoA.movementState[y];
    if a & MovementState.X_AXIS_COLLISION != 0 {
        mem16();
        #[mem16] {
            SoA.xVelocity[unaligned y] = aa = 0 - SoA.xVelocity[unaligned y];
        }
        mem8();
    }

    a = SoA.movementState[y];
    if a & MovementState.Y_AXIS_COLLISION != 0 {
        mem16();
        #[mem16] {
            SoA.yVelocity[unaligned y] = aa = 0 - SoA.yVelocity[unaligned y];
        }
        mem8();
    }


    // Process animation
    a = SoA_animationCounter[y];
    if !zero {
        a--;
        SoA_animationCounter[y] = a;
    }
    else {
        SoA_animationCounter[y] = a = ANIMATION_DELAY;

        // Increment animation Frame
        a = SoA.metaSpriteFrame[y];
        a++;
        SoA.metaSpriteFrame[y] = a = a & ANIMATION_FRAME_MASK;
    }


    return true;
}



// Reflect the entity when it collides with the player's sword.
//
// The collision centre is used to determine the new direction of the entity.
//
// ASSUMES: entity collided with sword hitbox and `collisionCentre` is valid.
//
// KEEP: Y
//
// DB = 0x7e
#[mem8, idx8]
inline func collided_with_player_hitbox(entityId : u8 in y) {

    x = SoA_hurtSpeed[y];
    if x < MAX_SWORD_SPEED {
        x++;
        x++;
        SoA_hurtSpeed[y] = a = x;
    }

    // ::SHOULDO adjust velocity based on previous velocity and collisionCentre::
    base.take_damage_from_player_sword_with_knockback(y, x);
}



// Bounce back when colliding with player body.
//
// KEEP: Y
//
// DB = 0x
inline func collided_with_player_hurtbox(entityId : u8 in y) {
    mem16();
    #[mem16] {
        SoA.xVelocity[unaligned y] = aa = 0 - SoA.xVelocity[unaligned y];
        SoA.yVelocity[unaligned y] = aa = 0 - SoA.yVelocity[unaligned y];
    }
    mem8();
}

}

}
}

