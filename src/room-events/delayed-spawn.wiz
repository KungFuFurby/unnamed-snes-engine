// Copyright (c) 2022, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.

import "../memmap";

import "../room-events-api";
import "_common";

import "gen/enums";
import "gen/room-events";
import "gen/entities";


namespace room_events {
namespace delayed_spawn {

in wram7e_roomstate {

var spawnTimer   : u8 in <:var_0;
var spawnIndex   : u8 in <:var_1;

}


in code {

// DB = 0x7e
#[mem8, idx8]
func init() {
    spawnTimer = a = parameter__first_delay;
    // spawnIndex is cleared on room load.
}


// DB = 0x7e
#[mem8, idx8]
func process() {

    // Wait until spawn timer has elapsed
    a = spawnTimer;
    if !zero {
        a--;
        spawnTimer = a;
        if zero {
            queue_sound_effect(sound_effects.spawn_enemy_with_smoke);
        }
        return;
    }

    // spawn timer is 0

    x = spawnIndex;
    if x < N_ENTITIES_IN_ROOM_DATA {
        spawn_enemy_with_smoke(spawnIndex, entities.smoke_particles.init_parameter.ground);

        spawnIndex++;

        // Restart spawn timer
        spawnTimer = a = parameter__entity_delay;
    }
}


}

}
}

