// Copyright (c) 2022, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.

import "../memmap";

import "_common";
import "../room";
import "../entities/_common";

import "../audio";
import "../../gen/resources";

import "gen/room-events";
import "gen/entities";


namespace room_events {
namespace delayed_spawn {

in wram7e_roomstate {

var spawnTimer   : u8 in <:state_0;
var spawnIndex   : u8 in <:state_1;

}


in code {

// DB = 0x7e
#[mem8, idx8]
func init() {
    spawnTimer = a = parameter__first_delay;
    // spawnIndex is cleared on room load.
}


// DB = 0x7e
#[mem8, idx8]
func process() {

    // Wait until spawn timer has elapsed
    a = spawnTimer;
    if !zero {
        a--;
        spawnTimer = a;
        if zero {
            audio.queue_sound_effect(sound_effects.spawn_enemy_with_smoke);
        }
        return;
    }

    // spawn timer is 0

    x = spawnIndex;
    if x < N_ENTITIES_IN_ROOM_DATA {
        // Spawn smoke particle
        entities.spawn_entity(a = room.entity_xPos[x],
                              a = room.entity_yPos[x] - 1,
                              a = entities.EntityTypes.smoke_particles as u8,
                              y = entities.smoke_particles.init_parameter.ground as u8);

        x = spawnIndex;
        entities.spawn_entity(a = room.entity_xPos[x],
                              a = room.entity_yPos[x],
                              a = room.entity_type[x],
                              y = room.entity_parameter[x]);
        spawnIndex++;

        // Restart spawn timer
        spawnTimer = a = parameter__entity_delay;
    }
}


}

}
}

