// Copyright (c) 2022, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.

import "../memmap";

import "_common";
import "../room";
import "../entities/_common";

import "gen/room-events";
import "gen/entities";


namespace room_events {
namespace repeatedly_spawn_enemies {

in wram7e_roomstate {

var spawnTimer      : u8 in <:state_0;

var spawnIndex      : u8 in <:state_1;

// one past the end room enemy index
// (SHOULD BE <= N_ENTITIES_IN_ROOM_DATA)
var spawnIndexEnd   : u8 in <:state_2;

}


in code {

// DB = 0x7e
#[mem8, idx8]
func init() {
    spawnTimer = a = parameter__delay;

    x = parameter__lastEnemyIndex;
    x++;
    spawnIndexEnd = x;
    spawnIndex = x;

    ^return spawn_room_entities();
}



// DB = 0x7e
#[mem8, idx8]
func process() {
    // Wait until the timer has elapsed
    spawnTimer--;
    if zero {
        spawnTimer = a = parameter__delay;

        a = entities.get_enemy_count_a();
        if a < parameter__maxEnemies {

            x = spawnIndex;
            x++;
            if x >= spawnIndexEnd {
                x = parameter__firstEnemyIndex;
            }
            spawnIndex = x;

            if x < N_ENTITIES_IN_ROOM_DATA {
                ^return spawn_room_enemy(x);
            }
        }
    }
}


}

}
}

