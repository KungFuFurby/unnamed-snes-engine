// Copyright (c) 2022, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.

import "../memmap";

import "../room-events-api";
import "_common";

import "../interactive-tiles";

import "gen/enums";
import "gen/room-events";


namespace room_events {
namespace locked_door {

// This allows me to read the state variable using the `bit` instruction.
enum State : u8{
    WAITING_FOR_KEY,
    UNLOCKING_DOOR,
    DOOR_UNLOCKED,
};

in wram7e_roomstate {
    var state : State in <:state_0;
}


in code {

// DB = 0x7e
#[mem8, idx8]
func init() {
    metatiles.interactive_tiles.locked_door.playerTouchedLockedDoor = 0;

    zero = is_gs_flag_clear(parameter__flag);
    if !zero {
        // The door has already been unlocked.
        // Change the map tiles to an unlocked door before the room transition starts.
        init__unlock_door(parameter__doorLocation);

        // Do not check door/key state in process()
        a = State.DOOR_UNLOCKED as u8;
        state = a as State;
    }

    // state has been reset to 0

    ^return spawn_all_room_entities();
}


// DB = 0x7e
#[mem8, idx8]
func process() {
    a = state as u8;
    if zero {
        // state == State.WAITING_FOR_KEY

        a = metatiles.interactive_tiles.locked_door.playerTouchedLockedDoor;
        if !zero {
            metatiles.interactive_tiles.locked_door.playerTouchedLockedDoor = 0;

            carry = test_and_decrement_key_count();
            if carry {
                // key was consumed, set flag and unlocked door
                set_gs_flag(parameter__flag);
                return _process__unlock_door();
            }
        }
    }
    else if a == State.UNLOCKING_DOOR as u8 {
        return _process__unlock_door();
    }
}


// DB = 0x7e
#[mem8, idx8]
func _process__unlock_door() {
    carry = unlock_door(parameter__doorLocation);
    if carry {
        // Door successfully unlocked.

        queue_sound_effect(sound_effects.door_open_with_key);

        a = State.DOOR_UNLOCKED as u8;
        state = a as State;
    }
    else {
        // Cannot unlock the door on this frame, try again on the next frame.
        a = State.DOOR_UNLOCKED as u8;
        state = a as State;
    }
}

}

}
}

