// Copyright (c) 2021, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.

import "memmap";

import "entities/_variables";
import "entities/_common";
import "entities/_base";

import "joypad";
import "metatiles";
import "metasprites";
import "common/math";

import "../gen/metasprites/common";
import "../gen/entities";
import "../gen/cosine-tables";


namespace player {


let ms_draw_function = ms_framesets.common.Player.drawFunction;
let ms_frame_table = ms_framesets.common.Player.frameTable;
let ms_animation_table = ms_framesets.common.Player.animationTable;



let _set_ms_animation = metasprites.set_player_animation;
let _set_ms_animation_if_changed = metasprites.set_player_animation_if_changed;
let _is_ms_animation_over = metasprites.is_player_animation_over;


let INITIAL_SWORD_ATTACK_POWER = 2;

let INITIAL_HEALTH = 16;


// How far the player can enter a doorway before the game prevents the player from
// leaving by pressing an off-axis direction (ie, pressing left in an up doorway).
let DOORWAY_LEAVE_DISTANCE = 14;

// Offset to add to the `altAxisTarget` when entering a door from the left or right.
let DOORWAY_X_DIRECTION_OFFSET = 4;



// (8:8 unsigned fixed point)
let WALK_VELOCITY = 0x0180;


// (8:8 unsigned fixed point)
let DOORWAY_VELOCITY               = 0x0180;
let DOORWAY_DIAGONAL_MAIN_VELOCITY = 0x0040;
let DOORWAY_DIAGONAL_ALT_VELOCITY  = 0x00D0;

// Ensures player cannot spam attack inside a doorway and remain unhurt.
// (8:8 unsigned fixed point)
let ATTACKING_IN_DOORWAY_VELOCITY  = 0x0110 / 12;


// Number of iframes to give player after rolling back a room transition.
let N_IFRAMES_AFTER_ROOM_TRANSITION_ROLLBACK = 40;

// Number of iframes to give player after the hurt push-back ends
// SHOULD BE < HURT_STATE_DURATION.
let N_IFRAMES_AFTER_HURT_PUSHBACK   = 3;


// Number of iframes after the player has been attacked
let N_IFRAMES_AFTER_ATTACKED = 30;


// ::TODO draw hurt animation ::

let WALKING_MS_ANIMATION_OFFSET     = 0;
let ATTACKING_MS_ANIMATION_OFFSET   = 4;
let HURT_MS_ANIMATION_OFFSET        = 8;



// Hardcoded player hurtbox offsets
let HURTBOX_LEFT_OFFSET = 3;
let HURTBOX_RIGHT_OFFSET = 3;
let HURTBOX_TOP_OFFSET = 2;
let HURTBOX_BOTTOM_OFFSET = 2;


// Hardcoded tile hitbox
//
// NOTE: These values must be <= 8
//
// To increase the limit, the `test_if_player_touches_a_solid_tile`, `move_entity_and_collision_test__bounded` and
// `move_entity_and_collision_test__unbounded` functions will need to be edited.
let TILE_HITBOX_HALF_WIDTH = 6;
let TILE_HITBOX_HALF_HEIGHT = 3;


// The direction the player is facing
enum FacingDirection : u8 {
    DOWN,
    UP,
    RIGHT,
    LEFT,
};

let FACING_DIRECTION_SHIFT = 3;



enum State : u8 {
    WALKING                 = 0,
    ATTACKING               = 2,
    HURT                    = 4,
    WALK_THROUGH_DOORWAY    = 6,
    ATTACKING_IN_DOORWAY    = 8,
};



in zeropage {
    // The player's hurtbox
    var playerHurtbox : entities.U8Aabb;

    // The player's hitbox
    var playerHitbox : entities.U8Aabb;
}


in wram7e {
    // The amount of health on a full HP
    //
    // MUST be a multiple of 4
    var maxHealth : u8;
}



let xPos = entities.SoA.xPos[0];
let yPos = entities.SoA.yPos[0];
let zPos = entities.SoA.zPos[0];

let previousXpos = entities.SoA.previousXpos[0];
let previousYpos = entities.SoA.previousYpos[0];

let xVelocity = entities.SoA.xVelocity[0];
let yVelocity = entities.SoA.yVelocity[0];

let tileHitbox_halfWidth = entities.SoA.tileHitbox_halfWidth[0];
let tileHitbox_halfHeight = entities.SoA.tileHitbox_halfHeight[0];

let shadowSize = entities.SoA.shadowSize[0];

let metaSpriteFrameTable = entities.SoA.metaSpriteFrameTable[0];

let movementState = entities.SoA.movementState[0];
let iframeCounter = entities.SoA.iframeCounter[0];

let health = entities.SoA.health[0];
let swordAttackPower = entities.SoA.attackPower[0];

let visionA = entities.SoA.visionA[0];
let visionB = entities.SoA.visionB[0];



let state                 = <:entities.SoA.state_0[0];
let facingDirection       = >:entities.SoA.state_0[0];





// CODE
// ====


in code {



// Initialize player.
//
// Only called once at the start of the game.
//
// DB = 0x7e
#[mem8, idx8]
inline func init() {

    a = metasprites.ShadowSize.MEDIUM as u8;
    shadowSize = a as metasprites.ShadowSize;

    xPos.px = a = 128;
    yPos.px = a = 112;

    tileHitbox_halfWidth = a = TILE_HITBOX_HALF_WIDTH;
    tileHitbox_halfHeight = a = TILE_HITBOX_HALF_HEIGHT;


    mem16();
    #[mem16] {
        xVelocity = 0;
        yVelocity = 0;
    }
    mem8();


    facingDirection = a = FacingDirection.DOWN as u8;

    a = INITIAL_HEALTH;
    health = a;
    maxHealth = a;

    swordAttackPower = a = INITIAL_SWORD_ATTACK_POWER;


    set_state__walking();
}



// Entity process routine.
//
// Called once per frame.
//
// REQUIRES: entities.currentEntityId = PLAYER_ENTITY_ID;
//
// DB = 0x7e
#[mem8, idx8]
inline func process() {

    x = state as u8;
    process__state_functions[unaligned x]();
}


const process__state_functions = [
    process__walking,
    process__attacking,
    process__hurt,
    process__walk_through_doorway,
    process__attacking_in_doorway,
];



// Called whenever an entity collides with the player's hitbox.
//
// PARAM: entityId - the entity that collided with `playerHitbox`.
//
// DB = 0x7e
#[mem8, idx8]
inline func hitbox_collided_with_entity__inline(enemyEntityId : u8 in y) {

    // ::TODO add a has-sword-particle flag to entity::

    entities.spawn_entity(a = entities.base.collisionCentre_x,
                          a = entities.base.collisionCentre_y,
                          a = entities.EntityTypes.sword_particles as u8,
                          y = 0);
}



// Set the player's velocity to zero
//
// DB = 0x7e
#[mem8, idx8]
func zero_velocity() {
    mem16();
    #[mem16] {
        xVelocity = 0;
        yVelocity = 0;
    }
    mem8();
}



// Move the player and process any tile collisions and interactive tiles.
//
// DB = 0x7e
#[mem8, idx8]
func move_player_with_tile_tests() {
    metatiles.move_entity_and_collision_test__unbounded(PLAYER_ENTITY_ID);
    metatiles.process_interactive_tiles__player();
}



// Add the player's velocity to the player's position (with bounds checking)
//
// NOTE: This function will not preform any collision checks or interactive tile tests.
//
// DB = 0x7e
#[mem8, idx8]
func add_velocity_to_positon_without_collsion_checks() {
    let MAX_Y_POS = DISPLAY_HEIGHT << 8;

    mem16();
    #[mem16] {
        aa = xVelocity;
        if negative {
            aa += entities.SoA.xPos_u16[PLAYER_ENTITY_ID];
            if !carry { aa = 0; }
        }
        else {
            aa += entities.SoA.xPos_u16[PLAYER_ENTITY_ID];
            if carry { aa = 0xff00; }
        }
        entities.SoA.xPos_u16[PLAYER_ENTITY_ID] = aa;


        aa = yVelocity;
        if negative {
            aa += entities.SoA.yPos_u16[PLAYER_ENTITY_ID];
            if !carry { aa = 0; }
        }
        else {
            aa += entities.SoA.yPos_u16[PLAYER_ENTITY_ID];
            if carry || aa >= MAX_Y_POS { aa = MAX_Y_POS; }
        }
        entities.SoA.yPos_u16[PLAYER_ENTITY_ID] = aa;
    }
    mem8_idx8();
}



// Enable invincibility frames (after rolling back a room transition)
//
// DB = 0x7e
#[mem8, idx8]
inline func set_iframes_after_room_transition_rollback() {
    iframeCounter = a = N_IFRAMES_AFTER_ROOM_TRANSITION_ROLLBACK;
}




// Collisions
// ==========


// Update player's hitbox and hurtbox
//
// DB = 0x7e
#[mem8, idx16]
inline func update_collision_boxes__inline() {
    xx = entities.SoA.msFrameAddr[PLAYER_ENTITY_ID];

    _update_player_hitbox(xx);
    _update_player_hurtbox(xx);
}



// Add the player's unsigned xPos to a signed i8 accumulator with clamping.
//
// ASSUMES: negative flag contains the MSB of A (the previous instruction is an `lda`).
//
// KEEP: xx & yy
//
// DB = 0x7e
#[mem8, idx16]
inline func __add_xPos_to_i8a_clamp(a : u8 in a, n : bool in negative) : u8 in a {
    if negative {
        a += xPos.px;
        return a if carry;
            a = 0;
    }
    else {
        a += xPos.px;
        return a if !carry;
            a = 0xff;
    }

    return a;
}


// Add the player's unsigned yPos to a signed i8 accumulator with clamping.
//
// ASSUMES: negative flag contains the MSB of A (the previous instruction is an `lda`).
//
// KEEP: xx & yy
//
// DB = 0x7e
#[mem8, idx16]
inline func __add_yPos_to_i8a_clamp(a : u8 in a, n : bool in negative) : u8 in a {
    if negative {
        a += yPos.px;
        return a if carry;
            a = 0;
    }
    else {
        a += yPos.px;
        return a if !carry;
            a = 0xff;
    }

    return a;
}



// Update player hitbox
//
// Called once per frame
//
// KEEP: xx
//
// DB = 0x7e
#[mem8, idx16]
inline func _update_player_hitbox(msFrameAddr : u16 in xx) {

    // Add i8 signed offset to player's u8 unsigned position (with clamping)

    a = metasprites.MsDataFormat.hitbox_left[xx] as u8;
    if negative {
        // Putting the no-hitbox test here as it is faster.
        if a == metasprites.MsDataFormat.NO_AABB_VALUE {
            // MS frame has no hitbox
            a = 0xff;
            playerHitbox.top = a;
            playerHitbox.bottom = 0;
            playerHitbox.left = a;
            playerHitbox.right = 0;
            return;
        }

        a += xPos.px;
        if !carry {
            a = 0;
        }
    }
    else {
        a += xPos.px;
        if carry {
            a = 0xff;
        }
    }
    playerHitbox.left = a;


    a = metasprites.MsDataFormat.hitbox_right[xx] as u8;
    __add_xPos_to_i8a_clamp(a, negative);
    playerHitbox.right = a;


    a = metasprites.MsDataFormat.hitbox_top[xx] as u8;
    __add_yPos_to_i8a_clamp(a, negative);
    playerHitbox.top = a;


    a = metasprites.MsDataFormat.hitbox_bottom[xx] as u8;
    __add_yPos_to_i8a_clamp(a, negative);
    playerHitbox.bottom = a;
}



// Update player hurtbox
//
// Called once per frame
//
// DB = 0x7e
#[mem8, idx16]
inline func _update_player_hurtbox(msFrameAddr : u16 in xx) {


    a = iframeCounter;
    if !zero {
        a--;
        iframeCounter = a;

        // player has no hurtbox
        a = 0xff;
        playerHurtbox.top = a;
        playerHurtbox.bottom = 0;
        playerHurtbox.left = a;
        playerHurtbox.right = 0;
    }
    else {
        // Add i8 signed offset to player's u8 unsigned position (with clamping)

        a = metasprites.MsDataFormat.hurtbox_left[xx] as u8;
        if negative {
            // Putting the no-hurtbox test here as it is faster.
            if a == metasprites.MsDataFormat.NO_AABB_VALUE {
                // MS frame has no hurtbox
                a = 0xff;
                playerHurtbox.top = a;
                playerHurtbox.bottom = 0;
                playerHurtbox.left = a;
                playerHurtbox.right = 0;
                return;
            }

            a += xPos.px;
            if !carry {
                a = 0;
            }
        }
        else {
            a += xPos.px;
            if carry {
                a = 0xff;
            }
        }
        playerHurtbox.left = a;


        a = metasprites.MsDataFormat.hurtbox_right[xx] as u8;
        __add_xPos_to_i8a_clamp(a, negative);
        playerHurtbox.right = a;


        a = metasprites.MsDataFormat.hurtbox_top[xx] as u8;
        __add_yPos_to_i8a_clamp(a, negative);
        playerHurtbox.top = a;

        a = metasprites.MsDataFormat.hurtbox_bottom[xx] as u8;
        __add_yPos_to_i8a_clamp(a, negative);
        playerHurtbox.bottom = a;
    }
}




// PROCESS MOVEMENT
// ================


// Process player direction and update velocity.
//
// DB = 0x7e
#[mem8, idx8]
func process_dpad_update_velocity() {

    a = joypad.current_h;

    if a & joypad.JOYH.UP != 0 {
        if a & joypad.JOYH.LEFT != 0 {
            ^return process_direction_north_west();
        }
        if a & joypad.JOYH.RIGHT != 0 {
            ^return process_direction_north_east();
        }
        ^return process_direction_north();
    }

    if a & joypad.JOYH.DOWN != 0 {
        if a & joypad.JOYH.LEFT != 0 {
            ^return process_direction_south_west();
        }
        if a & joypad.JOYH.RIGHT != 0{
            ^return process_direction_south_east();
        }
        ^return process_direction_south();
    }

    if a & joypad.JOYH.LEFT != 0 {
        ^return process_direction_west();
    }

    if a & joypad.JOYH.RIGHT != 0{
        ^return process_direction_east();
    }

    return process_direction_stationary();
}



// DB = 0x7e
#[mem8, idx8]
func process_direction_stationary() {
    // Do not change facingDirection

    zero_x_velocity();
    zero_y_velocity();
}



// DB = 0x7e
#[mem8, idx8]
func process_direction_north() {
    facingDirection = a = FacingDirection.UP as u8;

    zero_x_velocity();
    decrement_y_velocity();
}



// DB = 0x7e
#[mem8, idx8]
func process_direction_north_east() {
    a = facingDirection;
    if a == FacingDirection.LEFT as u8 {
        facingDirection = a = FacingDirection.UP as u8;
    }
    if a == FacingDirection.DOWN as u8 {
        facingDirection = a = FacingDirection.RIGHT as u8;
    }

    increment_x_velocity();
    decrement_y_velocity();
}



// DB = 0x7e
#[mem8, idx8]
func process_direction_east() {
    facingDirection = a = FacingDirection.RIGHT as u8;

    increment_x_velocity();
    zero_y_velocity();
}



// DB = 0x7e
#[mem8, idx8]
func process_direction_south_east() {
    a = facingDirection;
    if a == FacingDirection.LEFT as u8 {
        facingDirection = a = FacingDirection.DOWN as u8;
    }
    if a == FacingDirection.UP as u8 {
        facingDirection = a = FacingDirection.RIGHT as u8;
    }

    increment_x_velocity();
    increment_y_velocity();
}



// DB = 0x7e
#[mem8, idx8]
func process_direction_south() {
    facingDirection = a = FacingDirection.DOWN as u8;

    zero_x_velocity();
    increment_y_velocity();
}



// DB = 0x7e
#[mem8, idx8]
func process_direction_south_west() {
    a = facingDirection;
    if a == FacingDirection.RIGHT as u8 {
        facingDirection = a = FacingDirection.DOWN as u8;
    }
    if a == FacingDirection.UP as u8 {
        facingDirection = a = FacingDirection.LEFT as u8;
    }

    decrement_x_velocity();
    increment_y_velocity();
}



// DB = 0x7e
#[mem8, idx8]
func process_direction_west() {
    facingDirection = a = FacingDirection.LEFT as u8;

    decrement_x_velocity();
    zero_y_velocity();
}



// DB = 0x7e
#[mem8, idx8]
func process_direction_north_west() {
    a = facingDirection;
    if a == FacingDirection.RIGHT as u8 {
        facingDirection = a = FacingDirection.UP as u8;
    }
    if a == FacingDirection.DOWN as u8 {
        facingDirection = a = FacingDirection.LEFT as u8;
    }

    decrement_x_velocity();
    decrement_y_velocity();
}



// DB = 0x7e
#[mem8, idx8]
func decrement_x_velocity() {

    // ::TODO add acceleration and friction::
    <:xVelocity = a = <:-WALK_VELOCITY;
    >:xVelocity = a = >:-WALK_VELOCITY;
}



// DB = 0x7e
#[mem8, idx8]
func zero_x_velocity() {

    // ::TODO add friction::
    <:xVelocity = 0;
    >:xVelocity = 0;
}



// DB = 0x7e
#[mem8, idx8]
func increment_x_velocity() {

    // ::TODO add acceleration and friction::
    <:xVelocity = a = <:WALK_VELOCITY;
    >:xVelocity = a = >:WALK_VELOCITY;
}



// DB = 0x7e
#[mem8, idx8]
func decrement_y_velocity() {

    // ::TODO add acceleration and friction::
    <:yVelocity = a = <:-WALK_VELOCITY;
    >:yVelocity = a = >:-WALK_VELOCITY;
}



// DB = 0x7e
#[mem8, idx8]
func zero_y_velocity() {

    // ::TODO add friction::
    <:yVelocity = 0;
    >:yVelocity = 0;
}



// DB = 0x7e
#[mem8, idx8]
func increment_y_velocity() {

    // ::TODO add acceleration and friction::
    <:yVelocity = a = <:WALK_VELOCITY;
    >:yVelocity = a = >:WALK_VELOCITY;
}



// WALKING STATE
// =============


// DB = 0x7e
#[mem8, idx8]
func set_state__walking() {
    state = State.WALKING as u8;
}



// DB = 0x7e
#[mem8, idx8]
func process__walking() {
    process_dpad_update_velocity();

    move_player_with_tile_tests();

    a = joypad.input_buffers.attack;
    if !zero {
        set_state__attacking();
    }
    else {
        // ASSUMES WALKING_MS_ANIMATION_OFFSET == 0
        ^return _set_ms_animation_if_changed(facingDirection);
    }
}



// ATTACKING STATE
// ===============


// DB = 0x7e
#[mem8, idx8]
func set_state__attacking() {
    state = a = State.ATTACKING as u8;

    // Stand still while attacking
    <:xVelocity = 0;
    >:xVelocity = 0;
    <:yVelocity = 0;
    >:yVelocity = 0;

    ^return _set_ms_animation(facingDirection | ATTACKING_MS_ANIMATION_OFFSET);
}



// DB = 0x7e
#[mem8, idx8]
func process__attacking() {

    move_player_with_tile_tests();

    zero = _is_ms_animation_over();
    if zero {
        return set_state__walking();
    }
}



// HURT STATE
// ==========


// DB = 0x7e
#[mem8, idx8]
inline func set_state_hurt__enemy_collision__inline(enemyEntityId : u8 in y) {
    a = state as u8;
    if a != State.HURT as u8 {
        _set_state__hurt__enemy_collision(y);
    }
}



// DB = 0x7e
#[mem8, idx8]
func _set_state__hurt__enemy_collision(enemyEntityId : u8 in y) {
    state = a = State.HURT as u8;

    x = calc_angle_32x2(a = entities.SoA.previousXpos[unaligned y],
                        a = entities.SoA.previousYpos[unaligned y],
                        player.previousXpos,
                        player.previousYpos);

    mem16();
    #[mem16] {
        xVelocity = aa = CosineTables.PlayerHurtVelocity[unaligned x] as u16;

        #[idx16] {
            xx = aa = (xx + CosineTables.SINE_OFFSET) & CosineTables.TABLE_MASK;
        }

        yVelocity = aa = CosineTables.PlayerHurtVelocity[unaligned x] as u16;
    }
    mem8();


    iframeCounter = a = N_IFRAMES_AFTER_ATTACKED;

    ^return _set_ms_animation(facingDirection | HURT_MS_ANIMATION_OFFSET);
}



// DB = 0x7e
#[mem8, idx8]
func process__hurt() {

    move_player_with_tile_tests();

    // Frozen until animation ends
    zero = _is_ms_animation_over();
    if zero {
        ^return set_state__walking();
    }
}



// WALK_THROUGH_DOORWAY state
// ==========================


in wram7e_roomstate {
    // The direction of the player when they entered the door
    var walkThroughDoorway_direction : metatiles.CollisionDirection;

    // The position (on the main axis) of the player at the start of the WALK_THROUGH_DOORWAY state.
    var walkThroughDoorway_mainAxisStart : u8;

    // The target position (on the alt axis) the player needs to be to enter to door.
    var walkThroughDoorway_altAxisTarget : u8;
}



// Called when the player is touching a solid tile.
//
// DB = 0x7e
#[mem8, idx8]
inline func set_state__walk_through_doorway__inline(direction : metatiles.CollisionDirection in x, mainAxisStart : u8 in y, altAxisTarget : u8 in a) {
    walkThroughDoorway_direction = direction;
    walkThroughDoorway_mainAxisStart = mainAxisStart;
    walkThroughDoorway_altAxisTarget = altAxisTarget;

    state = a = State.WALK_THROUGH_DOORWAY as u8;
}



// Called after the player is attacking in a doorway
//
// DB = 0x7e
#[mem8, idx8]
inline func set_state__walk_through_doorway__after_attacking_in_doorway() {
    state = a = State.WALK_THROUGH_DOORWAY as u8;

    // ASSUMES WALKING_MS_ANIMATION_OFFSET == 0
    _set_ms_animation(facingDirection);
}



// DB = 0x7e
#[mem8, idx8]
func process__walk_through_doorway() {

let _mainAxisOffset = zpTmp_byte_0;

    idx16();
    #[idx16] {
        xx = 0;
        yy = 0;

        a = walkThroughDoorway_direction as u8;
        ^if a & metatiles.CollisionDirection_LEFT_RIGHT_BIT_TEST != 0 {
            // X axis doorway

            a = xPos.px - walkThroughDoorway_mainAxisStart;
            if !carry {
                a = negate8(a);
            }
            _mainAxisOffset = a;


            // Calculate Y axis velocity to reach `walkThroughDoorway_altAxisTarget`.
            a = yPos.px;
            if a < walkThroughDoorway_altAxisTarget {
                yy = DOORWAY_DIAGONAL_ALT_VELOCITY;
            }
            else if !zero {
                yy = -DOORWAY_DIAGONAL_ALT_VELOCITY as u16;
            }


            a = walkThroughDoorway_direction as u8;
            if a == metatiles.CollisionDirection.LEFT as u8 {
                // direction = LEFT

                a = joypad.current_h;
                if a & joypad.JOYH.LEFT != 0 {
                    facingDirection = a = FacingDirection.LEFT as u8;

                    if yy == 0 {
                        xx = -DOORWAY_VELOCITY as u16;
                    }
                    else {
                        xx = -DOORWAY_DIAGONAL_MAIN_VELOCITY as u16;
                    }
                }
                else if a & joypad.JOYH.RIGHT != 0 {
                    facingDirection = a = FacingDirection.RIGHT as u8;

                    xx = DOORWAY_VELOCITY;
                    yy = 0;
                }
                else if a & (joypad.JOYH.UP | joypad.JOYH.DOWN) != 0 {
                    // Leave door by pressing UP/DOWN if the player is near the door entrance
                    a = _mainAxisOffset;
                    if a < DOORWAY_LEAVE_DISTANCE {
                        facingDirection = a = FacingDirection.RIGHT as u8;
                        xx = DOORWAY_VELOCITY;
                        yy = 0;
                    }
                }
            }
            else {
                // direction = RIGHT

                a = joypad.current_h;
                if a & joypad.JOYH.RIGHT != 0 {
                    facingDirection = a = FacingDirection.RIGHT as u8;

                    if yy == 0 {
                        xx = DOORWAY_VELOCITY;
                    }
                    else {
                        xx = DOORWAY_DIAGONAL_MAIN_VELOCITY;
                    }
                }
                else if a & joypad.JOYH.LEFT != 0 {
                    facingDirection = a = FacingDirection.LEFT as u8;

                    xx = -DOORWAY_VELOCITY as u16;
                    yy = 0;
                }
                else if a & (joypad.JOYH.UP | joypad.JOYH.DOWN) != 0 {
                    // Leave door by pressing UP/DOWN if the player is near the door entrance
                    a = _mainAxisOffset;
                    if a < DOORWAY_LEAVE_DISTANCE {
                        facingDirection = a = FacingDirection.LEFT as u8;
                        xx = -DOORWAY_VELOCITY as u16;
                        yy = 0;
                    }
                }
            }
        }
        else {
            // Y axis doorway

            a = yPos.px - walkThroughDoorway_mainAxisStart;
            if !carry {
                a = negate8(a);
            }
            _mainAxisOffset = a;


            // Calculate X velocity to reach `walkThroughDoorway_altAxisTarget`.
            a = xPos.px;
            if a < walkThroughDoorway_altAxisTarget {
                xx = DOORWAY_DIAGONAL_ALT_VELOCITY;
            }
            else if !zero {
                xx = -DOORWAY_DIAGONAL_ALT_VELOCITY as u16;
            }


            a = walkThroughDoorway_direction as u8;
            if !zero {
                // direction = UP

                a = joypad.current_h;
                if a & joypad.JOYH.UP != 0 {
                    facingDirection = a = FacingDirection.UP as u8;

                    if xx == 0 {
                        yy = -DOORWAY_VELOCITY as u16;
                    }
                    else {
                        yy = -DOORWAY_DIAGONAL_MAIN_VELOCITY as u16;
                    }
                }
                else if a & joypad.JOYH.DOWN != 0 {
                    facingDirection = a = FacingDirection.DOWN as u8;

                    xx = 0;
                    yy = DOORWAY_VELOCITY;
                }
                else if a & (joypad.JOYH.LEFT | joypad.JOYH.RIGHT) != 0 {
                    // Leave door by pressing LEFT/RIGHT if the player is near the door entrance
                    a = _mainAxisOffset;
                    if a < DOORWAY_LEAVE_DISTANCE {
                        facingDirection = a = FacingDirection.DOWN as u8;
                        xx = 0;
                        yy = DOORWAY_VELOCITY;
                    }
                }
            }
            else {
                // direction = DOWN

                a = joypad.current_h;
                if a & joypad.JOYH.DOWN != 0 {
                    facingDirection = a = FacingDirection.DOWN as u8;

                    if yy == 0 {
                        yy = DOORWAY_VELOCITY;
                    }
                    else {
                        yy = DOORWAY_DIAGONAL_MAIN_VELOCITY;
                    }
                }
                else if a & joypad.JOYH.UP != 0 {
                    facingDirection = a = FacingDirection.UP as u8;

                    xx = 0;
                    yy = -DOORWAY_VELOCITY as u16;
                }
                else if a & (joypad.JOYH.LEFT | joypad.JOYH.RIGHT) != 0 {
                    // Leave door by pressing LEFT/RIGHT if the player is near the door entrance
                    a = _mainAxisOffset;
                    if a < DOORWAY_LEAVE_DISTANCE {
                        facingDirection = a = FacingDirection.UP as u8;
                        xx = 0;
                        yy = -DOORWAY_VELOCITY as u16;
                    }
                }
            }
        }

        xVelocity = xx;
        yVelocity = yy;
    }
    mem8_idx8();


    add_velocity_to_positon_without_collsion_checks();


    // Do not test for solid tile if main axis position is unchanged.
    //
    //  * Prevents `set_state__walking()` from repeatedly resetting the walking animation frame to 0.
    //  * Ensures player can enter the doorway tile as soon as possible.
    a = _mainAxisOffset;
    if !zero {
        negative = metatiles.test_if_player_touches_a_solid_tile();
        if !negative {
            set_state__walking();
            return;
        }
    }


    // Must be after solid tile test to prevent a clip
    a = joypad.input_buffers.attack;
    goto set_state__attacking_in_doorway if !zero;


    // ASSUMES WALKING_MS_ANIMATION_OFFSET == 0
    ^return _set_ms_animation_if_changed(facingDirection);
}



// ATTACKING IN DOORWAY STATE
// ==========================


// DB = 0x7e
#[mem8, idx8]
func set_state__attacking_in_doorway() {
    state = a = State.ATTACKING_IN_DOORWAY as u8;

    // Player moves forward a bit when attacking.
    //
    // Prevents player from finding a pixel-perfect position where they can attack inside
    // a doorway and not get hurt by an enemy.
    //
    // Should not cause any issues with collisions.
    x = a = (facingDirection as u8) << 1;
    mem16();
    #[mem16] {
        xVelocity = aa = AttackingInDoorwayVelocity_X[unaligned x] as u16;
        yVelocity = aa = AttackingInDoorwayVelocity_Y[unaligned x] as u16;
    }
    mem8_idx8();

    ^return _set_ms_animation(facingDirection | ATTACKING_MS_ANIMATION_OFFSET);
}



// DB = 0x7e
#[mem8, idx8]
func process__attacking_in_doorway() {

    add_velocity_to_positon_without_collsion_checks();

    // wait until animation is over
    zero = _is_ms_animation_over();
    if zero {
        set_state__walk_through_doorway__after_attacking_in_doorway();
    }
}


}


in rodata0 {
    let __AIDV = ATTACKING_IN_DOORWAY_VELOCITY;

    const _AttackingInDoorwayVelocity_X : [i16 ; 4] = [       0,       0,  __AIDV, -__AIDV ];
    const _AttackingInDoorwayVelocity_Y : [i16 ; 4] = [  __AIDV, -__AIDV,       0,       0 ];

    let AttackingInDoorwayVelocity_X = far &_AttackingInDoorwayVelocity_X as far *i16;
    let AttackingInDoorwayVelocity_Y = far &_AttackingInDoorwayVelocity_Y as far *i16;
}


}

