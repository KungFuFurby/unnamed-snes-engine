// Copyright (c) 2022, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.

import "memmap";

import "gamestate";

import "player";
import "metatiles";
import "entities/_variables";


in code {

namespace metatiles {
namespace interactive_tiles {


// An empty function that does nothing
func null_function(tileIndex : u8 in y) { }



// player_tile_collision_test
// ==========================
//
// ::TODO replace with something more useful::
namespace player_tile_collision_test {

in wram7e {
    var _tileIndex : u8;
}


let player_touches_tile = null_function;


// Called when the player is touching a solid tile.
//
// DB = 0x7e
#[mem8, idx8]
func player_tile_collision(tileIndex : u8 in y) {

    _tileIndex = y;

    a = player.movementState;
    if a & entities.MovementState.Y_AXIS_COLLISION != 0 {
        // Y axis collision

        a = y & 0xf;
        if !zero && a != 0xf {
            y--;
            metatiles.set_tile(y, 0x11);

            y = _tileIndex;
            metatiles.set_tile(y, 0x12);

            y = _tileIndex;
            y++;
            metatiles.set_tile(y, 0x13);
        }
    }
    else {
        // X axis collision

        // No need for bounds checking.
        // `metaSprites.set_tile()` does the bounds checking for me.

        metatiles.set_tile(y, 0x30);

        y = a = _tileIndex - 0x10;
        metatiles.set_tile(y, 0x20);

        y = a = _tileIndex + 0x10;
        metatiles.set_tile(y, 0x40);
    }
}

}



// heal
// ====
namespace heal {


let player_tile_collision = null_function;


// Heal the player when the player stands on the healing tile.
//
// Called when the player is touching the tile.
//
// DB = 0x7e
#[mem8, idx8]
func player_touches_tile(tileIndex : u8 in y) {

    // ::TODO play sound effect::
    // ::TODO spawn a particle effect::

    // Heal 1HP every 8 frames
    a = frameCounter_lobyte;
    if a & 0x7 == 0 {

        a = player.health;
        a++;
        if a >= player.maxHealth {
            a = player.maxHealth;
        }
        player.health = a;
    }
}

}


}
}

}


