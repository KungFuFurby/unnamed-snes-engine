// Copyright (c) 2021, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.

import "../memmap";
import "../../wiz/common/snes/snes";
import "../resources";


namespace dma {


in code {



// Replace all words in a 32x32 tilemap with a given value.
//
// Uses DMA channel 0
// REQUIRES: Force-Blank
// DB = 0x80
#[mem8, idx16]
func set_tilemap__forceblank(vramWaddr : u16 in xx, tilemapEntry : u16 in yy) {

var _tmp : u16 in zpTmp_word_0;

    // MUST NOT USE xx


    _tmp = yy;


    snes.dma.hdma_enable = 0;

    // Ensure we are in force blank;
    snes.ppu.brightness = a = snes.ppu.BRIGHTNESS_FORCE_BLANK | snes.ppu.BRIGHTNESS_MASK;


    snes.dma0.control = a = snes.dma.CONTROL_MODE_A | snes.dma.CONTROL_MDMA_NO_INCREMENT;
    snes.dma0.src_address_bank = #:far &_tmp;
    snes.dma0.src_address_h = >:&_tmp;

    // Transfer low byte
    snes.ppu.vram_control = a = snes.ppu.VRAM_CONTROL_INCREMENT_1 | snes.ppu.VRAM_CONTROL_REMAP_MODE_0 | snes.ppu.VRAM_CONTROL_SIZE_1;
    snes.ppu.vram_address_hl = xx;

    snes.dma0.src_address_l = a = <:&_tmp;
    snes.dma0.mdma_size_hl = yy = 32 * 32;
    snes.dma0.mdma_dest = a = <:&snes.ppu.vram_write_data_l;

    snes.dma.mdma_enable = a = snes.dma.ENABLE_0;


    // Transfer high byte
    snes.ppu.vram_control = a = snes.ppu.VRAM_CONTROL_INCREMENT_1 | snes.ppu.VRAM_CONTROL_REMAP_MODE_0 | snes.ppu.VRAM_CONTROL_SIZE_2;
    snes.ppu.vram_address_hl = xx;

    snes.dma0.src_address_l = a = &_tmp as u8 + 1;
    snes.dma0.mdma_size_hl = yy = 32 * 32;
    snes.dma0.mdma_dest = a = <:&snes.ppu.vram_write_data_h;

    snes.dma.mdma_enable = a = snes.dma.ENABLE_0;
}



// Set the DMA channel 0 source address
// Uses DMA channel 0
// REQUIRES: Force-Blank
// DB = 0x80
#[mem8, idx16]
func set_dma0_source__res_plus_offset(res : resources.ResourceEntry in resources.res, offset : u16 in yy) {
    mem16();
    #[mem16] {
        snes.dma0.src_address_hl = aa = yy + *(&res.farPtr as *u16);
    }
    mem8();
    snes.dma0.src_address_bank = a = #:res.farPtr;
}



// Transfer data to VRAM
// Uses DMA channel 0
// REQUIRES: Force-Blank
// DB = 0x80
#[mem8, idx16, fallthrough]
func transfer_to_vram__forceblank(data_bank : u8 in a, data_addr : u16 in xx, size : u16 in yy) {

    snes.dma.hdma_enable = 0;

    snes.dma0.src_address_bank = a;
    snes.dma0.src_address_hl = xx;

// fallthrough
}



// Transfer data to VRAM without changing the DMA channel 0 source address.
//
// Uses DMA channel 0
//
// ASSUMES: DMA channel 0 A-Bus address is set
// REQUIRES: Force-Blank
// DB = 0x80
#[mem8, idx16]
func continue_transfer_to_vram__forceblank(size : u16 in yy) {

    snes.dma.hdma_enable = 0;

    snes.dma0.mdma_size_hl = yy;

    // Ensure we are in force blank;
    snes.ppu.brightness = a = snes.ppu.BRIGHTNESS_FORCE_BLANK | snes.ppu.BRIGHTNESS_MASK;

    snes.ppu.vram_control = a = snes.ppu.VRAM_CONTROL_INCREMENT_1 | snes.ppu.VRAM_CONTROL_REMAP_MODE_0 | snes.ppu.VRAM_CONTROL_SIZE_2;

    snes.dma0.control = a = snes.dma.CONTROL_MODE_AB;
    snes.dma0.mdma_dest = a = <:&snes.ppu.vram_write_data_l;

    snes.dma.mdma_enable = a = snes.dma.ENABLE_0;
}



// Transfer the remaining resource data from `res` to VRAM.
//
// Uses DMA channel 0
//
// ASSUMES: DMA channel 0 A-Bus address is somewhere inside `res`
//
// REQUIRES: Force-Blank
// DB = 0x80
#[mem8, idx16]
func transfer_remaining_res_data_to_vram__forceblank(res : resources.ResourceEntry in resources.res) {
    mem16();
    #[mem16 ] {
        // Calculate number of bytes remaining in resource data
        yy = aa = *(&res.farPtr as *u16) + res.size - (snes.dma0.src_address_hl as u16);
    }
    mem8();

    // Only preform the transfer if the subtraction did not underflow.
    if carry {
        continue_transfer_to_vram__forceblank(yy);
    }

}



// Transfer data to CGRAM
// Uses DMA channel 0
// REQUIRES: Force-Blank
// DB = 0x80
#[mem8, idx16, fallthrough]
func transfer_to_cgram__forceblank(data_bank : u8 in a, data_addr : u16 in xx, size : u16 in yy) {

    snes.dma.hdma_enable = 0;

    snes.dma0.src_address_bank = a;
    snes.dma0.src_address_hl = xx;

// fallthrough
}



// Transfer data to CGRAM without changing the DMA channel 0 source address.
//
// Uses DMA channel 0
//
// ASSUMES: DMA channel 0 A-Bus address is set
// REQUIRES: Force-Blank
// DB = 0x80
#[mem8, idx16]
func continue_transfer_to_cgram__forceblank(size : u16 in yy) {

    snes.dma.hdma_enable = 0;

    snes.dma0.mdma_size_hl = yy;

    // Ensure we are in force blank;
    snes.ppu.brightness = a = snes.ppu.BRIGHTNESS_FORCE_BLANK | snes.ppu.BRIGHTNESS_MASK;


    snes.dma0.control = a = snes.dma.CONTROL_MODE_A;
    snes.dma0.mdma_dest = a = <:&snes.ppu.cgram_write_data;

    snes.dma.mdma_enable = a = snes.dma.ENABLE_0;
}


}

}


