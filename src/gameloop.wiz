// Copyright (c) 2021, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.

import "memmap";
import "../wiz/common/snes/snes";

import "metatiles";
import "resources";
import "entities/_variables";
import "entities/_common";
import "entities/player";


namespace gameloop {


let STARTING_ROOM = 0;



let ENTITIES_IN_MAP = 8;

// Map data format
struct RoomData {
    map         : [u8 ; metatiles.MAP_WIDTH * metatiles.MAP_HEIGHT],

    tileset     : u8,

    // Entities in the map
    // (Structure of Arrays)
    // If the entity does not spawn then the array elements MUST be 0xff;
    entity_xPos : [u8 ; ENTITIES_IN_MAP ],
    entity_yPos : [u8 ; ENTITIES_IN_MAP ],
    entity_type : [u8 ; ENTITIES_IN_MAP ],
};



in zeropage {

}

in wram7e {


    // This hack is required to access room via addr addressing.
    #[align(256)]
    var __far_room : RoomData;
    let room = *(&__far_room as *RoomData);

}


in code {

// Initialize the game loop
//
// REQUIRES: Force Blank
//
// DB = 0x7e
#[mem8, idx8]
inline func init__forceblank() {
    // ::TODO setup screen (if necessary)::

    entities.player.init();


    _load_room(STARTING_ROOM);
    _load_resources__forceblank();

    metatiles.populate_map_tile_properties();
    metatiles.draw_map__forceblank();

    _spawn_room_entities();
}



// Load a room into memory
//
// DB = 0x7e
#[mem8, idx8]
func _load_room(room_id : u8 in x) {
let _tmp = <:dpTmp0;
let _roomPtr = dpTmp_farPtr;

    if x >= sizeof(typeof(resources.rooms.room_list_l)) {
        x = 0;
    }

    <:_roomPtr = a = resources.rooms.room_list_l[x];
    >:_roomPtr = a = resources.rooms.room_list_h[x];
    #:_roomPtr = a = resources.rooms.room_list_b[x];


    y = sizeof(typeof(room));
    do {
        (&room as *u8)[y] = a = _roomPtr[y];
        y--;
    } while !zero;

    (&room as *u8)[0] = a = *_roomPtr;
}



// Load resources into memory and PPU.
//
// DB = 0x7e
#[mem8, idx8]
func _load_resources__forceblank() {
    idx16();
    #[idx16] {
        push8(data_bank);
        push8(program_bank);
        data_bank = pop8();
    // DB = 0x80

        metatiles.load_tileset__forceblank(room.tileset);

        data_bank = pop8();
    // DB = 0x7e
    }
    idx8();
}


// Spawn entity in the room
//
// DB = 0x7e
#[mem8, idx8]
func _spawn_room_entities() {
    entities.init();


    x = ENTITIES_IN_MAP - 1;
    do {
        push8(x);

        entities.spawn_entity(a = room.entity_xPos[x],
                              a = room.entity_yPos[x],
                              a = room.entity_type[x]);

        x = pop8();

        x--;
    } while !negative;

}



// Process the game loop
//
// DB = 0x7e
#[mem8, idx8]
func process() {

    inline for let entityId in 0 .. entities.SoA.LAST_INDEX by 2 {
        // ::ANNOY there is no `jsr (addr)` instruction on the 65816::
        x = entityId;
        entities.SoA.process_function[unaligned x](x);
    }

}



}

}

