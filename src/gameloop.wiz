// Copyright (c) 2021, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.

import "memmap";

import "room";
import "gamemodes";
import "metatiles";
import "metasprites";
import "resources";
import "room-transitions";
import "ui";
import "wait-frame";

import "player";
import "entities/_variables";
import "entities/_common";


namespace gameloop {


in code {

// Initialize the game loop
//
// DB = 0x7e
#[mem8, idx8]
inline func init() {

    player.init();

    ui.init();


    a = resources.rooms.STARTING_ROOM;
    roomstate.currentRoom = a;
    room_transitions.roomToLoad = a;

    room_transitions.fadeIn_playerXpos = a = DISPLAY_WIDTH / 2;
    room_transitions.fadeIn_playerYpos = a = DISPLAY_HEIGHT / 2;


    a = GameModes.LOAD_ROOM_FADEIN as u8;
    gameMode = a as GameModes;
}



// Spawn the room entities
//
// ASSUMES: entities subsystem is initialised.
// ASSUMES: room entities have not been spawned.
//
// DB = 0x7e
#[mem8, idx8]
func _spawn_room_entities() {

    x = N_ENTITIES_IN_ROOM_DATA - 1;
    do {
        push8(x);

        entities.spawn_entity(a = room.entity_xPos[x],
                              a = room.entity_yPos[x],
                              a = room.entity_type[x],
                              y = room.entity_parameter[x]);

        x = pop8();

        x--;
    } while !negative;

}



// Process the game loop
//
// ASSUMES: PPU setup and screen enabled
//
// DB = 0x7e
#[mem8, idx8]
func run_game {

    ^do {
        // Always process player entity first
        entities.currentEntityId = PLAYER_ENTITY_ID;
        player.process();
        metasprites.process_entity_animation(PLAYER_ENTITY_ID);

        idx16();
        #[mem8, idx16] {
            player.update_collision_boxes__inline();
        }
        mem8_idx8();


        entities.process_active_entities();

        entities.sort_active_entities();

        draw_entities();


        ui.process();


        _check_for_room_transition();


        a = ui.healthBarValue;
        if zero {
            a = GameModes.GAME_OVER as u8;
            gameMode = a as GameModes;

            break;
        }


        wait_frame();


        // loop until gameMode changes

        // ASSERT: GameModes.RUN_GAME == 0
        a = gameMode as u8;
    } while zero;
}



// Process the game loop
//
// DB = 0x7e
#[mem8, idx8]
func draw_entities() {
    idx16();
    #[idx16] {
        metasprites.reset_buffer_and_draw_entity_shadows();
    }
    idx8();

    entities.draw_active_entities();

    idx16();
    #[idx16] {
        metasprites.finalize_buffer();
    }
    idx8();
}



// Check for a room transition and preform them as required.
//
// DB = 0x7e
#[mem8, idx8]
inline func _check_for_room_transition() {

    a = player.yPos.px;
    if zero {
        // Check if there is a room above this one
        a = roomstate.currentRoom - 0x10;
        if carry {
            a = GameModes.ROOM_TRANSITION_SCROLL_UP as u8;
            gameMode = a as GameModes;
        }

        // Do not check x axis after loading next room
        return;
    }
    else if a >= DISPLAY_HEIGHT - 1 {
        // Check if there is a room below this one
        a = roomstate.currentRoom + 0x10;
        if !carry {
            a = GameModes.ROOM_TRANSITION_SCROLL_DOWN as u8;
            gameMode = a as GameModes;
        }

        // Do not check x axis after loading next room
        return;
    }

    a = player.xPos.px;
    if zero {
        // Check if there is a room to the left of this one
        a = roomstate.currentRoom & 0x0f;
        if !zero {
            a = GameModes.ROOM_TRANSITION_SCROLL_LEFT as u8;
            gameMode = a as GameModes;
        }
    }
    else if a >= DISPLAY_WIDTH - 1 {
        // Check if there is a room to the right of this one
        a = roomstate.currentRoom & 0x0f;
        if a != 0x0f {
            a = GameModes.ROOM_TRANSITION_SCROLL_RIGHT as u8;
            gameMode = a as GameModes;
        }
    }
}

}

}

