// Copyright (c) 2023, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.

import "player";
import "ui";
import "joypad";
import "rng";

import "game/gamestate";
import "resources/resources";


namespace engine_hooks {


// WaitFrame
// =========


// Vertical blank hook.
//
// Called by `wait_frame()`.
//
// MUST NOT modify zpTmp variables.
//
// DB = 0x80
#[mem8, idx16]
inline func wait_frame__vblank__inline() {
    ui.transfer_buffer__vblank();
}



// After Vertical-Blank hook.
//
// Called by `wait_frame()`, after the screen is re-enabled.
//
// MUST NOT modify zpTmp variables.
//
// DB = 0x80
#[mem16, idx16]
inline func wait_frame__after_vblank__mem16_idx16__inline() {
    rng.increment_rng();
}



// After Vertical-Blank hook.
//
// Called by `wait_frame()`, after the screen is re-enabled.
//
// MUST NOT modify zpTmp variables.
//
// DB = 0x80
#[mem8, idx8]
inline func wait_frame__after_vblank__mem8_idx8__inline() {
    joypad.update_state__inline();
}


// Textbox
// =======

const joypad_pressed @ &joypad.pressed : u16;
const joypad_pressed_l @ &<:joypad.pressed : u8;
const joypad_pressed_h @ &>:joypad.pressed : u8;



// GameState
// =========

typealias GameState__PlayerState : player.GameState__PlayerState;
let GameState__InitialPlayerState = player.InitialPlayerState;


// Called by `gamestate.continue_game()`.
//
// DB = 0x7e
#[mem8, idx8]
inline func gamestate__continue_game__inline() {
    // ::HACK Hardcoded checkpoint (just before the boss)::
    // ::TODO create some kind of checkpoint system::

    let LAST_HEALING_ROOM = 0x75;

    a = gamestate.data.currentRoom;
    if a >= LAST_HEALING_ROOM + 1 {
        // Game over before the boss
        a = resources.rooms.STARTING_ROOM;
        x = player.InitialPlayerState.xPos;
        y = player.InitialPlayerState.yPos;
    }
    else {
        // Game over after the final healing room (at the boss)
        a = LAST_HEALING_ROOM;
        x = 256 / 2;
        y = 224 / 2;

    }

    gamestate.data.currentRoom = a;
    gamestate.data.roomToLoad = a;

    gamestate.data.playerState.xPos = x;
    gamestate.data.playerState.yPos = y;
    gamestate.data.playerState.zPos = player.InitialPlayerState.zPos;
}



// Rest the player state from the gamestate.
//
// Called by `gamestate.continue_game()`.
//
// DB = 0x7e
#[mem8, idx8]
inline func gamestate__continue_player_gamestate__inline() {
    player.continue_player_gamestate__inline();
}


// Save the player state to the gamestate.
//
// Called by `gamestate.backup_gamestate()`.
//
// DB = 0x7e
#[mem8, idx8]
inline func gamestate__save_player_state__inline() {
    player.save_player_state__inline();
}



// Room Transitions
// ================


// Initialise the player subsystem.
//
// DB = 0x7e
#[mem8, idx8]
inline func room_transitions__reset_player__inline() {
    player.init();
}



// Reset player MetaSprites.
//
// Called when resources-over-usb2snes is active and the metasprite subsystem is reset.
//
// DB = 0x7e
#[mem8, idx8]
inline func room_transitions__init_player_metasprites__inline() {
    player.init_metasprites();
}



// Called after a room backup has been loaded into memory during a scrolling room transition rollback.
//
// DB = 0x7e
#[mem8, idx8]
inline func room_transitions__scrolling_room_transition_rollback__inline() {
    // Allow the player to escape any entity that may be in front of the player after a rollback.
    // Minimises the odds of an entity knocking the player back into the invalid room (immediately after rollback)
    player.zero_velocity();
    player.set_iframes_after_room_transition_rollback();
}

}

