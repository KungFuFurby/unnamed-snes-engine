// Copyright (c) 2021-2022, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.

import "memmap";
import "../wiz/common/snes/snes";

import "room";
import "gameloop";
import "gamemodes";
import "metasprites";
import "metatiles";
import "resources";
import "ui";
import "wait-frame";
import "common/reset";

import "player";
import "entities/_variables";
import "entities/_common";


namespace room_transitions {


let PLAYER_MAP_TRANSITION_END_POS = 3;


// Value MUST BE even
let N_TRANSITION_FRAMES_BEFORE_SOLID_CHECK = 14;


let PLAYER_XPOS_AFTER_LEFT_TRANSITION  = DISPLAY_WIDTH - 1 - PLAYER_MAP_TRANSITION_END_POS;
let PLAYER_XPOS_AFTER_RIGHT_TRANSITION = PLAYER_MAP_TRANSITION_END_POS;

let PLAYER_YPOS_AFTER_UP_TRANSITION    = DISPLAY_HEIGHT - 1 - PLAYER_MAP_TRANSITION_END_POS;
let PLAYER_YPOS_AFTER_DOWN_TRANSITION  = PLAYER_MAP_TRANSITION_END_POS;



enum ScrollDirection : u8 {
    UP    = 0,
    DOWN  = 2,
    LEFT  = 4,
    RIGHT = 6,
    ROLLBACK_LEFT =  8,
    ROLLBACK_RIGHT = 10,
}



// Sprite list.
//
// Contains the position and MetaSprite information for all entities in the previous room and the new room.
//
// NOTE: xPos/yPos is offset by CAMERA_ORIGIN.
//
// Entry 0 is always the player's MetaSprite.
//
// (Structure of Word Arrays)
namespace SpriteList {
    in shadow {
        // Metasprite draw function.
        //
        // DB = 0x7e
        #[mem8, idx8]
        var ms_draw_function : [func(msFrame : u16 in yy, xPos : u16 in metasprites.xPos, yPos : u16 in metasprites.yPos) ; N_SPRITE_LIST_ELEMENTS];
    }

    in wram7e {
        var xPos : [u16 ; N_SPRITE_LIST_ELEMENTS];
        var yPos : [u16 ; N_SPRITE_LIST_ELEMENTS];
        var zPos : [u16 ; N_SPRITE_LIST_ELEMENTS];
        var msFrameAddr : [u16 ; N_SPRITE_LIST_ELEMENTS];

        var _shadowSizeAndBlank : [ entities._u8pair ; N_SPRITE_LIST_ELEMENTS];
            var shadowSize @ &_shadowSizeAndBlank[0].first : [ metasprites.ShadowSize ; N_SPRITE_LIST_ELEMENTS * 2 - 1];
    }
}


let PLAYER_ID = 0;

let N_SPRITE_LIST_ELEMENTS = entities.N_ENTITIES + N_ENTITIES_IN_ROOM_DATA + 2;

let LAST_SPRITE_LIST_INDEX = (N_SPRITE_LIST_ELEMENTS - 1) * 2;


let CAMERA_ORIGIN = 0x100;


// Room transition code can directly modify the sprite's position.
in wram7e {
    var spriteList_player_xPos : u16 in SpriteList.xPos[PLAYER_ID];
    var spriteList_player_yPos : u16 in SpriteList.yPos[PLAYER_ID];
}


in wram7e {
    // The room to load in a non-scrolling room transition.
    //
    // Is not used by scrolling room transition.
    //
    // Will only be read by the ROOM_TRANSITION_FADEOUT and LOAD_ROOM_FADEIN transitions.
    //
    // (byte)
    var roomToLoad : u8;


    // The past-the-end index of the sprite list.
    //
    // Equivalent to a c++ stl end() iterator.
    // Equal to `size of list * 2`.
    //
    // (byte index)
    var spriteListEnd : u8;

    // Current index position inside the `SpriteList`.
    // (word index)
    var spriteListIndex : u16;


    // SpriteList camera position
    // (2x uint16)
    var camera_x : u16;
    var camera_y : u16;

        var camera_x_l : u8 in <:camera_x;
        var camera_y_l : u8 in <:camera_y;

        var camera_x_h : u8 in >:camera_x;
        var camera_y_h : u8 in >:camera_y;


    // The scroll direction of the current room transition.
    var scrollDirection : ScrollDirection;

    // Countdown timer in a scrolling room transition until the player's tile is checked for solidity.
    //
    // (countdown display frame timer)
    var countdownToSolidCheck : u8;


    // Backup of the room state.
    // Created on room load.
    // Restored on transition rollback.
    var roomStateBackup_shadow : [ u8 ; MEMMAP_ROOMSTATE_SHADOW_SIZE ];
    var roomStateBackup_wram7e : [ u8 ; MEMMAP_ROOMSTATE_SHADOW_SIZE ];
}



in code {


// Load the room into memory, check if the MetaTile tileset has changed and populates the sprite list.
//
// `player.xPos.px` and `player.yPos.px` MUST contain the position of the
// player AFTER the room transition ends and play resumes (the variables might be used by an
// entity init routine)
//
// Returns true if it is OK to preform a scroll transition into the next room without glitches.
//
// DB = 0x7e
#[mem8, idx8]
func _load_room_and_check_if_ok_to_scroll(roomPosition : u8 in a) : bool in carry {

var _roomStateBackup__room_tileset @ &roomStateBackup_wram7e[&room.tileset as u16 - MEMMAP_ROOMSTATE_WRAM7E as u16] : typeof(room.tileset);

    push8(a);
    {
        _reset_camera();
        _clear_sprite_list();
        _add_entities_to_sprite_list();


        __backup_room_state();


        // Reset entity subsystem
        entities.init();
    }

    x = pop8();
    roomstate.currentRoom = x;
    x = a = resources.rooms.room_table[x];
    if !zero && x < resources.rooms.N_ROOMS + 1 {
        // room is valid

        x--;
        __copy_room_into_memory(x);

        metatiles.populate_map_tile_properties();
        gameloop._spawn_room_entities();
    }
    else {
        // room is missing from map - create an empty dummy map
        //
        // `metatiles.populate_map_tile_properties()` will fill the dummy
        // room's `mapTileProperties` with solid tiles.  This ensures any
        // scrolling room transition into a missing room will always be rolled
        // back.

        __clear_room_memory();
        room.tileset = a = 0xff;

        metatiles.populate_map_tile_properties__all_tiles_solid();
    }


    // Get the tileset id from the backup
    a = room.tileset;
    if a != 0xff && a != _roomStateBackup__room_tileset {
        return false;
    }


    entities.sort_active_entities();

    _add_entities_to_sprite_list_with_offset(scrollDirection);
    _sprite_list_set_player_with_offset(scrollDirection);

    return true;
}



// Restore the room state from backup, move the player to a specific location and populate the sprite list.
//
// ASSUMES: previous room is valid
// ASSUMES: player position is value (not stuck inside a solid tile)
//
// DB = 0x7e
#[mem8, idx8]
func _load_room_from_backup(playerXpos : u8 in x, playerYpos : u8 in y) {

    push8(x);
    push8(y);


    _clear_sprite_list();
    _add_entities_to_sprite_list();


    __restore_room_state_from_backup();

    // Assumes previous room is valid
    metatiles.populate_map_tile_properties();


    y = pop8();
    x = pop8();

    player.xPos.px = x;
    player.yPos.px = y;


    entities.sort_active_entities();

    _add_entities_to_sprite_list_with_offset(scrollDirection);
    _sprite_list_set_player_with_offset(scrollDirection);
}



// Backup the roomstate variables
//
// DB = 0x7e
#[mem8, idx8]
inline func __backup_room_state() {

let _roomstate_shadow = MEMMAP_ROOMSTATE_SHADOW as far *u8;
let _roomstate_wram7e = MEMMAP_ROOMSTATE_WRAM7E as far *u8;

    mem16_idx16();
    #[mem16, idx16] {
        // Parameter order is destination, source::
        load_dec_repeat(#:far &roomStateBackup_shadow, yy = &roomStateBackup_shadow as u16,
                        #:_roomstate_shadow,           xx = _roomstate_shadow as u16,
                        aa = MEMMAP_ROOMSTATE_SHADOW_SIZE - 1);

        load_dec_repeat(#:far &roomStateBackup_wram7e, yy = &roomStateBackup_wram7e as u16,
                        #:_roomstate_wram7e,           xx = _roomstate_wram7e as u16,
                        aa = MEMMAP_ROOMSTATE_WRAM7E_SIZE - 1);

    // NOTE: load_dec_repeat changes the data bank
    //       (safe as target is in bank 0x7e)
    }
    mem8_idx8();
}


// Restore the roomstate variables from backup.
//
// DB = 0x7e
#[mem8, idx8]
inline func __restore_room_state_from_backup() {

let _roomstate_shadow = MEMMAP_ROOMSTATE_SHADOW as far *u8;
let _roomstate_wram7e = MEMMAP_ROOMSTATE_WRAM7E as far *u8;

    mem16_idx16();
    #[mem16, idx16] {
        // Parameter order is destination, source::
        load_dec_repeat(#:_roomstate_shadow,           yy = _roomstate_shadow as u16,
                        #:far &roomStateBackup_shadow, xx = &roomStateBackup_shadow as u16,
                        aa = MEMMAP_ROOMSTATE_SHADOW_SIZE - 1);

        load_dec_repeat(#:_roomstate_wram7e,           yy = _roomstate_wram7e as u16,
                        #:far &roomStateBackup_wram7e, xx = &roomStateBackup_wram7e as u16,
                        aa = MEMMAP_ROOMSTATE_WRAM7E_SIZE - 1);

    // NOTE: load_dec_repeat changes the data bank
    //       (safe as target is in bank 0x7e)
    }
    mem8_idx8();
}




// Load the room into memory
//
// ASSUMES: roomListIndex is valid
//
// DB = 0x7e
#[mem8, idx8]
inline func __copy_room_into_memory(roomListIndex : u8 in x) {
var _roomPtr : far *u8 in zpTmp_farPtr;

    if x >= resources.rooms.N_ROOMS {
        x = 0;
    }

    <:_roomPtr = a = resources.rooms.room_list_l[x];
    >:_roomPtr = a = resources.rooms.room_list_h[x];
    #:_roomPtr = a = resources.rooms.room_list_bank;


    idx16();
    #[idx16] {
        yy = sizeof(typeof(room)) - 1;
        do {
            (&room as *u8)[yy] = a = _roomPtr[yy];
            yy--;
        } while !negative;
    }
    mem8_idx8();
}



// Clear room memory
//
// DB = 0x7e
#[mem8, idx8]
inline func __clear_room_memory() {

    idx16();
    #[idx16] {
        xx = sizeof(typeof(room)) - 1;
        do {
            (&room as *u8)[xx] = 0;
            xx--;
        } while !negative;
    }
    idx8();
}



// Setup PPU, reset graphics subsystems and draw graphics to the screen.
//
// This function will restore the following subsystems to a known good state:
//  * PPU
//  * MetaTiles
//  * MetaSprite
//
// ASSUMES: room and entities are loaded into memory
//
// NOTE: Enables Force-Blank.
// NOTE: MUST ONLY BE CALLED ONCE IN THE CODE
//
// DB = 0x7e
#[mem8, idx8]
inline func __setup_ppu_and_reset_graphics_subsystems() {


    wait_frame_and_change_brightness(snes.ppu.BRIGHTNESS_FORCE_BLANK | snes.ppu.BRIGHTNESS_MASK);


    push8(program_bank);
    data_bank = pop8();
// DB = 0x80
    {
        // Setup PPU registers

        reset_registers();

        snes.ppu.bg_mode = a = 1 | snes.ppu.BG_MODE_MODE1_BG3_PRIORITY;
        snes.ppu.bg1_tilemap = a = (VRAM_BG1_MAP_WADDR >> snes.ppu.BG_TILEMAP_ADDRESS_BIT_ALIGN << snes.ppu.BG_TILEMAP_ADDRESS_SHIFT_LEFT) | snes.ppu.BG_TILEMAP_MIRROR_X;
        snes.ppu.bg3_tilemap = a = (VRAM_BG3_MAP_WADDR >> snes.ppu.BG_TILEMAP_ADDRESS_BIT_ALIGN << snes.ppu.BG_TILEMAP_ADDRESS_SHIFT_LEFT);

        snes.ppu.bg12_tileset = a = (VRAM_BG1_TILES_WADDR >> snes.ppu.BG_TILESET_ADDRESS_BIT_ALIGN << snes.ppu.BG12_TILESET_ADDRESS_BG1_SHIFT);
        snes.ppu.bg34_tileset = a = (VRAM_BG3_TILES_WADDR >> snes.ppu.BG_TILESET_ADDRESS_BIT_ALIGN << snes.ppu.BG12_TILESET_ADDRESS_BG1_SHIFT);


        snes.ppu.screen_enable_mask = a = snes.ppu.SCREEN_ENABLE_BG1 | snes.ppu.SCREEN_ENABLE_BG3 | snes.ppu.SCREEN_ENABLE_OBJ;



        // Load Graphics to PPU

        idx16();
        #[idx16] {
            metatiles.load_tileset__forceblank(room.tileset);

            metasprites.setup__fblank();

            // ::TODO get spritesheet_id from somewhere::
            metasprites.load_ppu_data__fblank(1);

            ui.setup_ppu__forceblank();
        }
        idx8();
    }
    push8(a = 0x7e);
    data_bank = pop8();
// DB = 0x7e


    // Tileset may have changed - Need to repopulate map_tile properties
    metatiles.populate_map_tile_properties();

    metatiles.draw_map__forceblank();
}



// Room Transitions
// ================


// Load the room, fade in the screen
//
// ASSUMES: in Force-Blank
//
// DB = 0x7e
#[mem8, idx8]
func load_room__fadein() {

    // ::TODO improve::
    _load_room_and_check_if_ok_to_scroll(roomToLoad);

    return _fadein__room_in_memory();
}



// Blank the screen, load graphics to PPU, fade in the screen, set gameMode to RUN_GAME.
//
// ASSUMES: room is loaded in memory
//
// DB = 0x7e
#[mem8, idx8]
func _fadein__room_in_memory() {

    __setup_ppu_and_reset_graphics_subsystems();
    gameloop.draw_entities();


    // Fade in
    {
        a = 0 as u8;
        do {
            push8(a);
            wait_frame_and_change_brightness(a);

            a = pop8();
            a++;
        } while a != 16;
    }


    // ::TODO how do I handle a fadein to an invalid room::


    // ::TODO check if player is on a non-solid tile::
    // ::: must be done AFTER tileset is loaded into memory::
    // ::: ::
    // ::: How do I handle this case? ::


    gameMode = GameModes.RUN_GAME;
}



// Blank the screen, then load the next room and resources.
//
// INPUT: currentRoom is set to room to load
//
// DB = 0x7e
#[mem8, idx8]
func fadeout() {
    _load_room_and_check_if_ok_to_scroll(roomToLoad);

    return _fadeout__room_in_memory();
}



// Blank the screen, then load the next room and resources.
//
// ASSUMES: next room is loaded in memory
//
// DB = 0x7e
#[mem8, idx8]
func _fadeout__room_in_memory() {

    // Fadeout
    a = 15;
    do {
        push8(a);
        wait_frame_and_change_brightness(a);

        a = pop8();
        a--;
    } while !negative;


    _fadein__room_in_memory();


    // ::TODO how do I handle a fadein to an invalid room::


    // ::TODO check if player is on a non-solid tile::
    // ::: must be done AFTER tileset is loaded into memory::
    // ::: ::
    // ::: How do I handle this case? ::
}



// Process a scrolling room transition.
//
// `player.xPos.px` and `player.yPos.px` MUST contain the position of the
// player AFTER the room transition ends and play resumes (the variables might be used by an
// entity init routine)
//
// Returns true if the transition completed successfully.
// Returns false if there is a solid tile at the player's new position.
//
// If this function returns false, then `_scrolling_room_transition__rollback` MUST be called.
//
// DB = 0x7e
#[mem8, idx8]
func _scrolling_room_transition(roomPosition : u8 in a, _scrollDirection : u8 in x) : bool in carry {

    scrollDirection = x as ScrollDirection;

    player.xPos.sx = 0;
    player.yPos.sx = 0;

    carry = _load_room_and_check_if_ok_to_scroll(a);
    if !carry {
        _fadeout__room_in_memory();
        return true;
    }

    x = scrollDirection as u8;
    MetaTileTransition_Setup_FunctionTable[unaligned x]();

    countdownToSolidCheck = a = N_TRANSITION_FRAMES_BEFORE_SOLID_CHECK;

    return _scrolling_room_transition__loop();
}


const MetaTileTransition_Setup_FunctionTable : [func ; 6] = [
    metatiles.transitions.scroll_up__setup,
    metatiles.transitions.scroll_down__setup,
    metatiles.transitions.scroll_left__setup,
    metatiles.transitions.scroll_right__setup,
    _invalid_setup_function,
    _invalid_setup_function,
];

const MetaTileTransition_Process_FunctionTable : [func : bool in carry ; 6] = [
    metatiles.transitions.scroll_up__process,
    metatiles.transitions.scroll_down__process,
    metatiles.transitions.scroll_left__process,
    metatiles.transitions.scroll_right__process,
    metatiles.transitions.scroll_left__rollback,
    metatiles.transitions.scroll_right__rollback,
];



// Process a scrolling room transition.
//
// ASSUMES: Transition setup by `_scrolling_room_transition` or `_scrolling_room_transition__rollback`.
//
// Returns true if the transition completed successfully.
// Returns false if there is a solid tile at the player's new position.
//
// If this function returns false, then `_scrolling_room_transition__rollback` MUST be called.
//
// DB = 0x7e
#[mem8, idx8]
func _scrolling_room_transition__loop() : bool in carry {
    do {
        wait_frame();

        x = scrollDirection as u8;

        countdownToSolidCheck--;
        if zero {
            negative = metatiles.test_if_player_touches_a_solid_tile();
            if negative {
                // Tile is solid

                // Check if it is a doorway tile
                zero = metatiles.test_if_player_touches_a_doorway_tile();
                if !zero {
                    // Tile is solid - cannot place player here
                    wait_one_second();

                    return false;
                }
            }
        }

        move_camera_and_draw_sprite_list();

        x = scrollDirection as u8;
        MetaTileTransition_Process_FunctionTable[unaligned x]();
    }
    while !carry;

    gameMode = GameModes.RUN_GAME;

    return true;
}



// Rollback a scrolling room transition.
//
// `_scrollDirection_` must be the opposite of the initial ScrollDirection.
//
// `playerXpos` and `playerYpos` is the expected location of the player AFTER the room transition is rolled back.
//
// DB = 0x7e
#[mem8, idx8]
func _scrolling_room_transition__rollback(_scrollDirection_ : u8 in a, playerXpos : u8 in x, playerYpos : u8 in y) {

    scrollDirection = a as ScrollDirection;

    _load_room_from_backup(x, y);

    // Allow the player to escape any entity that may be in front of the player after a rollback.
    // Minimises the odds of an entity knocking the player back into the invalid room (immediately after rollback)
    player.zero_velocity();
    player.set_iframes_after_room_transition_rollback();

    mem16();
    #[mem16] {
        x = scrollDirection as u8;
        camera_x = aa = camera_x + ScrollDirectionTableX[unaligned x] as u16;
        camera_y = aa = camera_y + ScrollDirectionTableY[unaligned x] as u16;
    }
    mem8();

    return _scrolling_room_transition__loop();
}



// Scroll right room transition.
//
// ASSUMES: There is a room to the right of this one.
//
// DB = 0x7e
#[mem8, idx8]
func scroll_right() {

    player.xPos.px = a = PLAYER_XPOS_AFTER_RIGHT_TRANSITION;

    a = roomstate.currentRoom;
    a++;

    carry = _scrolling_room_transition(a, ScrollDirection.RIGHT as u8);
    if !carry {
        // Transition failed, rollback room transition
        return _scrolling_room_transition__rollback(ScrollDirection.ROLLBACK_RIGHT as u8,
                                                    PLAYER_XPOS_AFTER_LEFT_TRANSITION, player.yPos.px);
    }
}



// Scroll left room transition.
//
// ASSUMES: There is a room to the left of this one.
//
// DB = 0x7e
#[mem8, idx8]
func scroll_left() {

    player.xPos.px = a = PLAYER_XPOS_AFTER_LEFT_TRANSITION;

    a = roomstate.currentRoom;
    a--;

    carry = _scrolling_room_transition(a, ScrollDirection.LEFT as u8);
    if !carry {
        // Transition failed, rollback room transition
        return _scrolling_room_transition__rollback(ScrollDirection.ROLLBACK_LEFT as u8,
                                                    PLAYER_XPOS_AFTER_RIGHT_TRANSITION, player.yPos.px);
    }
}



// Scroll down room transition.
//
// ASSUMES: There is a room below this one.
//
// DB = 0x7e
#[mem8, idx8]
func scroll_down() {

    player.yPos.px = a = PLAYER_YPOS_AFTER_DOWN_TRANSITION;

    carry = _scrolling_room_transition(a = roomstate.currentRoom + 0x10, ScrollDirection.DOWN as u8);
    if !carry {
        // Transition failed, rollback room transition
        ^return _scrolling_room_transition__rollback(ScrollDirection.UP as u8,
                                                     player.xPos.px, PLAYER_YPOS_AFTER_UP_TRANSITION);
    }
}



// Scroll up room transition.
//
// ASSUMES: There is a room above this one.
//
// DB = 0x7e
#[mem8, idx8]
func scroll_up() {

    player.yPos.px = a = PLAYER_YPOS_AFTER_UP_TRANSITION;

    carry = _scrolling_room_transition(a = roomstate.currentRoom - 0x10, ScrollDirection.UP as u8);
    if !carry {
        // Transition failed, rollback room transition
        ^return _scrolling_room_transition__rollback(ScrollDirection.DOWN as u8,
                                                     player.xPos.px, PLAYER_YPOS_AFTER_DOWN_TRANSITION);
    }
}



// DB = 0x7e
#[mem8, idx8]
func _invalid_setup_function() {
}


// Sprite List
// ===========


// Reset the sprite list camera back to the origin point.
//
// DB = 0x7e
#[mem8, idx8]
func _reset_camera() {
    mem16();
    #[mem16] {
        aa = CAMERA_ORIGIN;
        camera_x = aa;
        camera_y = aa;
    }
    mem8();
}




// Clear the sprite list.
//
// DB = 0x7e
#[mem8, idx8]
inline func _clear_sprite_list() {
    // index 0 is reserved for the player
    spriteListEnd = x = 2;
}



// Add room entities to the sprite list.
//
// DB = 0x7e
#[mem8, idx8]
func _add_entities_to_sprite_list() {

var _activeEntitiesTablePos : u8 in zpTmp_byte_0;

    x = spriteListEnd;

    y = entities.numberOfActiveEntities;
    if !zero {
        do {
            y--;
            _activeEntitiesTablePos = y;

            y = a = entities.activeEntitiesTable[y];
            if !zero {
                mem16();
                #[mem16] {
                    SpriteList.xPos[unaligned x] = aa = ((&entities.SoA.xPos[0].px as *u16)[unaligned y] & 0xff) + CAMERA_ORIGIN;
                    SpriteList.yPos[unaligned x] = aa = ((&entities.SoA.yPos[0].px as *u16)[unaligned y] & 0xff) + CAMERA_ORIGIN;
                    SpriteList.zPos[unaligned x] = aa = ((&entities.SoA._zPosAndBlank[0].first as *u16)[unaligned y] & 0xff);
                    (&SpriteList.ms_draw_function[0] as *u16)[unaligned x] = aa = entities.SoA.ms_draw_function[unaligned y] as u16;
                    SpriteList.msFrameAddr[unaligned x] = aa = entities.SoA.msFrameAddr[unaligned y];
                    (&SpriteList._shadowSizeAndBlank[0] as *u16)[unaligned x] = aa = (&entities.SoA._shadowSizeAndBlank[0] as *u16)[unaligned y];
                }
                mem8();

                x++;
                x++;
                break if x >= LAST_SPRITE_LIST_INDEX + 1;
            }

            y = _activeEntitiesTablePos;
        } while !zero;
    }
    spriteListEnd = x;
}


// Populate the player's sprite list entry, offsetting the player's position based on the scroll direction.
//
// DB = 0x7e
#[mem8, idx8]
func _sprite_list_set_player_with_offset(sd : ScrollDirection in scrollDirection) {
    mem16();
    #[mem16] {
        x = scrollDirection as u8;

        SpriteList.xPos[PLAYER_ID] = aa = ((&entities.SoA.xPos[0].px as *u16)[PLAYER_ID] & 0xff) + CAMERA_ORIGIN + ScrollDirectionTableX[unaligned x] as u16;
        SpriteList.yPos[PLAYER_ID] = aa = ((&entities.SoA.yPos[0].px as *u16)[PLAYER_ID] & 0xff) + CAMERA_ORIGIN + ScrollDirectionTableY[unaligned x] as u16;
        SpriteList.zPos[PLAYER_ID] = aa = ((&entities.SoA._zPosAndBlank[0].first as *u16)[PLAYER_ID] & 0xff);

        (&SpriteList.ms_draw_function[0] as *u16)[PLAYER_ID] = aa = entities.SoA.ms_draw_function[PLAYER_ID] as u16;
        SpriteList.msFrameAddr[PLAYER_ID] = aa = entities.SoA.msFrameAddr[PLAYER_ID];
        (&SpriteList._shadowSizeAndBlank[0] as *u16)[PLAYER_ID] = aa = (&entities.SoA._shadowSizeAndBlank[0] as *u16)[PLAYER_ID];
    }
    mem8();
}



// Add room entities to the sprite list, offsetting their position based on the scroll direction.
//
// DB = 0x7e
#[mem8, idx8]
func _add_entities_to_sprite_list_with_offset(sd : ScrollDirection in scrollDirection) {

    x = spriteListEnd;
    push8(x);

    _add_entities_to_sprite_list();


    // Add ScrollDirectionTable offset to the new elements added to the sprite list.
    y = pop8();
    x = scrollDirection as u8;

    if y < spriteListEnd {
        mem16();
        #[mem16()] {
            do {
                SpriteList.xPos[unaligned y] = aa = SpriteList.xPos[unaligned y] + ScrollDirectionTableX[unaligned x] as u16;
                SpriteList.yPos[unaligned y] = aa = SpriteList.yPos[unaligned y] + ScrollDirectionTableY[unaligned x] as u16;

                y++;
                y++;
            } while y < spriteListEnd;
        }
        mem8_idx8();
    }
}



// Move spriteList camera based on the scroll direction and draw the sprite list.
//
// DB = 0x7e
#[mem8, idx8]
func move_camera_and_draw_sprite_list() {

    mem16();
    #[mem16] {
        x = scrollDirection as u8;

        camera_x = aa = camera_x + ScrollDirectionVelocityX[unaligned x] as u16;
        camera_y = aa = camera_y + ScrollDirectionVelocityY[unaligned x] as u16;
    }
    mem8();


    return draw_sprite_list();
}



// Draw the sprite list.
//
// DB = 0x7e
#[mem8, idx8]
func draw_sprite_list() {

    idx16();
    #[idx16] {
        metasprites.reset_buffer_and_draw_room_transition_shadows__inline();
    }
    mem8_idx8();


    // Draw MetaSprites
    x = spriteListEnd;
    if !zero {
        do {
            mem16_idx16();
            #[mem16, idx16] {
                xx--;
                xx--;
                spriteListIndex = xx;

                metasprites.xPos = aa = SpriteList.xPos[unaligned xx] - camera_x;
                metasprites.yPos = aa = SpriteList.yPos[unaligned xx] - SpriteList.zPos[unaligned xx] - camera_y;
            }
            mem8();
            #[mem8, idx16] {
                yy = SpriteList.msFrameAddr[unaligned xx];
                SpriteList.ms_draw_function[unaligned xx](yy, metasprites.xPos, metasprites.yPos);
            }
            mem8_idx8();

            // ::ANNOY Cant use `<:` - it changes `spriteListIndex` to a long address
            x = *(&spriteListIndex as *u8);
        } while !zero;
    }


    idx16();
    #[idx16] {
        metasprites.finalize_buffer();
    }
    mem8_idx8();
}

}

in rodata0 {
    // Order MUST Match ScrollDirection
    const _ScrollDirectionTableX : [i16 ; 6 ] = [                0,                   0,     -DISPLAY_WIDTH,      DISPLAY_WIDTH,     -DISPLAY_WIDTH,    DISPLAY_WIDTH ];
    const _ScrollDirectionTableY : [i16 ; 6 ] = [  -DISPLAY_HEIGHT,      DISPLAY_HEIGHT,                  0,                  0,                  0,                0 ];

    let ScrollDirectionTableX = (far&_ScrollDirectionTableX as far *i16);
    let ScrollDirectionTableY = (far&_ScrollDirectionTableY as far *i16);


    let _TS = metatiles.transitions.TRANSITION_SPEED;

    const _ScrollDirectionVelocityX : [i16 ; 6 ] = [    0,    0, -_TS,  _TS,  _TS, -_TS];
    const _ScrollDirectionVelocityY : [i16 ; 6 ] = [ -_TS,  _TS,    0,    0,    0,    0];

    let ScrollDirectionVelocityX = (far&_ScrollDirectionVelocityX as far *i16);
    let ScrollDirectionVelocityY = (far&_ScrollDirectionVelocityY as far *i16);
}

}


