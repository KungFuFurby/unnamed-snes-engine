// Copyright (c) 2023, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.

// Register addresses from the snesdev wiki: https://snes.nesdev.org/wiki/S-SMP

enum GlobalDspAddr : u8 {
    // Global DSP registers
    MVOL_L      = 0x0c,     // Left channel main volume (signed)
    MVOL_R      = 0x1c,     // Right channel main volume (signed)
    EVOL_L      = 0x2c,     // Left channel echo volume (signed)
    EVOL_R      = 0x3c,     // Right channel echo volume (signed)
    KON         = 0x4c,     // Key on
    KOFF        = 0x5c,     // Key off
    FLG         = 0x6c,     // Flags
    ENDX        = 0x7c,     // (read) end of sample flag for each channel
    EFB         = 0x0d,     // Echo feedback (signed)
    PMON        = 0x2d,     // Pitch modulation enable flags
    NON         = 0x3d,     // Noise enable flags
    EON         = 0x4d,     // Echo enable flags
    DIR         = 0x5d,     // Sample table address (page number (addr / 0x100))
    ESA         = 0x6d,     // Start of echo memory (page number (addr / 0x100))
    EDL         = 0x7d,     // Echo delay time

    // Echo filter coefficients
    C0          = 0x0f,
    C1          = 0x1f,
    C2          = 0x2f,
    C3          = 0x3f,
    C4          = 0x4f,
    C5          = 0x5f,
    C6          = 0x6f,
    C7          = 0x7f,
};


// DSP address = `0x10 * voice + VoiceDspAddr`
enum VoiceDspAddr : u8 {
    VOL_L       = 0x0,      // Left channel volume (signed)
    VOL_R       = 0x1,      // Right channel volume (signed)
    PITCH_L     = 0x2,      // Sample pitch low byte
    PITCH_H     = 0x3,      // Sample pitch high byte (6 bits)
    SCRN        = 0x4,      // Sample source
    ADSR1       = 0x5,      // ADSR settings
    ADSR2       = 0x6,      // ADSR settings
    GAIN        = 0x7,      // Gain settings

    ENVX        = 0x8,      // Read 7 bit ASDR/GAIN envelope
    OUTX        = 0x9,      // Read signed 8 bit current sample value
};


// DSP constants
namespace dsp {
    let FLG__SOFT_RESET         = 0x80;
    let FLG__MUTE_ALL           = 0x40;
    let FLG__ECHO_DISABLE       = 0x20;
    let FLG__NOISE_FREQ_MASK    = 0x1f;


    let ADSR1_ENABLE_BIT = 7;
}


// S-SMP registers
namespace smp {
    // 0xf0 is an undocumented test register

    extern writeonly    control             @ 0xf1 : u8;

    extern var          dsp_addr            @ 0xf2 : u8;
    extern var          dsp_data            @ 0xf3 : u8;

    extern const        io_port_in_0        @ 0xf4 : u8;
    extern const        io_port_in_1        @ 0xf5 : u8;
    extern const        io_port_in_2        @ 0xf6 : u8;
    extern const        io_port_in_3        @ 0xf7 : u8;

    extern const        io_port_in_23       @ 0xf6 : u16;

    extern writeonly    io_port_out_0       @ 0xf4 : u8;
    extern writeonly    io_port_out_1       @ 0xf5 : u8;
    extern writeonly    io_port_out_2       @ 0xf6 : u8;
    extern writeonly    io_port_out_3       @ 0xf7 : u8;

    extern writeonly    io_port_out_23      @ 0xf6 : u16;


    extern writeonly    timer_0             @ 0xfa : u8;
    extern writeonly    timer_1             @ 0xfb : u8;
    extern writeonly    timer_2             @ 0xfc : u8;

    extern const        counter_0           @ 0xfd : u8;
    extern const        counter_1           @ 0xfe : u8;
    extern const        counter_2           @ 0xff : u8;


    extern var          dsp_addr_and_data   @ 0xf2 : u16;


    let CONTROL__ENABLE_TIMER_0 = 1 << 0;
    let CONTROL__ENABLE_TIMER_1 = 1 << 1;
    let CONTROL__ENABLE_TIMER_2 = 1 << 2;
    let CONTROL__RESET_PORTS_01 = 1 << 4;
    let CONTROL__RESET_PORTS_23 = 1 << 5;
    let CONTROL__ENABLE_IPL     = 1 << 7;
}


