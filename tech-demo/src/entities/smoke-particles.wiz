// Copyright (c) 2022, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.

import "../memmap";

import "engine/entity_api";
import "_base";

import "gen/enums";
import "gen/entities";


// ::TODO add a generic particle entity::


namespace entities {
namespace smoke_particles {


in code {


// Transforms an entity into a smoke particle.
//
// ASSUMES: entityId is an active entity.
//
// Always returns true.
//
// DB = 0x7e
#[mem8, idx8]
func change_to_smoke_entity(entityId : u8 in y, animation : u8 in x) {

    // I can change the MS animation before the MS table addresses are set
    // because the change animation functions do not immediately change animation state.
    if x >= init_parameter.none as u8 {
        entities.stop_ms_animation(y);
    }
    else {
        entities.set_ms_animation_x(y, x);

        entities.queue_sound_effect(sound_effects.enemy_poof);
    }

    // Do not kill the entity on the next frame
    SoA.health[y] = a = 1;

    mem16();
    #[mem16] {
        (&SoA.process_function[0] as *u16)[unaligned y] = aa = &process as u16;
    }
    mem8();

    ^return change_ms_frameset(y, EntityTypes.smoke_particles);
}



// Entity init routine.
//
// Called when the entity is spawned
//
// DB = 0x7e
#[mem8, idx8]
func init(entityId : u8 in y, parameter : u8 in x) {
    if x >= init_parameter.none as u8 {
        entities.stop_ms_animation(y);
    }
    else {
        entities.set_ms_animation_x(y, x);
    }
}



// Entity process routine
//
// Called once per frame.
//
// DB = 0x7e
#[mem8, idx8]
func process(entityId : u8 in y) {
    carry = entities.is_ms_non_looping_animation_running(y);
    if !carry {
        SoA.health[unaligned y] = a = 0;
    }
}

}


}
}

