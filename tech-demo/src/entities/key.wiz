// Copyright (c) 2022, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.

import "../memmap";

import "engine/entity_api";
import "_base";

import "../gamestate";

import "gen/enums";


namespace entities {

// NOTE: The key entity uses the tile hitbox to preform an aabb-point player-key collision test
namespace key {

in wram7e {

// The dungeon flag id for the key
var SoA_dungeonFlag : [ u8 ; SoA.BA_SIZE ] in SoA.var_0_l;

}


in code {


// Entity init routine.
//
// Called when the entity is spawned.
//
// Parameter: dungeon flag for the key
//
// DB = 0x7e
#[mem8, idx8]
func init(entityId : u8 in y, parameter : u8 in x) {

    SoA_dungeonFlag[y] = a = x;

    zero = is_dungeon_flag_clear(x);
    if !zero {
        // Key has already been collected
        SoA.health[y] = a = 0;
    }
}




// Entity process routine
//
// Called once per frame.
//
// DB = 0x7e
#[mem8, idx8]
func process(entityId : u8 in y) {
    a = SoA.health[y];
    if !zero {
        // Key has not been collected

        a = SoA.zPos[y];
        if !zero {
            // Key is not on the ground
            // Drop key until it hits the ground
            a--;
            SoA.zPos[y] = a;
            if zero {
                queue_sound_effect(sound_effects.key_hits_ground);
            }
        }
        else {
            // Key is on the ground (and can be collected)
            // Test if the player's position is inside the tile hitbox
            a = SoA.xPos_px[y] - SoA.tileHitbox_halfWidth[y];
            if !carry { a = 0; }
            if a < player.xPos.px {

                a = SoA.xPos_px[y] + SoA.tileHitbox_halfWidth[y];
                if carry { a = 0xff; }
                if a >= player.xPos.px {

                    a = SoA.yPos_px[y] - SoA.tileHitbox_halfHeight[y];
                    if !carry { a = 0; }
                    if a < player.yPos.px {

                        a = SoA.yPos_px[y] + SoA.tileHitbox_halfHeight[y];
                        if carry { a = 0xff; }
                        if a >= player.yPos.px {
                            // Player has touched the key

                            // despawn key
                            x = y;
                            SoA.health[x] = 0;

                            set_dungeon_flag(SoA_dungeonFlag[y]);

                            increment_key_count();
                            // Y is not entityId.

                            queue_sound_effect(sound_effects.collect_item);

                            // ::TODO spawn collected key particle::

                            return;
                        }
                    }
                }
            }
        }
    }
}

}


}
}

