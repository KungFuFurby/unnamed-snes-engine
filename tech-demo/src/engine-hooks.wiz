// Copyright (c) 2023, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.

import "player";
import "ui";
import "joypad";
import "rng";

import "gen/enums";
import "gen/ms-drawing-functions";

import "engine/audio";
import "engine/entity_api";
import "engine/game/gamestate";
import "engine/resources/resources";

// ::TODO remove::
import "engine/game/dungeon";


namespace engine_hooks {


// WaitFrame
// =========


// Vertical blank hook.
//
// Called by `wait_frame()`.
//
// MUST NOT modify zpTmp variables.
//
// DB = 0x80
#[mem8, idx16]
inline func wait_frame__vblank__inline() {
    ui.transfer_buffer__vblank();

    metasprites.dynamic_tiles.transfer_Player_tiles__vblank__inline(player.dynamicMsFrameAddr);
}



// After Vertical-Blank hook.
//
// Called by `wait_frame()`, after the screen is re-enabled.
//
// MUST NOT modify zpTmp variables.
//
// DB = 0x80
#[mem16, idx16]
inline func wait_frame__after_vblank__mem16_idx16__inline() {
    rng.increment_rng();
}



// After Vertical-Blank hook.
//
// Called by `wait_frame()`, after the screen is re-enabled.
//
// MUST NOT modify zpTmp variables.
//
// DB = 0x80
#[mem8, idx8]
inline func wait_frame__after_vblank__mem8_idx8__inline() {
    joypad.update_state__inline();
}


// Textbox
// =======

const joypad_pressed @ &joypad.pressed : u16;
const joypad_pressed_l @ &<:joypad.pressed : u8;
const joypad_pressed_h @ &>:joypad.pressed : u8;



// GameState
// =========

// Called by `gamestate.new_game()`.
//
// DB = 0x7e
#[mem8, idx8]
inline func gamestate__new_game__inline() {
    player.new_player_gamestate__inline();
}


// Called by `gamestate.continue_game()`.
//
// DB = 0x7e
#[mem8, idx8]
inline func gamestate__continue_game__inline() {
    // ::HACK Hardcoded checkpoint (just before the boss)::
    // ::TODO create some kind of checkpoint system::

    // Load the default room of dungeon 0
    gamestate.data.playerPosition.dungeon = a = 0xff;

    player.continue_player_gamestate__inline();
}


// Save the player state to the gamestate.
//
// Called by `gamestate.backup_gamestate()`.
//
// DB = 0x7e
#[mem8, idx8]
inline func gamestate__save_player_state__inline() {
    player.save_player_state__inline();
}



// Room Loading
// ============

// Return the player state byte to store in gamestate data and RoomToLoad.
//
// DB = 0x7e
#[mem8, idx8]
let get_roomtoload_player_state__inline = player.get_roomtoload_player_state__inline;


// Return the direction byte to store in gamestate data and RoomToLoad.
//
// DB = 0x7e
#[mem8, idx8]
let get_roomtoload_player_direction__inline = player.get_roomtoload_player_direction__inline;


// Initialise the player entity's state and direction.
//
// Called on dungeon load, after the room has been loaded into memory.
//
// Arguments are the values returned by `get_roomtoload_player_state__inline()`
// and `get_roomtoload_player_direction__inline()`.
//
// DB = 0x7e
#[mem8, idx8]
let dungeon_loaded__restore_player_state_and_direction__inline = player.dungeon_loaded__restore_player_state_and_direction__inline;


// Reset player MetaSprites.
//
// Called on dungeon load, just before fade-in.
//
// DB = 0x7e
#[mem8, idx8]
inline func init_player_metasprites__inline() {
    player.init_metasprites();
}



// Room Transitions
// ================


// Setup the PPU while the screen is disabled.
//
// DB = 0x80
#[mem8, idx16]
inline func load_dungeon__setup_ppu__forceblank() {
    ui.setup_ppu__forceblank();
}



// Initialize subsystems after the PPU is setup.
//
// Called after `room_transitions__setup_ppu__forceblank()`.
//
// DB = 0x7e
#[mem8, idx8]
inline func load_dungeon__init() {
    // Reset and redraw the UI
    ui.init();

    // ::TODO move into engine::
    a = dungeon.dungeonData.song;
    if a < resources.N_SONGS {
        audio.load_song_if_changed(dungeon.dungeonData.song as resources.songs);
    }
}



// Initialise the player subsystem.
//
// DB = 0x7e
#[mem8, idx8]
inline func room_transitions__reset_player__inline() {
    player.init();
}



// Called after a room backup has been loaded into memory during a scrolling room transition rollback.
//
// DB = 0x7e
#[mem8, idx8]
inline func room_transitions__scrolling_room_transition_rollback__inline() {
    // Allow the player to escape any entity that may be in front of the player after a rollback.
    // Minimises the odds of an entity knocking the player back into the invalid room (immediately after rollback)
    player.zero_velocity();
    player.set_iframes_after_room_transition_rollback();
}

}

