// Copyright (c) 2022, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.

import "../memmap";
import "engine/registers";

import "engine/audio";
import "engine/gamemodes";
import "engine/textbox";
import "engine/wait-frame";
import "engine/common/reset";
import "engine/game/gamestate";
import "engine/resources/resources";
import "engine/resources/palette";

import "../joypad";

import "gen/enums";


namespace gamemodes {
namespace game_over {


let MIN_HEALTH_ON_RESTART_ROOM = 6;


let CURSOR_X_POS = 95;
let CURSOR_Y_POS = 127;


enum MenuItem : u8 {
    CONTINUE,
    RESTART_ROOM,
    TITLE_SCREEN,
    SHOW_CREDITS,
};

let N_MENU_ITEMS = 4;

in rodata0 {
    const Text = "\x03 Continue\n"
               ~ "\x04 Restart Room\n"
               ~ "\x05 Quit\n"
               ~ "\x06 Quit and show credits\0";
}


in code {


// Game Over GameMode
//
// DB = 0x7e
#[mem8, idx8]
func exec() {

    wait_one_second();

    wait_multiple_frames_and_fadeout();

    idx16();
    #[idx16] {
        push16(0x7e80);
        data_bank = pop8();
    // DB = 0x80

        setup_ppu();

        data_bank = pop8();
    // DB = 0x7e

        textbox.print_textbox(#:far &Text, &Text as u16);

        wait_multiple_frames_and_fadein();

        a = textbox.print_textbox_and_wait__start(a = #:far &Text, xx = &Text as u16);
    }
    mem8_idx8();

    if a < MenuItem.TITLE_SCREEN as u8 {
        // restarts the gameloop

        if a == MenuItem.RESTART_ROOM as u8 {
            // Restart gamestate (which will load the gamestate backup if it exists)
            gamestate.init();

            // Increment health (if it is too low)
            a = gamestate.data.playerState.health;
            if a < MIN_HEALTH_ON_RESTART_ROOM {
                gamestate.data.playerState.health = a = MIN_HEALTH_ON_RESTART_ROOM;
            }
        }
        else {
            gamestate.continue_game();
        }

        set_next_game_mode_to_room_transition(RoomTransitions.fadein_reset_player);
    }
    else {
        // Switch game mode
        if a == MenuItem.SHOW_CREDITS as u8 {
            a = GameModes.CREDITS as u8;
        }
        else {
            a = GameModes.TITLE_SCREEN as u8;
        }
        // A = GameModes
        set_next_game_mode(a as GameModes);
    }

    ^return audio.queue_sound_effect(sound_effects.menu_select);
}



// Setup the PPU
//
// DB = 0x80
#[mem8, idx16]
inline func setup_ppu() {
    // ::TODO create some kind of system for setting PPU registers::

    reset_registers();
    textbox.setup_ppu__forceblank();

    // ::TODO move elsewhere::
    mem16();
    #[mem16] {
        bg1_scrollX = 0;
        bg1_scrollY = 0;
    }
    mem8();

    BGMODE = a = BGMODE_MODE_0;
    OBJSEL = a = (VRAM_OBJ_WADDR / OBJSEL_BASE_WALIGN) | OBJSEL_SIZE_8_16;
    BG1SC = a = ((VRAM_BG1_MAP_WADDR / BGxSC_BASE_WALIGN) << BGxSC_BASE_SHIFT) | BGxSC_MAP_64x32;
    BG12NBA = a = ((VRAM_BG1_TILES_WADDR / BG12NBA_WALIGN) << BG12NBA_BG1_SHIFT);
    BG3SC = a = ((VRAM_BG3_MAP_WADDR / BGxSC_BASE_WALIGN) << BGxSC_BASE_SHIFT) | BGxSC_MAP_32x32;
    BG34NBA = a = ((VRAM_BG3_TILES_WADDR / BG34NBA_WALIGN) << BG34NBA_BG3_SHIFT);
    TM = a = TM_BG1 | TM_BG3;

    resources.load_bg_image_resource_into_vram(resources.bg_images.game_over, VRAM_BG1_MAP_WADDR, VRAM_BG1_TILES_WADDR);
    palette.load_palette__forceblank(resources.palettes.game_over);
}

}

}
}

