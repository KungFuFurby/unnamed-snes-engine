// Copyright (c) 2023, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.

import "../memmap";
import "engine/registers";
import "engine/common/reset";

import "engine/audio";
import "engine/gamemodes";
import "engine/textbox";
import "engine/wait-frame";
import "engine/common/reset";
import "engine/resources/resources";

import "../joypad";

import "gen/enums";


namespace gamemodes {
namespace sound_test {


in code {

enum Options : u8 {
    PLAY_SFX,
    SFX_PAN,
    PLAY_SONG,
    QUIT,
};
let N_OPTIONS = 4;

in rodata0 {
    const Text = "Sound Text\n"
               ~ "  \x03 Play SFX:     \xc2\xff\n"
               ~ "  \x04 SFX PAN:      \xc2\xfe\n"
               ~ "  \x05 Play Song:    n/a\n"
               ~ "  \x06 Quit\n";
}



// Sound test screen
//
// DB = 0x7e
#[mem8, idx8]
func exec() {

    wait_multiple_frames_and_fadeout();

    idx16();
    #[idx16] {
        push16(0x7e80);
        data_bank = pop8();
    // DB = 0x80

        setup_ppu__inline();

        data_bank = pop8();
    // DB = 0x7e

    }
    mem8_idx8();

    textbox.setup_textbox(5, 12);

    wait_frame_and_change_brightness(15);

    process__inline();


    set_next_game_mode(GameModes.TITLE_SCREEN);
}



// DB = 0x7e
#[mem8, idx8]
inline func process__inline() {
var _menuOption : u8 in textbox.selectedMenuItem;
var _sfxId @ &textbox.firstU16parameter : u8;
var _sfxPan @ &textbox.secondU16parameter : u8;

let JOYH_CONFIRM = joypad.JOYH.B | joypad.JOYH.Y | joypad.JOYH.START;

    _menuOption = 0;
    _sfxId = 0;
    _sfxPan = y = audio.CENTER_PAN;

    ^while true {
        // ::TODO check if common data has changed and reload it::

        x = _menuOption;
        a = joypad.pressed_h;
        if a & JOYH_CONFIRM != 0 {
            if x == Options.PLAY_SFX as u8 || x == Options.SFX_PAN as u8 {
                audio.queue_panned_sound_effect(_sfxId as sound_effects, _sfxPan);
            }
            else if x == Options.PLAY_SONG as u8 {
                // ::TODO implement::
            }
            else {
                break;
            }
        }

        x = _menuOption;
        a = joypad.pressed_h;
        if a & joypad.JOYH.DOWN != 0 {
            x++;
            if x >= N_OPTIONS {
                x = 0;
            }
        }
        else if a & joypad.JOYH.UP != 0 {
            x--;
            if negative {
                x = N_OPTIONS - 1;
            }
        }
        _menuOption = x;

        if x == Options.PLAY_SFX as u8 {
            y = _sfxId;

            a = joypad.pressed_h;
            if a & joypad.JOYH.LEFT != 0 {
                y--;
                if y == -1 as u8 {
                    y = 0;
                }
            }
            else if a & joypad.JOYH.RIGHT != 0 {
                y++;
                if y >= N_SOUND_EFFECTS {
                    y = N_SOUND_EFFECTS;
                }
            }
            _sfxId = y;
        }
        else if x == Options.SFX_PAN as u8 {
            y = _sfxPan;

            a = joypad.current_h;
            if a & joypad.JOYH.LEFT != 0 {
                y--;
                y--;
                if negative {
                    y = 0;
                }
            }
            else if a & joypad.JOYH.RIGHT != 0 {
                y++;
                y++;
                if y >= audio.MAX_PAN {
                    y = audio.MAX_PAN;
                }
            }
            _sfxPan = y;
        }

        idx16();
        #[idx16] {
            textbox.print_textbox(#:far &Text, &Text as u16);
        }
        mem8_idx8();

        wait_frame();
    }
}



// DB = 0x80
#[mem8, idx16]
inline func setup_ppu__inline() {
    // ::TODO create some kind of system for setting PPU registers::

    reset_registers();
    textbox.setup_ppu__forceblank();

    BGMODE = a = BGMODE_MODE_0;
    BG3SC = a = ((VRAM_BG3_MAP_WADDR / BGxSC_BASE_WALIGN) << BGxSC_BASE_SHIFT) | BGxSC_MAP_32x32;
    BG34NBA = a = ((VRAM_BG3_TILES_WADDR / BG34NBA_WALIGN) << BG34NBA_BG3_SHIFT);
    TM = a = TM_BG3;

    resources.load_bg_image_resource_into_vram(resources.bg_images.game_over, VRAM_BG1_MAP_WADDR, VRAM_BG1_TILES_WADDR);

    // Manually load textbox palette
    // ::TODO add palettes to the resources subsystem::
    CGADD = a = 64;

    a = 32 * 2;
    do {
        CGDATA = 0;
        a--;
    } while !zero;

    CGADD = a = 69;
    CGDATA = 0;
    CGDATA = a = 16 << 2;

    CGADD = a = 71;
    a = 0xff;
    CGDATA = a;
    CGDATA = a;

    CGADD = a = 75;
    CGDATA = a = 8;
    CGDATA = a = 31 << 2 | 1;
}

}

}
}

