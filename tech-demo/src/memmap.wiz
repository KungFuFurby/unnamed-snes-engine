// Copyright (c) 2021, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.

import "engine/interrupts";
import "engine/common/reset";


config {
    map_mode = "lorom",
    expansion_type = "none",
    fastrom = false,
    region = "ntsc",

    // ::TODO give this game a name::
    title = "UNNAMED TECH DEMO",
    version = 1,
}


bank code       @ 0x808000 : [constdata; 0x8000];
bank rodata0    @ 0x818000 : [constdata; 0x8000];

bank _resources @ 0x828000 : [constdata; 0x8000 * 6];

// NOTE: *_roomstate variables will be saved on every room change
//       and may be restored if the player backtracks into the previous room.

bank zeropage                   @ 0x000000 : [vardata;     0x100];
bank lowram_roomstate           @ 0x7e0100 : [vardata;     0x100];
bank lowram                     @ 0x7e0200 : [vardata;    0x1d80];
bank stack                      @ 0x7e1f80 : [vardata;      0x80];
bank wram7e_roomstate           @ 0x7e2000 : [vardata;     0x800];
bank wram7e                     @ 0x7e2800 : [vardata;    0xd800];
bank wram7f                     @ 0x7f0000 : [vardata;    0xff00];
bank wram7f_gamestatebackup     @ 0x7fff00 : [vardata;     0x100];


let MEMMAP_ROOMSTATE_LOWRAM      = 0x7e0100;
let MEMMAP_ROOMSTATE_LOWRAM_SIZE =    0x100;

let MEMMAP_ROOMSTATE_WRAM7E      = 0x7e2000;
let MEMMAP_ROOMSTATE_WRAM7E_SIZE =    0x800;

// Number of bytes to clear, within the second WRAM bank, on reset.
// This will cause the gamestate backup to survive resets
let MEMMAP_WRAM7F_BYTES_TO_RESET =   0xff00;


let STACK_TOP = 0x1fff;
let STACK_BOTTOM = 0x1f80;


in code {

// Define interrupt vectors

const @ 0x80ffe4 = invalid_handler; // native cop
const @ 0x80ffe6 = break_handler;   // native brk
const @ 0x80ffe8 = invalid_handler; // native abort
const @ 0x80ffea = nmi_handler;     // native nmi
const @ 0x80ffee = irq_handler;     // native irq

const @ 0x80FFF4 = invalid_handler; // emu cop
const @ 0x80FFF8 = invalid_handler; // emu abort
const @ 0x80FFFA = invalid_handler; // emu nmi
const @ 0x80FFFC = __reset;         // emu reset
const @ 0x80FFFE = invalid_handler; // emu irq

}

in zeropage {
    var zpTmp_byte_0 : u8;
    var zpTmp_byte_1 : u8;
    var zpTmp_byte_2 : u8;
    var zpTmp_byte_3 : u8;
    var zpTmp_byte_4 : u8;
    var zpTmp_byte_5 : u8;

    var zpTmp_word_0 : u16;
    var zpTmp_word_1 : u16;

    var zpTmp_farPtr : far *u8;
}


// VRAM Map
// ========

let VRAM_BG1_MAP_WADDR   = 0x0000;  // 64x32
let VRAM_BG2_MAP_WADDR   = 0x0800;  // 64x32

let VRAM_BG3_TILES_WADDR = 0x1000;
let VRAM_BG3_MAP_WADDR   = 0x1c00;  // 32x32

let VRAM_BG1_TILES_WADDR = 0x2000;
let VRAM_BG2_TILES_WADDR = 0x2000;

let VRAM_OBJ_WADDR       = 0x6000;


