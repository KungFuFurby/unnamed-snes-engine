// Copyright (c) 2021-2022, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.

import "src/memmap";
import "../registers";

import "room";
import "dungeon";
import "gamestate";
import "metasprites";
import "metatiles";
import "second-layer";

import "../gamemodes";

import "entityloop";
import "../wait-frame";
import "../entity_api";
import "../room-events-api";

import "src/engine-hooks";

import "gen/enums";


namespace room_transitions {


let PLAYER_MAP_TRANSITION_END_POS = 3;


// Value MUST BE even
let N_TRANSITION_FRAMES_BEFORE_SOLID_CHECK = 14;


let PLAYER_XPOS_AFTER_LEFT_TRANSITION  = DISPLAY_WIDTH - 1 - PLAYER_MAP_TRANSITION_END_POS;
let PLAYER_XPOS_AFTER_RIGHT_TRANSITION = PLAYER_MAP_TRANSITION_END_POS;

let PLAYER_YPOS_AFTER_UP_TRANSITION    = DISPLAY_HEIGHT - 1 - PLAYER_MAP_TRANSITION_END_POS;
let PLAYER_YPOS_AFTER_DOWN_TRANSITION  = PLAYER_MAP_TRANSITION_END_POS;



enum ScrollDirection : u8 {
    UP    = 0,
    DOWN  = 2,
    LEFT  = 4,
    RIGHT = 6,
    ROLLBACK_UP    =  8,
    ROLLBACK_DOWN  = 10,
    ROLLBACK_LEFT  = 12,
    ROLLBACK_RIGHT = 14,
}



// Sprite list.
//
// Contains the position and MetaSprite information for all entities in the previous room and the new room.
//
// NOTE: xPos/yPos is offset by CAMERA_ORIGIN.
//
// Entry 0 is always the player's MetaSprite.
//
// (Structure of Word Arrays)
namespace SpriteList {
    in lowram {
        // Metasprite draw function.
        //
        // DB = 0x7e
        #[mem8, idx8]
        var ms_draw_function : [func(msFrame : u16 in yy, xPos : u16 in metasprites.xPos, yPos : u16 in metasprites.yPos) ; N_SPRITE_LIST_ELEMENTS];
    }

    in wram7e {
        var xPos : [u16 ; N_SPRITE_LIST_ELEMENTS];
        var yPos : [u16 ; N_SPRITE_LIST_ELEMENTS];
        var zPos : [u16 ; N_SPRITE_LIST_ELEMENTS];
        var msFrameAddr : [u16 ; N_SPRITE_LIST_ELEMENTS];

        var _shadowSizeAndBlank : [ entities._u8pair ; N_SPRITE_LIST_ELEMENTS];
            var shadowSize @ &_shadowSizeAndBlank[0].first : [ metasprites.ShadowSize ; N_SPRITE_LIST_ELEMENTS * 2 - 1];
    }
}


let PLAYER_ID = 0;

let N_SPRITE_LIST_ELEMENTS = entities.N_ENTITIES + N_ENTITIES_IN_ROOM_DATA + 2;

let LAST_SPRITE_LIST_INDEX = (N_SPRITE_LIST_ELEMENTS - 1) * 2;


let CAMERA_ORIGIN = 0x100;


// Room transition code can directly modify the sprite's position.
in wram7e {
    var spriteList_player_xPos : u16 in SpriteList.xPos[PLAYER_ID];
    var spriteList_player_yPos : u16 in SpriteList.yPos[PLAYER_ID];
}


in wram7e {

    // The past-the-end index of the sprite list.
    //
    // Equivalent to a c++ stl end() iterator.
    // Equal to `size of list * 2`.
    //
    // (byte index)
    var spriteListEnd : u8;

    // Current index position inside the `SpriteList`.
    // (word index)
    var spriteListIndex : u16;


    // SpriteList camera position
    // (2x uint16)
    var camera_x : u16;
    var camera_y : u16;

        var camera_x_l : u8 in <:camera_x;
        var camera_y_l : u8 in <:camera_y;

        var camera_x_h : u8 in >:camera_x;
        var camera_y_h : u8 in >:camera_y;


    // The scroll direction of the current room transition.
    var scrollDirection : ScrollDirection;

    // Countdown timer in a scrolling room transition until the player's tile is checked for solidity.
    //
    // (countdown display frame timer)
    var countdownToSolidCheck : u8;
}



in code {

let load_room__fadein = _fadein_load_dungeon_and_room as func();


// Room Transitions
// ================


// Initialize the player and gameloop, fadeout the screen and start the gameloop
//
// REQUIRES: gamestate loaded or restarted
//
// ASSUMES: currentRoom and player position are valid.
//
// DB = 0x7e
#[fallthrough, mem8, idx8]
func fadein_reset_player() {
    wait_multiple_frames_and_fadeout();


    // Player cannot be initialised in a normal room transition.
    // No easy way to save/restore player gamestate when the Tileset or MetaSprites change
    // (especially if the fadein/fadeout room transition was invalid and had to be rolled back)
    // Also causes the player's MetaSprite frame to be reset in a scrolling room transition.
    engine_hooks.room_transitions__reset_player__inline();

    roomToLoad.roomPos_x = a = gamestate.data.currentRoom_x;
    roomToLoad.roomPos_y = a = gamestate.data.currentRoom_y;
    roomToLoad.playerPos_x = a = gamestate.data.playerState.xPos;
    roomToLoad.playerPos_y = a = gamestate.data.playerState.yPos;


// Fallthrough
}


// Fadeout the screen, load resources, load roomToLoad, fadein the screen.
//
// DB = 0x7e
#[mem8, idx8]
func _fadein_load_dungeon_and_room(roomToLoad : RoomToLoad in roomToLoad) {
    // ::TODO select dungeon id::
    dungeon.load_dungeon_and_room(0, roomToLoad);

    wait_multiple_frames_and_fadein();

    carry = _test_player_position_is_valid();
    if !carry {
        // Player is in an invalid position.
        wait_one_second();

        // ::TODO do something if the position is invalid a second time::
        // ::TODO do something if backup is invalid::
        dungeon.load_dungeon_and_restore_roomstate();
        wait_multiple_frames_and_fadein();
    }


    // The player is in a valid position.  Make a backup of the game state.
    gamestate.backup_gamestate();

    set_next_game_mode(GameModes.GAME_LOOP);
}



// Process a scrolling room transition.
//
// `player.xPos.px` and `player.yPos.px` MUST contain the position of the
// player AFTER the room transition ends and play resumes (the variables might be used by an
// entity init routine)
//
// Returns true if the transition completed successfully.
// Returns false if there is a solid tile at the player's new position.
//
// ASSUMES: _scrollDirection is valid
//
// If this function returns false, then `_scrolling_room_transition__rollback` MUST be called.
//
// DB = 0x7e
#[mem8, idx8]
func _scrolling_room_transition(_scrollDirection : ScrollDirection in x,
                                playerX : u8 in a, playerY : u8 in y) : bool in carry {

    roomToLoad.playerPos_x = a;
    roomToLoad.playerPos_y = y;

    scrollDirection = x as ScrollDirection;
    roomToLoad.roomPos_x = a = gamestate.data.currentRoom_x + ScrollDirection_RoomOffset_x[x] as u8;
    roomToLoad.roomPos_y = a = gamestate.data.currentRoom_y + ScrollDirection_RoomOffset_y[x] as u8;

    // Check if a fadeout transition was requested
    a = roomstate.forceFadeoutRoomTransition;
    if !zero {
        _fadein_load_dungeon_and_room(roomToLoad);
        return true;
    }

    _reset_camera();
    _clear_sprite_list();
    _add_entities_to_sprite_list();

    dungeon.load_room__inline(roomToLoad);

    _add_entities_to_sprite_list_with_offset(scrollDirection);
    _sprite_list_set_player_with_offset(scrollDirection);

    second_layer.start_room_transition();

    x = scrollDirection as u8;
    MetaTileTransition_Setup_FunctionTable[unaligned x]();

    countdownToSolidCheck = a = N_TRANSITION_FRAMES_BEFORE_SOLID_CHECK;

    return _scrolling_room_transition__loop();
}


const MetaTileTransition_Setup_FunctionTable : [func ; 8] = [
    metatiles.transitions.scroll_up__setup,
    metatiles.transitions.scroll_down__setup,
    metatiles.transitions.scroll_left__setup,
    metatiles.transitions.scroll_right__setup,
    _invalid_setup_function,
    _invalid_setup_function,
    _invalid_setup_function,
    _invalid_setup_function,
];

const MetaTileTransition_Process_FunctionTable : [func : bool in carry ; 8] = [
    metatiles.transitions.scroll_up__process,
    metatiles.transitions.scroll_down__process,
    metatiles.transitions.scroll_left__process,
    metatiles.transitions.scroll_right__process,

    metatiles.transitions.scroll_up__rollback,
    metatiles.transitions.scroll_down__rollback,
    metatiles.transitions.scroll_left__rollback,
    metatiles.transitions.scroll_right__rollback,
];



// Process a scrolling room transition.
//
// ASSUMES: Transition setup by `_scrolling_room_transition` or `_scrolling_room_transition__rollback`.
//
// Returns true if the transition completed successfully.
// Returns false if there is a solid tile at the player's new position.
//
// If this function returns false, then `_scrolling_room_transition__rollback` MUST be called.
//
// DB = 0x7e
#[mem8, idx8]
func _scrolling_room_transition__loop() : bool in carry {
    do {
        wait_frame();

        x = scrollDirection as u8;

        countdownToSolidCheck--;
        if zero {
            carry = _test_player_position_is_valid();
            if !carry {
                // Tile is solid - cannot place player here
                wait_one_second();

                return false;
            }
        }

        move_camera_and_draw_sprite_list();

        second_layer.process_room_transition__inline();

        x = scrollDirection as u8;
        MetaTileTransition_Process_FunctionTable[unaligned x]();
    }
    while !carry;


    // Room transition was successful.  Make a backup of the game state.
    gamestate.backup_gamestate();

    set_next_game_mode(GameModes.GAME_LOOP);

    return true;
}



// Test if the player is in a valid location.
//
// Used to determine if the room transition should be rolled back.
//
// DB = 0x7e
func _test_player_position_is_valid() : bool in carry {
    negative = metatiles.test_if_player_touches_a_solid_tile();
    if negative {
        // Tile is solid

        // Check if it is a doorway tile
        zero = metatiles.test_if_player_touches_a_doorway_tile();
        if !zero {
            return false;
        }
    }

    // Tile is not solid, return true
    return true;
}



// Rollback a scrolling room transition.
//
// `_scrollDirection_` must be the opposite of the initial ScrollDirection.
//
// `playerXpos` and `playerYpos` is the expected location of the player AFTER the room transition is rolled back.
//
// DB = 0x7e
#[mem8, idx8]
func _scrolling_room_transition__rollback(_scrollDirection_ : u8 in a, playerXpos : u8 in x, playerYpos : u8 in y) {

    scrollDirection = a as ScrollDirection;

    push8(x);
    push8(y);

    _clear_sprite_list();
    _add_entities_to_sprite_list();

    dungeon.restore_room_state_from_backup();

    y = pop8();
    x = pop8();
    player.xPos.px = x;
    player.yPos.px = y;

    entityloop.sort_active_entities();

    _add_entities_to_sprite_list_with_offset(scrollDirection);
    _sprite_list_set_player_with_offset(scrollDirection);


    engine_hooks.room_transitions__scrolling_room_transition_rollback__inline();

    second_layer.start_room_transition();

    mem16();
    #[mem16] {
        x = scrollDirection as u8;
        camera_x = aa = camera_x + ScrollDirectionTableX[unaligned x] as u16;
        camera_y = aa = camera_y + ScrollDirectionTableY[unaligned x] as u16;
    }
    mem8();

    ^return _scrolling_room_transition__loop();
}



// Scroll right room transition.
//
// ASSUMES: There is a room to the right of this one.
//
// DB = 0x7e
#[mem8, idx8]
func scroll_right() {
    carry = _scrolling_room_transition(ScrollDirection.RIGHT,
                                       PLAYER_XPOS_AFTER_RIGHT_TRANSITION, player.yPos.px);
    if !carry {
        // Transition failed, rollback room transition
        return _scrolling_room_transition__rollback(ScrollDirection.ROLLBACK_RIGHT as u8,
                                                    PLAYER_XPOS_AFTER_LEFT_TRANSITION, player.yPos.px);
    }
}



// Scroll left room transition.
//
// ASSUMES: There is a room to the left of this one.
//
// DB = 0x7e
#[mem8, idx8]
func scroll_left() {
    carry = _scrolling_room_transition(ScrollDirection.LEFT,
                                       PLAYER_XPOS_AFTER_LEFT_TRANSITION, player.yPos.px);
    if !carry {
        // Transition failed, rollback room transition
        return _scrolling_room_transition__rollback(ScrollDirection.ROLLBACK_LEFT as u8,
                                                    PLAYER_XPOS_AFTER_RIGHT_TRANSITION, player.yPos.px);
    }
}



// Scroll down room transition.
//
// ASSUMES: There is a room below this one.
//
// DB = 0x7e
#[mem8, idx8]
func scroll_down() {
    carry = _scrolling_room_transition(ScrollDirection.DOWN,
                                       player.xPos.px, PLAYER_YPOS_AFTER_DOWN_TRANSITION);
    if !carry {
        // Transition failed, rollback room transition
        ^return _scrolling_room_transition__rollback(ScrollDirection.ROLLBACK_DOWN as u8,
                                                     player.xPos.px, PLAYER_YPOS_AFTER_UP_TRANSITION);
    }
}



// Scroll up room transition.
//
// ASSUMES: There is a room above this one.
//
// DB = 0x7e
#[mem8, idx8]
func scroll_up() {
    carry = _scrolling_room_transition(ScrollDirection.UP,
                                       player.xPos.px, PLAYER_YPOS_AFTER_UP_TRANSITION);
    if !carry {
        // Transition failed, rollback room transition
        ^return _scrolling_room_transition__rollback(ScrollDirection.ROLLBACK_UP as u8,
                                                     player.xPos.px, PLAYER_YPOS_AFTER_DOWN_TRANSITION);
    }
}



// DB = 0x7e
#[mem8, idx8]
func _invalid_setup_function() {
}


// Sprite List
// ===========


// Reset the sprite list camera back to the origin point.
//
// DB = 0x7e
#[mem8, idx8]
func _reset_camera() {
    mem16();
    #[mem16] {
        aa = CAMERA_ORIGIN;
        camera_x = aa;
        camera_y = aa;
    }
    mem8();
}




// Clear the sprite list.
//
// DB = 0x7e
#[mem8, idx8]
inline func _clear_sprite_list() {
    // index 0 is reserved for the player
    spriteListEnd = x = 2;
}



// Add room entities to the sprite list.
//
// DB = 0x7e
#[mem8, idx8]
func _add_entities_to_sprite_list() {

var _activeEntitiesTablePos : u8 in zpTmp_byte_0;

    x = spriteListEnd;

    y = entityloop.numberOfActiveEntities;
    if !zero {
        do {
            y--;
            _activeEntitiesTablePos = y;

            y = a = entityloop.activeEntitiesTable[y];
            if !zero {
                mem16();
                #[mem16] {
                    SpriteList.xPos[unaligned x] = aa = ((&entities.SoA.xPos[0].px as *u16)[unaligned y] & 0xff) + CAMERA_ORIGIN;
                    SpriteList.yPos[unaligned x] = aa = ((&entities.SoA.yPos[0].px as *u16)[unaligned y] & 0xff) + CAMERA_ORIGIN;
                    SpriteList.zPos[unaligned x] = aa = ((&entities.SoA._zPosAndDeathFunction[0].first as *u16)[unaligned y] & 0xff);
                    (&SpriteList.ms_draw_function[0] as *u16)[unaligned x] = aa = entities.SoA.ms_draw_function[unaligned y] as u16;
                    SpriteList.msFrameAddr[unaligned x] = aa = entities.SoA.msFrameAddr[unaligned y];
                    (&SpriteList._shadowSizeAndBlank[0] as *u16)[unaligned x] = aa = (&entities.SoA._shadowSizeAndIsEnemy[0] as *u16)[unaligned y];
                }
                mem8();

                x++;
                x++;
                break if x >= LAST_SPRITE_LIST_INDEX + 1;
            }

            y = _activeEntitiesTablePos;
        } while !zero;
    }
    spriteListEnd = x;
}


// Populate the player's sprite list entry, offsetting the player's position based on the scroll direction.
//
// DB = 0x7e
#[mem8, idx8]
func _sprite_list_set_player_with_offset(sd : ScrollDirection in scrollDirection) {
    mem16();
    #[mem16] {
        x = scrollDirection as u8;

        SpriteList.xPos[PLAYER_ID] = aa = ((&entities.SoA.xPos[0].px as *u16)[PLAYER_ID] & 0xff) + CAMERA_ORIGIN + ScrollDirectionTableX[unaligned x] as u16;
        SpriteList.yPos[PLAYER_ID] = aa = ((&entities.SoA.yPos[0].px as *u16)[PLAYER_ID] & 0xff) + CAMERA_ORIGIN + ScrollDirectionTableY[unaligned x] as u16;
        SpriteList.zPos[PLAYER_ID] = aa = ((&entities.SoA._zPosAndDeathFunction[0].first as *u16)[PLAYER_ID] & 0xff);

        (&SpriteList.ms_draw_function[0] as *u16)[PLAYER_ID] = aa = entities.SoA.ms_draw_function[PLAYER_ID] as u16;
        SpriteList.msFrameAddr[PLAYER_ID] = aa = entities.SoA.msFrameAddr[PLAYER_ID];
        (&SpriteList._shadowSizeAndBlank[0] as *u16)[PLAYER_ID] = aa = (&entities.SoA._shadowSizeAndIsEnemy[0] as *u16)[PLAYER_ID];
    }
    mem8();
}



// Add room entities to the sprite list, offsetting their position based on the scroll direction.
//
// DB = 0x7e
#[mem8, idx8]
func _add_entities_to_sprite_list_with_offset(sd : ScrollDirection in scrollDirection) {

    x = spriteListEnd;
    push8(x);

    _add_entities_to_sprite_list();


    // Add ScrollDirectionTable offset to the new elements added to the sprite list.
    y = pop8();
    x = scrollDirection as u8;

    if y < spriteListEnd {
        mem16();
        #[mem16()] {
            do {
                SpriteList.xPos[unaligned y] = aa = SpriteList.xPos[unaligned y] + ScrollDirectionTableX[unaligned x] as u16;
                SpriteList.yPos[unaligned y] = aa = SpriteList.yPos[unaligned y] + ScrollDirectionTableY[unaligned x] as u16;

                y++;
                y++;
            } while y < spriteListEnd;
        }
        mem8_idx8();
    }
}



// Move spriteList camera based on the scroll direction and draw the sprite list.
//
// DB = 0x7e
#[mem8, idx8]
func move_camera_and_draw_sprite_list() {

    mem16();
    #[mem16] {
        x = scrollDirection as u8;

        camera_x = aa = camera_x + ScrollDirectionVelocityX[unaligned x] as u16;
        camera_y = aa = camera_y + ScrollDirectionVelocityY[unaligned x] as u16;
    }
    mem8();


    return draw_sprite_list();
}



// Draw the sprite list.
//
// DB = 0x7e
#[mem8, idx8]
func draw_sprite_list() {

    idx16();
    #[idx16] {
        metasprites.reset_buffer_and_draw_room_transition_shadows__inline();
    }
    mem8_idx8();


    // Draw MetaSprites
    x = spriteListEnd;
    if !zero {
        do {
            mem16_idx16();
            #[mem16, idx16] {
                xx--;
                xx--;
                spriteListIndex = xx;

                metasprites.xPos = aa = SpriteList.xPos[unaligned xx] - camera_x;
                metasprites.yPos = aa = SpriteList.yPos[unaligned xx] - SpriteList.zPos[unaligned xx] - camera_y;
            }
            mem8();
            #[mem8, idx16] {
                yy = SpriteList.msFrameAddr[unaligned xx];
                SpriteList.ms_draw_function[unaligned xx](yy, metasprites.xPos, metasprites.yPos);
            }
            mem8_idx8();

            // ::ANNOY Cant use `<:` - it changes `spriteListIndex` to a long address
            x = *(&spriteListIndex as *u8);
        } while !zero;
    }


    idx16();
    #[idx16] {
        metasprites.finalize_buffer();
    }
    mem8_idx8();
}

}

in rodata0 {
    // Order MUST Match ScrollDirection
    const _ScrollDirectionTableX : [i16 ; 8 ] = [               0,               0, -DISPLAY_WIDTH,  DISPLAY_WIDTH,               0,                0, -DISPLAY_WIDTH, DISPLAY_WIDTH ];
    const _ScrollDirectionTableY : [i16 ; 8 ] = [ -DISPLAY_HEIGHT,  DISPLAY_HEIGHT,              0,              0,  DISPLAY_HEIGHT,  -DISPLAY_HEIGHT,              0,             0 ];

    let ScrollDirectionTableX = (far&_ScrollDirectionTableX as far *i16);
    let ScrollDirectionTableY = (far&_ScrollDirectionTableY as far *i16);


    let _TS = metatiles.transitions.TRANSITION_SPEED;

    const _ScrollDirectionVelocityX : [i16 ; 8 ] = [    0,    0, -_TS,  _TS,    0,    0,  _TS, -_TS];
    const _ScrollDirectionVelocityY : [i16 ; 8 ] = [ -_TS,  _TS,    0,    0,  _TS, -_TS,    0,    0];

    let ScrollDirectionVelocityX = (far&_ScrollDirectionVelocityX as far *i16);
    let ScrollDirectionVelocityY = (far&_ScrollDirectionVelocityY as far *i16);


    const _ScrollDirection_RoomOffset : [i8 ; 8 * 2] =
        // x   y   x   y   x   y   x   y   x   y   x   y   x   y   x   y
        [  0, -1,  0,  1, -1,  0,  1,  0,  0,  1,  0, -1,  1,  0, -1,  0];

    let ScrollDirection_RoomOffset_x = ((far&_ScrollDirection_RoomOffset as u24 + 0) as far *i8);
    let ScrollDirection_RoomOffset_y = ((far&_ScrollDirection_RoomOffset as u24 + 1) as far *i8);
}

}


