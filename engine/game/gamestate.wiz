// Gamestate variables
//
// Copyright (c) 2022, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.

import "src/memmap";

import "../resources/resources";

import "src/engine-hooks";
import "gen/enums";


in lowram {
    // Number of frames processed.
    // (incremented every `WaitFrame` call)
    //
    // MUST be in the `lowram` bank to work correctly.
    //
    // (u32)
    var frameCounter : u32;

        var frameCounter_lobyte @ &<:frameCounter : u8;

        var frameCounter_loword @ &frameCounter              : u16;
        var frameCounter_hiword @ (&frameCounter as u16 + 2) : u16;
}


namespace gamestate {

typealias PlayerState : engine_hooks.GameState__PlayerState;


// unnamed snes game!
let __SIGNATURE = "USG!";

let SIGNATURE_W0 = (__SIGNATURE[0] as u16) | (__SIGNATURE[1] as u16 << 8);
let SIGNATURE_W1 = (__SIGNATURE[2] as u16) | (__SIGNATURE[3] as u16 << 8);


struct GameStateData {
    // Game state signature
    signature : [u16 ; 2],

    // The checksum of the data
    // Updated whenever the gamestate backup is created.
    checksum : u16,


    // ::TODO add dungron_id::

    // The current room within the dungeon
    currentRoom_x : u8,
    currentRoom_y : u8,

    // The player's state at the start of the room
    // (or when saving, loading or starting a new game)
    playerState : PlayerState,


    // ::TODO remove::
    // The room to load in a non-scrolling room transition.
    //
    // Is not used by scrolling room transition.
    //
    // Will only be read by the ROOM_TRANSITION_FADEOUT and LOAD_ROOM_FADEIN transitions.
    roomToLoad_x : u8,
    roomToLoad_y : u8,

    // The location to place the player in a non-scrolling room transition.
    //
    // NOTE: This value is unused by the scrolling room transitions.
    // (u8 position)
    roomToLoad_xPos : u8,
    roomToLoad_yPos : u8,


    // Game State flags
    // (256 bit bitfield)
    gameFlags : [ u8 ; 256 / 8 ],

    // Number of keys held by the player
    //
    // NOTE: This function should not be modified by game code
    _keyCount : u8,
};


in wram7e_roomstate {
    // game state data MUST be in `wram7e_roomstate` to ensure the game state is rolled back correctly if a room-transition fails.
    var __fardata : GameStateData;
        var data @ &__fardata : GameStateData;
}


in wram7f_gamestatebackup {
    // A backup of the gamestate that exists at the end of WRAM.
    // The backup is saved on every successful room transition
    // Used to restore the game to a known good state on a crash (or reset).
    var gamestateBackup : GameStateData;
}


in code {

// Returns true if the gamestate backup is valid.
//
// DB = 0x7e
#[mem8, idx8]
func init() : bool in carry {
    mem16_idx16();
    #[mem16, idx16] {
        carry = restore_gamestate_backup__inline();
    }
    mem8_idx8();

    if carry {
        return carry;
    }

    // gamestate backup is missing or corrupt.  Start a new game.
    new_game();
    return false;
}



// Reset the gamestate with new-game data.
//
// DB = 0x7e
#[mem8, idx8]
func new_game() {
    // Populate initial player state
    mem16_idx16();
    #[mem16, idx16] {
        // Clear gamestate
        *(&data as *u16) = 0;
        // Parameter order is destination, source
        load_dec_repeat(#:far &__fardata, yy = &data as u16 + 1,
                        #:far &__fardata, xx = &data as u16,
                        aa = sizeof(typeof(data)) - 2);

        // Load initial player state
        load_dec_repeat(#:far &__fardata, yy = &data.playerState as u16,
                        #:far &InitialPlayerState, xx = &InitialPlayerState as u16,
                        aa = sizeof(typeof(data.playerState)) - 1);
        // DB = 0x7e
    }
    mem8_idx8();


    // ::TODO improve how start position is determined::
    x = resources.STARTING_ROOM_X;
    y = resources.STARTING_ROOM_Y;

    data.currentRoom_x = x;
    data.roomToLoad_x = x;
    data.currentRoom_y = y;
    data.roomToLoad_y = y;
}



// Continue current game
//
// Moves player back to the start and resets health.
//
// DB = 0x7e
#[mem8, idx8]
func continue_game() {

    // ::TODO create some kind of checkpoint system::

    engine_hooks.gamestate__continue_game__inline();

    engine_hooks.gamestate__continue_player_gamestate__inline();
}



// Calculate a checksum for the current gamestate.
//
// NOTE: This function does not modify gamestate
//
// DB = 0x7e
#[mem16, idx16]
func calculate_checksum() : u16 in aa {
var _tmp         : u16 in zpTmp_word_0;
var _oldChecksum : u16 in zpTmp_word_1;

    _oldChecksum = xx = data.checksum;


    // A silly little checksum I dreamt up.
    // I have no idea how effective it is.

    // ::TODO do some tests on this checksum::

    // Set checksum to a constant value
    data.checksum = aa = 0x1234;

    _tmp = 0;
    // checksum relies on the carry flag the previous operation
    carry = false;

    xx = sizeof(typeof(data)) - 1;
    do {
        aa = (&data as *u16)[unaligned xx] & 0xff;

        // I am deliberately reusing the carry from the previous operation
        aa +#= _tmp;
        aa <<<<#= 1;    // rol
        aa ^= (1 << 10) | (1 << 3);
        _tmp = aa;

        xx--;
    } while !negative;


    // Restore checksum (keep it unchanged)
    data.checksum = xx = _oldChecksum;

    return aa;
}




// Create a backup of the gamestate
//
// DB = 0x7e
#[mem8, idx8]
func backup_gamestate() {

    engine_hooks.gamestate__save_player_state__inline();


    mem16_idx16();
    #[mem16, idx16] {
        // set signature
        data.signature[0] = aa = SIGNATURE_W0;
        data.signature[1] = aa = SIGNATURE_W1;

        data.checksum = aa = calculate_checksum();

        // Parameter order is destination, source
        load_dec_repeat(#:far &gamestateBackup, yy = &gamestateBackup as u16,
                        #:far &__fardata, xx = &data as u16,
                        aa = sizeof(typeof(data)) - 1);
    // DB = 0x7f
    }
    mem8_idx8();

    push8(a = 0x7e);
    data_bank = pop8();
// DB = 0x7e
}



// Restore gamestate backup.
//
// Returns true if the backup is valid.
//
// NOTE: Clobbers the old gamestate
//
// DB = 0x7e
#[mem16, idx16]
inline func restore_gamestate_backup__inline() : bool in carry {
    // Parameter order is destination, source
    load_dec_repeat(#:far &__fardata, yy = &data as u16,
                    #:far &gamestateBackup, xx = &gamestateBackup as u16,
                    aa = sizeof(typeof(data)) - 1);
// DB = 0x7e

    // Check checksum and signature is correct
    aa = calculate_checksum();
    xx = SIGNATURE_W0;
    yy = SIGNATURE_W1;
    if aa == data.checksum && xx == data.signature[0] && yy == data.signature[1] {
        return true;
    }

    return false;
}




// Returns true if the game flag is clear
//
// DB = 0x7e
#[mem8, idx8]
func is_flag_clear(flag_id : u8 in x) : bool in zero {
    y = a = x >>> 3;
    x = a = x & 7;

    a = data.gameFlags[y] & _BitTable[x];
    return zero;
}


// Returns true if the game flag is clear (without clobbering the Y register)
//
// KEEP: y
//
// DB = 0x7e
#[mem8, idx8]
func is_flag_clear__keep_y(flag_id : u8 in x) : bool in zero {
var _tmp : u8 in zpTmp_byte_0;

    _tmp = y;

    y = a = x >>> 3;
    x = a = x & 7;

    a = data.gameFlags[y];

    y = _tmp;

    a &= _BitTable[x];
    return zero;
}


// DB = 0x7e
#[mem8, idx8]
func set_game_flag(flag_id : u8 in x) {
    y = a = x >>> 3;
    x = a = x & 7;

    data.gameFlags[y] = a = data.gameFlags[y] | _BitTable[x];
}



// KEEP: Y
//
// DB = 0x7e
#[mem8, idx8]
func set_game_flag__keep_y(flag_id : u8 in x) {
var _tmp : u8 in zpTmp_byte_0;

    _tmp = y;

    y = a = x >>> 3;
    x = a = x & 7;

    data.gameFlags[y] = a = data.gameFlags[y] | _BitTable[x];

    y = _tmp;
}



// Increment the key counter
// DB = 0x7e
#[mem8, idx8]
func increment_key_count() {
    x = data._keyCount;
    x++;
    if negative {
        x = 127;
    }
    data._keyCount = x;

    ^return engine_hooks.gamestate__key_count_changed(x);
}



// Decrement the key counter.
//
// Return true if there was a key to decrement.
//
// DB = 0x7e
#[mem8, idx8]
func test_and_decrement_key_count() : bool in carry{
    x = data._keyCount;
    if !zero {
        x--;
        data._keyCount = x;

        engine_hooks.gamestate__key_count_changed(x);
        return true;
    }
    return false;
}


}


in rodata0 {

const __BitTable : [ u8 ; 8 ] = [ 1 << i for let i in 0..7 ];

let _BitTable = far &__BitTable as far *u8;


const InitialPlayerState : PlayerState = engine_hooks.GameState__InitialPlayerState;

}

}

