// Copyright (c) 2022, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.

import "src/memmap";


let N_ENTITIES_IN_ROOM_DATA = 8;

let ROOM_MAP_WIDTH = 16;
let ROOM_MAP_HEIGHT = 14;


enum RoomDataType : u8 {
    NO_ROOM = 0,
    ROOM = 1,
    WARP = 2,
}

// Map data format
// MUST be a multiple of 2 in size.
struct RoomData {
    // Also used to determine if a room is loaded into memory
    dataType: RoomDataType,

    map         : [ u8 ; ROOM_MAP_WIDTH * ROOM_MAP_HEIGHT ],

    // The room event for this room
    // (index into room event function tables)
    roomEventFunction : u8,

    // Room event parameters.
    // The behaviour of these variables depends on `roomEventFunction`.
    roomEventParameters : [u8 ; 4],

    // Second layer callback parameters.
    // The behaviour of these variables depends on the current second-layer callback
    sl_parameters : [u8 ; 2],

    // Entities in the map
    // (Structure of Arrays)
    // If the entity does not spawn then the array elements MUST be 0xff;
    entity_xPos      : [u8 ; N_ENTITIES_IN_ROOM_DATA],
    entity_yPos      : [u8 ; N_ENTITIES_IN_ROOM_DATA],
    entity_type      : [u8 ; N_ENTITIES_IN_ROOM_DATA],
    entity_parameter : [u8 ; N_ENTITIES_IN_ROOM_DATA],


    // The second-layer map
    // OPTIONAL: Only used if a PART_OF_ROOM second-layer is loaded
    sl_map           : [ u8 ; ROOM_MAP_WIDTH * ROOM_MAP_HEIGHT ],
};


namespace WarpRoomFlags {
    let MOVE_PLAYER_BIT = 7;
    let FADEOUT_BIT = 6;
}


struct WarpRoom {
    dataType: RoomDataType,

    // See WarpRoomFlags
    flags: u8,

    dungeon: u8,
    room_x: u8,
    room_y: u8,

    // Only read if MOVE_PLAYER_BIT flag is set
    player_x: u8,
    player_y: u8,

    // ::TODO add optional player_state and player_direction::
}


in wram7e_roomstate {

    // This hack is required to access room via addr addressing.
    #[align(256)]
    var __far_room : RoomData;
        var room @ &__far_room : RoomData;
}


namespace roomstate {

in wram7e_roomstate {

    // If non-zero, the next room transition will be a fadeout room transition.
    //
    // A Fadeout room transition will always reload MetaTile and MetaSprite resources.
    //
    // This value is reset after a fadein room transition.
    //
    // This variable is set by the resources-over-usb2snes subsystem if a non-room resource
    // has been changed to ensure the MetaTiles and MetaSprites are loaded on the next room transition.
    //
    // NOTE: This variable is declared in `room.wiz` to prevent an
    //       "encountered a reference to `var metasprites.xPos` before its type was known" error
    //
    // (byte flag)
    var forceFadeoutRoomTransition : u8;
}

}

