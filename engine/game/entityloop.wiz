// Copyright (c) 2021, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.

import "src/memmap";

import "metasprites";
import "entity-misc";

import "../entity_api";

import "gen/entities";
import "gen/function-tables";


namespace entityloop {


in zeropage {
    var __currentEntityTablePos : u8;

    var currentEntityId : u8 in entities.currentEntityId;
}


in wram7e_roomstate {
    // Mapping of active and unused entities (including player).
    //
    // indexes 0 to `numberOfActiveEntities - 1` (inclusive) are active entityIds.
    // indexes `numberOfActiveEntities` to `ACTIVE_ENTITIES_TABLE__LAST_POS` (inclusive) are unused entities.
    //
    // (list of SoA indexes)
    var activeEntitiesTable : [u8 ; entities.N_ENTITIES];


    // The number of active entities.
    //
    // This variable is used as the mid-point separating active and unused entities in `activeEntitiesTable`.
    //
    // This variable is set to 1 if only the player entity is active.
    // This variable is set to `ACTIVE_ENTITIES_TABLE__LAST_POS` when no more entities can be created.
    //
    // This variable MUST NEVER BE zero.
    //
    // (byte counter)
    var numberOfActiveEntities : u8;


    // The number of active enemies.
    //
    // Incremented on entity spawn, decremented when an enemy entity is deactivated.
    //
    // (byte counter)
    var _enemyCount : i8;


    let ACTIVE_ENTITIES_TABLE__LAST_POS = sizeof(typeof(activeEntitiesTable)) - 1;
}


in code {


// Initialize the entity subsystem
//
// DB = 0x7e
#[mem8, idx8]
inline func init__inline() {
    // MUST NOT modify player entity variables.
    // (player is active before a room-transition and must be unchanged).

    // Set player's process and draw function to a blank function.
    // Required as the player is processed before `process_active_entities()` is called.
    entities.SoA.entityFunction[0] = entities.EntityFunction.null;

    mem16();
    #[mem16] {
        x = entities.SoA.LAST_INDEX;
        do {
            // Reset entity functions
            (&entities.SoA._entityAndMsDrawFunction as *u16)[unaligned x] = (entities.EntityFunction.null as u16) | (MsDrawFunction.null as u16 << 8);

            // Clear entity shadow
            (&entities.SoA._shadowSizeAndIsEnemy as *u16)[unaligned x] = 0;

            x--;
            x--;
        } while !zero;
    }
    mem8();


    // Populate `activeEntitiesTable`
    {
        numberOfActiveEntities = a = 1;

        a = entities.SoA.LAST_INDEX;
        x = ACTIVE_ENTITIES_TABLE__LAST_POS;

        do {
            activeEntitiesTable[x] = a;

            a--;
            a--;

            x--;
        }
        while !negative;
    }

    _enemyCount = 0;
}



// Spawn entity
//
// NOTE: This function may fail if `entityType` is invalid or there are no more unused entityIds.
//
// DB = 0x7e
#[mem8, idx8]
func spawn_entity(xPos : u8 in zpTmp_byte_0, yPos : u8 in zpTmp_byte_1, entityType : u8 in a, initParameter : u8 in y) {
var _init_function_u16 : u16 in zpTmp_word_0;

    ^if a < entities.N_ENTITY_TYPES {

        // Retrieve the next unused entity from the `activeEntitiesTable` (if one is available)
        x = numberOfActiveEntities;
        ^if x < sizeof(typeof(activeEntitiesTable)) {
            // This code path MUST spawn an entity
            push8(y);

            y = activeEntitiesTable[x];
            // Y = entityId

            // mark entity active
            numberOfActiveEntities = ++x;

            x = a = a <<< 1;

            mem16();
            #[mem16] {
                // msDrawFunction is set below in the MetaSprite section
                (&entities.SoA._entityAndMsDrawFunction[0] as *u16)[unaligned y] = aa = (far &entity_rom_data.__entity_function_index as far *u16)[unaligned x];

                (&entities.SoA._visionAB[0] as *u16)[unaligned y] = aa = entity_rom_data.vision_ab[unaligned x];

                (&entities.SoA._zPosAndDeathFunction[0] as *u16)[unaligned y] = aa = entity_rom_data.initial_zpos_and_death_function_and_is_enemy[unaligned x];

                (&entities.SoA._healthAndAttackPower[0] as *u16)[unaligned y] = aa = entity_rom_data.health_and_attack_power[unaligned x];

                aa = (entity_rom_data.metasprite_framesets as far *u16)[unaligned x];
            }

            mem16_idx16();
            #[mem16, idx16] {
                // MetaSprite Data
                xx = aa;

                // The _isEnemy byte will be set or cleared at the end of this function. 
                (&entities.SoA._shadowSizeAndIsEnemy[0] as *u16)[unaligned yy] = aa = metasprites.MsFsData.shadowSize__u16[unaligned xx];
                (&entities.SoA.tileHitbox[0].first as *u16)[unaligned yy] = aa = metasprites.MsFsData.tileHitbox[unaligned xx];

                (&<:entities.SoA.metaSpriteFrameTable[0] as *u16)[unaligned yy] = aa = metasprites.MsFsData.frameTable[unaligned xx];
                (&<:entities.SoA.msAnimationTable[0] as *u16)[unaligned yy] = aa = metasprites.MsFsData.animationTable[unaligned xx];

                mem8();
                #[mem8] {
                    a = metasprites.MsFsData.drawFunction[unaligned xx];
                    entities.SoA.msDrawFunction[unaligned yy] = a as MsDrawFunction;
                }
                mem16();
            }
            idx8();

            #[mem16, idx8] {
                metasprites.init_entity_metasprite_animation__inline(y);

                x = entities.SoA.entityFunction[unaligned y] as u8;
                _init_function_u16 = aa = (far &entities.init_function_table as far *u16)[unaligned x];

                // Clear unused data
                // Required: No `stz.w addr,y` instruction.
                x = y;

                entities.SoA.xVelocity[unaligned x] = 0;
                entities.SoA.yVelocity[unaligned x] = 0;

                (&entities.SoA._movementStateAndIframeCounter as *u16)[unaligned x] = 0;

                entities.SoA.var_0[unaligned x] = 0;
                entities.SoA.var_1[unaligned x] = 0;
                entities.SoA.var_2[unaligned x] = 0;
                entities.SoA.var_3[unaligned x] = 0;
                entities.SoA.var_4[unaligned x] = 0;
                entities.SoA.var_5[unaligned x] = 0;
                entities.SoA.var_6[unaligned x] = 0;
                entities.SoA.var_7[unaligned x] = 0;
            }
            mem8_idx8();

            // Retrieve bit 7 from `entity_rom_data.initial_zpos_and_death_function_and_is_enemy`
            entities.SoA._isEnemy[unaligned y] = a = entities.SoA.deathFunction[unaligned y] & 0x80;
            if !zero {
                _enemyCount++;
            }

            // x & y = entityId

            a = xPos;
            entities.SoA.previousXpos[x] = a;
            entities.SoA.xPos_px[x] = a;
            entities.SoA.xPos_sx[x] = 0;

            a = yPos;
            entities.SoA.previousYpos[x] = a;
            entities.SoA.yPos_px[x] = a;
            entities.SoA.yPos_sx[x] = 0;

            // Call spawn function
            x = pop8();

            // Push entityId onto stack.
            // Y is NOT preserved by init function and the init function may call `spawn_entity`
            push8(y);
            __spawn_entity__call_init_function_ptr(y, x, _init_function_u16);

            y = pop8();

            a = entities.SoA.health[y];
            if !zero {
                ^return metasprites.init_entity_metasprite_animation__after_init(y);
            }
            else {
                x = y;

                // Entity's heath is 0.
                // We cannot remove the entity from the list by decrementing `numberOfActiveEntities`, the entity's init function might spawn more entities.
                // Instead, the entity functions are changed to blank functions so the entity is not drawn during room transitions.
                // We may also need to decrement the `_enemyCount` (if the entity is an enemy), which is done in `process_active_entities()`.
                mem16();
                #[mem16] {
                    // Set entityFunction and msDrawFunction to null
                    (&entities.SoA._entityAndMsDrawFunction as *u16)[unaligned x] = (entities.EntityFunction.null as u16) | (MsDrawFunction.null as u16 << 8);
                }
                mem8();
                entities.SoA.shadowSize[unaligned x] = metasprites.ShadowSize.NONE;
            }
        }
    }
}



// Retrieve the enemy count
//
// KEEP: X & Y
// DB = 0x7e
#[mem8]
inline func get_enemy_count_a() : u8 in a {
    return _enemyCount;
}



// Return true if there are no enemies alive
//
// KEEP: X & Y
// DB = 0x7e
#[mem8]
inline func is_all_enemies_defeated() : bool in zero {
    a = _enemyCount as u8;
    return zero;
}



// Call the entity's init function (which is located in the temporary variable `zpTmp_word_0`)
//
// MUST ONLY BE CALLED BY `spawn_entity()`
//
// DB = 0x7e
#[mem8, idx8]
func __spawn_entity__call_init_function_ptr(entityId : u8 in y, parameter : u8 in x, init_function_u16 : u16 in zpTmp_word_0) {
var _init_function_ptr : func(u8 in y, u8 in x) in init_function_u16;

    return (*&_init_function_ptr)(y, x);
}



// Execute the process routine in all active entities
//
// DB = 0x7e
#[mem8, idx8]
inline func process_active_entities()
{
    x = numberOfActiveEntities;
    if !zero {
        do {
            x--;
            __currentEntityTablePos = x;

            // The `!zero` below test prevents the player from being processed or animated by the function.
            // (it also stops this function from despawning the player when the player's health is 0)

            y = activeEntitiesTable[x];
            if !zero {
                currentEntityId = y;

                x = entities.SoA.entityFunction[unaligned y] as u8;
                entities.process_function_table[unaligned x](y);


                y = currentEntityId;
                a = entities.SoA.health[y];
                if zero {
                    // Entity's health is 0, call the entity's death function
                    a = entities.SoA.deathFunction[y] << 1;
                    if a >= sizeof(typeof(entities.DeathFunctionsTable)) {
                        a = 0;
                    }
                    x = a;

                    carry = entities.DeathFunctionsTable[unaligned x](y);
                    if carry {
                        // Entity is still active
                        y = currentEntityId;

                        // Do not call the death function the next time this entity dies.
                        entities.SoA.deathFunction[y] = a = 0;
                        metasprites.process_entity_animation(y);
                    }
                    else {
                        // Entity no longer active
                        y = currentEntityId;

                        // Decrement enemy count (if the entity is an enemy)
                        a = entities.SoA._isEnemy[unaligned y];
                        if !zero {
                            _enemyCount--;
                            if negative {
                                _enemyCount = 0;
                            }
                        }

                        // Remove entity from active entities list, preserving active entity order.
                        //
                        // Preserving entity order should be friendlier to `sort_active_entities()`.
                        numberOfActiveEntities--;

                        mem16();
                        #[mem16] {
                            // ASSUMES numberOfActiveEntities <= ACTIVE_ENTITIES_TABLE__LAST_POS
                            // ASSUMES numberOfActiveEntities < sizeof(activeEntitiesTable)

                            // Must not change Y

                            x = __currentEntityTablePos;
                            if x < numberOfActiveEntities {
                                do {
                                    // Swap activeEntitiesTable[x] and activeEntitiesTable[x + 1]
                                    aa = (&activeEntitiesTable as *u16)[unaligned x];
                                    swap_bytes(aa);
                                    (&activeEntitiesTable as *u16)[unaligned x] = aa;

                                    x++;
                                } while x < numberOfActiveEntities;
                            }

                            // Set process_function and ms_draw_function to a blank function (just in case they are accidentally called)
                            x = y;
                            (&entities.SoA._entityAndMsDrawFunction as *u16)[unaligned x] = (entities.EntityFunction.null as u16) | (MsDrawFunction.null as u16 << 8);
                        }
                        mem8();

                        entity_misc.set_ms_draw_function(y, MsDrawFunction.null);


                        // Do not draw a shadow on unused entities.
                        //
                        // Y is currentEntityId;
                        a = metasprites.ShadowSize.NONE as u8;
                        entities.SoA.shadowSize[unaligned y] = a as metasprites.ShadowSize;
                    }
                }
                else {
                    // entity is still alive, process entity animation
                    metasprites.process_entity_animation(y);
                }
            }

            x = __currentEntityTablePos;
        } while !zero;
    }
}



// Execute the ms_draw_function for all active entities (excluding player)
//
// DB = 0x7e
#[mem8, idx8]
inline func draw_active_entities()
{
    x = 0;
    if x < numberOfActiveEntities {
        do {
            __currentEntityTablePos = x;

            metasprites._draw_entity__inline(y = activeEntitiesTable[x]);

            x = __currentEntityTablePos;
            x++;
        } while x < numberOfActiveEntities;
    }
}



// Sort the active entities by their Y position.
//
// This function is not inline so I can measure its CPU usage with Mesen-S.
//
// Insertion sort.
//
// DB = 0x7e
#[mem8, idx8]
func sort_active_entities()
{
    // Thanks Wikipedia for the Insertion sort algorithm.
    //
    // "Insertion sort."  Wikipedia, The Free Encyclopedia.
    // https://en.wikipedia.org/wiki/Insertion_sort#Algorithm
    // (accessed October 16, 2021).


var _entityId      : u8 in zpTmp_byte_0;
var _yPosToCompare : u8 in zpTmp_byte_1;


    // A = yPos to compare
    // X = index into activeEntitiesTable
    // Y = index into entities SoA


    x = 1;
    if x < numberOfActiveEntities {
        do {
            y = activeEntitiesTable[x];
            a = entities.SoA.yPos_px[y];

            _entityId = y;

            y = (&activeEntitiesTable[-1])[x];
            if a < entities.SoA.yPos_px[y] {
                __currentEntityTablePos = x;

                _yPosToCompare = a;

                do {
                    // ::ANNOY no `sty addr,x` instruction on the 65816::
                    // If I could use `sty addr,x` then I could remove `_yPosToCompare` and store it in A.
                    activeEntitiesTable[x] = a = y;

                    x--;
                    break if zero;

                    a = _yPosToCompare;

                    y = (&activeEntitiesTable[-1])[x];
                } while a < entities.SoA.yPos_px[y];


                activeEntitiesTable[x] = a = _entityId;

                x = __currentEntityTablePos;
            }

            x++;
        } while x < numberOfActiveEntities;
    }
}



// Draw entities
//
// DB = 0x7e
#[mem8, idx8]
func draw_entities() {
    idx16();
    #[idx16] {
        metasprites.reset_buffer_and_draw_entity_shadows();
    }
    idx8();

    entityloop.draw_active_entities();

    idx16();
    #[idx16] {
        metasprites.finalize_buffer();
    }
    idx8();
}

}
}


namespace entities {
in code {

// A blank init process function that does nothing
//
// DB = 0x7e
func _null_init_function(entityId : u8 in y, parameter : u8 in x) {
}


// A blank entity process function that does nothing
//
// DB = 0x7e
#[mem8, idx8]
func _null_process_function(entityId : u8 in y) {
}

}

}


// Entity ROM Data is populated by the `tools/insert_resources.py` and `tools/_entity_data.py` scripts
namespace entity_rom_data {

let N_ENTRIES = entities.N_ENTITY_TYPES;

// Filling the data with `0x00` and `0xaa` bytes.
// This is used by the *insert_resources* script, to ensure the entity_rom_data is inserted into the correct location.
in rodata0 {
    const __entity_function_index : [ u16 ; N_ENTRIES ] = [ 0x00 ; N_ENTRIES ];
        let entity_function_index = far &__entity_function_index as far *u8;
        // ::TODO do something with the second byte::

    const __metasprite_framesets : [ *const metasprites.MsFramesetFormat ; N_ENTRIES ] = [ 0xaaaa as *metasprites.MsFramesetFormat ; N_ENTRIES ];
    let metasprite_framesets = far &__metasprite_framesets;

    // bit 7 of the second byte signifies if the entity is an enemy or not.
    const __initial_zpos_and_death_function_and_is_enemy : [u8 ; N_ENTRIES * 2] = [ 0xaa ; N_ENTRIES * 2];
    let initial_zpos_and_death_function_and_is_enemy = far &__initial_zpos_and_death_function_and_is_enemy as far *u16;

    const __vision_ab : [u8 ; N_ENTRIES * 2] = [ 0xaa ; N_ENTRIES * 2];
    let vision_ab = far &__vision_ab as far *u16;

    const __health_and_attack_power : [u8 ; N_ENTRIES * 2] = [ 0xaa ; N_ENTRIES * 2];
    let health_and_attack_power = far &__health_and_attack_power as far *u16;
}

}

