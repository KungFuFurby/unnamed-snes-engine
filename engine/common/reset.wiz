// Copyright (c) 2021, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.

import "src/memmap";
import "../registers";

import "src/main";

in lowram {
    // ::HACK declare the `swapBg1AndBg2ScrollShadows` variables in `reset.wiz`::
    // ::: to fix an "encountered a reference to `var bgB_scroll_y` before its type was known" error::
    var __swapBg1AndBg2ScrollShadows : u8;

    // ::HACK declare the `_dungeonLoaded` flag in `reset.wiz`::
    // ::: to fix an "encountered a reference to `var bgB_scroll_y` before its type was known" error::
    var __dungeonLoadedFlag__ : u8;
}


in code {


const @ 0x80ffb6 : u8 = 0;
extern const empty_byte @ 0x80ffb6 : u8;


// Reset handler MUST NOT be called by this code
// (The S-SMP cannot be reset by S-CPU code)
#[fallthrough]
func __reset() {
    goto __reset_far;
}


// Reset handler MUST NOT be called by this code
// (The S-SMP cannot be reset by S-CPU code)
#[fallthrough]
far func __reset_far() {
    nointerrupt = true;
    decimal = false;
    carry = false;
    swap_carry_emulation();

    mem16_idx16();
    #[mem16, idx16] {
        ss = aa = STACK_TOP;

        direct_page = aa = 0;
    }


    mem8();
    #[mem8, idx16] {
        push8(program_bank);
        data_bank = pop8();
    // DB = 0x00 (access registers)


        // Clear the Work RAM

        WMADDL = 0;
        WMADDM = 0;
        WMADDH = 0;

        // Also sets BBAD0
        *(&DMAP0 as *u16) = yy = (DMAP_TO_PPU | DMAP_FIXED | DMAP_TRANSFER_ONE) | ((<:&WMDATA as u16) << 8);

        A1T0 = xx = &empty_byte as u16;
        A1B0 = a = #:far &empty_byte;

        // DMA size
        DAS0 = xx = 0;

        a = MDMAEN_DMA0;

        // Clear first 64K of WRAM
        MDMAEN = a;

        // Clear second 64K of WRAM
        // (not resetting all of bank 0x7f, the end of WRAM contains the gamestate backup)
        DAS0 = xx = MEMMAP_WRAM7F_BYTES_TO_RESET;
        MDMAEN = a;


        reset_registers();


        main__inline();
    }
}



// Reset registers to a good initial state
//
// NOTE: Does not reset the mode 7 registers
func reset_registers() {
    push8(p);
    push8(data_bank);

    mem8_idx8();
    #[mem8, idx8] {
        push8(program_bank);
        data_bank = pop8();
    // DB = 0x80 (access registers)

        // Disable HDMA
        HDMAEN = 0;

        // Force screen blank
        INIDISP = a = INIDISP_FORCE_BLANK | INIDISP_BRIGHTNESS_MASK;

        // SlowROM
        MEMSEL = a = MEMSEL_SLOWROM;

        // Enable NMI and autoJoy
        NMITIMEN = a = NMITIMEN_V_BLANK | NMITIMEN_AUTO_JOY;

        // 8x8 and 16x16 objects
        OBJSEL = 0;


        // Registers $2105 - 210c
        // BG settings and VRAM base addresses
        x = 0x210c - 0x2105;
        do {
            (0x2105 as *u8)[x] = 0;
            x--;
        } while !negative;


        // Registers $210d - $2114
        // BG scroll locations
        a = 0xff;
        x = (4 - 1) * 2;
        do {
            // Set X scroll to 0;
            (&BG1HOFS as *u8)[x] = 0;
            (&BG1HOFS as *u8)[x] = 0;
            // Set Y scroll to -1;
            (&BG1VOFS as *u8)[x] = a;
            (&BG1VOFS as *u8)[x] = a;
            x--;
            x--;
        } while !negative;

        // Increment VRAM by 1 word on reading/writing the high byte of VRAM
        VMAIN = a = VMAIN_INCREMENT_1 | VMAIN_INCREMENT_HIGH;


        // Skipping Mode 7 registers


        // Registers $2123 - $2133
        // Window Settings, BG/OBJ designation, Color Math, Screen Mode
        // All disabled
        x = 0x2133 - 0x2123;
        do {
            (0x2123 as *u8)[x] = 0;
            x--;
        } while !negative;


        // Reset the DMA registers
        mem16();
        #[mem16] {
            x = 0x80 - 2;
            do {
                *((0x4300 as u16 + x as u16) as *u16) = 0;
                x--;
                x--;
            } while !negative;
        }
        mem8();


        // Reset flags
        __swapBg1AndBg2ScrollShadows = 0;
        __dungeonLoadedFlag__ = 0;
    }

    data_bank = pop8();
    p = pop8();
}

}

