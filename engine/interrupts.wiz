// Copyright (c) 2021, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.

import "src/memmap";

import "registers";
import "common/reset";


in lowram {

// Number of NMI interrupts processed between wait_frame calls.
// (byte)
var nmiCounter : u8;

}


in code_interrupts {


let invalid_handler = break_handler;

// No IRQ interrupts in the engine
let irq_handler = break_handler;


#[nmi]
func nmi_handler() {
    mem8();
    #[mem8] {
        push8(a);

        a = *(far &nmiCounter as far *u8);
        a++;
        *(far &nmiCounter as far *u8) = a;

        // ::TODO add watchdog timer that activates when nmiCounter is negative::

        a = pop8();
    }

    nmireturn;
}



// noreturn
#[irq]
func break_handler() {
    carry = false;
    swap_carry_emulation();

    goto __break_handler;
}

}


in code {

// REQUIRES: native mode
// noreturn
#[fallthrough]
far func __break_handler() {
    nointerrupt = true;
    decimal = false;

    mem8_idx8();
    #[mem8, idx8] {
        a = 0x80;
        push8(a);
        data_bank = pop8();
    // DB = 0x80

        reset_registers();

        // Change BG colour to dark BLUE
        CGADD = 0;
        CGDATA = 0;
        CGDATA = a = 12 << 2;

        // ::TODO display a message::

        // Enable the screen
        INIDISP = a = INIDISP_BRIGHTNESS_MASK;


        // Wait forever.
        //
        // I cannot jump to `__reset` as I do not know the state of the audio driver
        // and there is no way for the S-CPU to reset the S-SMP.
        while true {
            wait_until_interrupt();
        }
    }
}

}

