// Copyright (c) 2021, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.

import "src/memmap";
import "../registers";

import "dma";
import "../game/room";

import "gen/enums";



namespace resources {

// order MUST match `ResourceType` in `tools/_common.py`
enum ResourceType : u8 {
  palette,
  mt_tileset,
  second_layer,
  ms_spritesheet,
  tiles,
  bg_image,
  songs,
};


// Resource data contains one or both of:
//  * RAM data - data copied into Wram7e bank (or zeropage)
//  * PPU data - dynamic sized data that is transferred to PPU using DMA
//
// RAM data can be either:
//  * Fixed - The size of the data is fixed and determined by the size of a struct.
//  * Dynamic - The size is variable and determined by a 2 byte u16le prefix before the data.
//
// PPU data (if any) is always dynamically sized and is located immediately after the RAM data.
struct _ResourceTableEntry {
    farPtr : far *u8,
}


// A struct to keep track of the remaining PPU data that has yet to be sent to the PPU.
//
// CAUTION: The memory address of the PPU data is stored in DMA0.
//   * It will be overridden on the next non-resource DMA transfer.
//   * It will be overridden by the next load resource call.
//   * It will be overridden by the next VBlank routine (ie, `WaitFrame` call).
//
// LIFETIME: Only valid until the next non-resource DMA transfer or next load resource call.
struct PpuData_Dma0 {
    remaining : u16,
}



// Hack to provide access into `resourceEntries` fields by `unaligned xx` addressing.
namespace _RE {
    let addr        = (MEMMAP_RODATA0_BANK << 16) as far *u16;
    let addrBank    = ((MEMMAP_RODATA0_BANK << 16) | 2) as far *u8;
};


in rodata0 {
    let N_RESOURCE_TYPES = resources.n_resources_per_type.len;

    // Number of resources for each resource resource type.
    // (ROM table)
    // ::TODO make this table a u8::
    const __NResourcesPerTypeTable : [ u16 ] = [ i for let i in resources.n_resources_per_type ];
    let NResourcesPerTypeTable = far &__NResourcesPerTypeTable as far *u8;

    // resource entry = ResourceEntryTable[type][resourceId]
    const __ResourceEntryTable : [ *const u8 ] = [
        @[ 0u8 ; sizeof(_ResourceTableEntry) * i ] for let i in resources.n_resources_per_type
    ];
    let ResourceEntryTable = far &__ResourceEntryTable as far * const *_ResourceTableEntry;


    let INVALID_ROOM_ADDR = 0xffff;

    // Table of room addresses.
    //
    // If a room address is `INVALID_ROOM_ADDR` the room does not exist.
    //
    // (256 word address, pointing to RoomData)
    const __RoomsTable : [ *const RoomData ; 0x100 ] = [ INVALID_ROOM_ADDR as *const RoomData ; 0x100 ];
    let RoomsTable = far &__RoomsTable as far * const * RoomData;


    // This value is set to 0 by `insert_resources.py`
    const UseResourcesOverUsb2Snes : u8 = 0xff;
}


in zeropage {
    var ppuData : PpuData_Dma0;
}



in code {


// Load a resource with fixed RAM data and PPU data.
//
// LIFETIME: PPU data is only valid until the next `load_resource__*` call or non-resource DMA transfer.
// REQUIRES: Force-Blank
// USES: DMA Channel 0
//
// NOTE: This function will only load RAM data to wram bank $7e.
//
// DB = 0x80
#[mem8, idx16]
inline func load_resource__fixed_ram_and_ppu_data__forceblank_inline(let rType: ResourceType, resourceId : u8 in a, let wram_data_addr: *u8, let wram_data_size: u16) : PpuData_Dma0 in ppuData {
    __load_resource(rType, a);

    // a:xx = resource address
    WMADDML = yy = wram_data_addr as u16;
    ppuData = __copy_fixed_size_data_and_prep_dynamic_sized_data(xx, a, wram_data_size);

    return ppuData;
}


// Load a resource with dynamically sized RAM data and PPU data.
//
// LIFETIME: PPU data is only valid until the next `load_resource__*` call or non-resource DMA transfer.
// REQUIRES: Force-Blank
// USES: DMA Channel 0
//
// NOTE: This function will only load RAM data to wram bank $7e.
//
// DB = 0x80
#[mem8, idx16]
inline func load_resource__dynamic_ram_and_ppu_data__forceblank_inline(let rType: ResourceType, resourceId : u8 in a, let wram_data_addr: *u8, let max_wram_data_size: u16) : PpuData_Dma0 in ppuData {
    __load_resource(rType, a);

    // a:xx = resource address
    WMADDML = yy = wram_data_addr as u16;
    __copy_dynamic_sized_data_and_prep_dynamic_sized_data(xx, a, max_wram_data_size);

    return ppuData;
}


// Load a resource with only PPU data.
//
// LIFETIME: PPU data is only valid until the next `load_resource__*` call or non-resource DMA transfer.
// REQUIRES: Force-Blank
// USES: DMA Channel 0
//
// DB = 0x80
#[mem8, idx16]
inline func load_resource__ppu_data__forceblank__inline(let rType: ResourceType, resourceId : u8 in a) : PpuData_Dma0 in ppuData {
    ppuData = __load_ppu_only_resource(rType, a);

    return ppuData;
}



// Load a resource with dynamic sized RAM data without copying the data to Work-RAM.
//
// LIFETIME: output is only valid until the next `load_resource__*` call.
//
// OUTPUT: a:xx = audio data address
// OUTPUT:   yy = audio data size
//
// DB = 0x80
#[mem8, idx16]
inline func load_resource__dynamic_ram_no_copy__inline_axy(let rType: ResourceType, resourceId : resources.songs in a) {
    __load_resource(rType, a);
    __read_dynamic_sized_data_size(xx, a);
}


// OUT: a:xx resource address
//
// DB unknown
#[mem8, idx16]
inline func __load_resource(let rType: ResourceType, resourceId : u8 in a) {
    __load_resource__xx2(rType as u16 * 2, a);
}


// Load a resource
//
// ASSUMES: `rTypeTimes2` is always valid.
// ASSUMES: `rTypeTimes2` is `ResourceType as u16 * 2.
//
// OUT: a:xx resource address
//
// DB unknown
#[mem8, idx16]
func __load_resource__xx2(rTypeTimes2 : u16 in xx, resourceId : u8 in a) {
var _tmp : u16 in zpTmp_word_0;

    // This function MUST ONLY use zeropage variables

    if a >= NResourcesPerTypeTable[unaligned xx] {
        a = 0;
    }

    // Save resourceId in `yy`, UseResourcesOverUsb2Snes test clobbers `a` (no `bit long` instructions).
    #[idx8] {
        y = a;
    }
    a = *far &UseResourcesOverUsb2Snes;
    if !zero {
        resources_over_usb2snes.load_resource(xx, yy);
    }
    else {
        mem16_idx16();
        #[mem16] {
            // Multiply low byte of y by 3
            _tmp = aa = yy & 0xff;
            // +# is safe: carry always clear
            aa = (aa << 1) +# _tmp;
            // +# is safe: carry always clear (`0xff * 2 + 0xff < 0x8000`)
            aa +#= ResourceEntryTable[unaligned xx] as u16;
            xx = aa;


            yy = aa = _RE.addr[unaligned xx];
        }
        mem8();

        a = _RE.addrBank[unaligned xx];
        xx = yy;
    }
}


// Copy fixed-size resource RAM data to Work-RAM and pre-load dynamic sized PPU data.
//
// Uses: DMA channel 0
//
// IN: WMADDML - the work RAM address to copy the RAM data to (NOTE: WMADDH will be set to 0 (bank $7e))
// OUT: PpuData_Dma0 in ppuData
//
// DB = 0x80
#[mem8, idx16, fallthrough]
func __copy_dynamic_sized_data_and_prep_dynamic_sized_data(addr: u16 in xx, bankbyte: u8 in a, max_size: u16 in yy) {
var _maxSize : u16 in zpTmp_word_0;

    _maxSize = yy;

    __read_dynamic_sized_data_size(xx, a);

    if yy >= _maxSize {
        yy = _maxSize;
    }

// Fallthrough
}


// Copy fixed-size resource RAM data to Work-RAM and pre-load dynamic sized PPU data.
//
// Uses: DMA channel 0
//
// IN: WMADDML - the work RAM address to copy the RAM data to (NOTE: WMADDH will be set to 0 (bank $7e))
//
// DB = 0x80
#[mem8, idx16]
func __copy_fixed_size_data_and_prep_dynamic_sized_data(addr: u16 in xx, bankbyte: u8 in a, wram_data_size: u16 in yy) : PpuData_Dma0 in ppuData {
    WMADDH = 0;

    // DMA size
    DAS0 = yy;

    // DMA A-Bus address
    A1T0 = xx;
    A1B0 = a;

    dma.set_dmap0_and_bbad0__yy(DMAP_TO_PPU | DMAP_TRANSFER_ONE, <:&WMDATA);

    MDMAEN = a = MDMAEN_DMA0;

    xx = A1T0 as u16;
    a = A1B0 as u8;
    return __prep_dynamic_sized_ppu_data_transfer(xx, a);
}



// Load resource data that contains only dynamic sized PPU data.
//
// Uses: DMA channel 0
//
// DB = 0x80
inline func __load_ppu_only_resource(let rType : ResourceType, resourceId : u8 in a) : PpuData_Dma0 in ppuData
{
    __load_ppu_only_resource__xx2(rType as u16 * 2, a);
    return ppuData;
}

// OUT: PpuData_Dma0 in ppuData
// DB = 0x80
#[fallthrough, mem8, idx16]
func __load_ppu_only_resource__xx2(rTypeTimesTwo : u16 in xx, resourceId : u8 in a) {
    __load_resource__xx2(xx, a);

// Fallthrough
}


// Prepare DMA registers and `ppuData` for a dynamic sized PPU data DMA transfer.
//
// Uses: DMA channel 0
//
// DB = 0x80
#[mem8, idx16]
func __prep_dynamic_sized_ppu_data_transfer(addr: u16 in xx, bankbyte: u8 in a) : PpuData_Dma0 in ppuData {
    __read_dynamic_sized_data_size(xx, a);

    A1T0 = xx;
    A1B0 = a;
    ppuData.remaining = yy;

    return ppuData;
}


// Read the size of dynamic sized RAM or PPU data and advance `xx` to data start.
//
// OUT: a:xx = far address of data
// OUT:   yy = data size
#[mem8, idx16]
func __read_dynamic_sized_data_size(addr: u16 in xx, bankbyte: u8 in a) {
var _farPtr : far *u16 in zpTmp_farPtr;

    // ::TODO add decompression::

    *(&_farPtr as *u16) = xx;
    #:_farPtr = a;

    mem16();
    #[mem16] {
        yy = aa = *_farPtr;
    }
    mem8();

    // DMA A-Bus address
    xx++;
    xx++;
    a = #:_farPtr;
}


// Load a room into memory
//
// DB = 0x7e
#[mem8, idx8]
func load_room(roomId : u8 in a) : bool in carry {
var _farPtr : far *u8 in zpTmp_farPtr;

    // Save roomId in `y`, UseResourcesOverUsb2Snes test clobbers `a` (no `bit long` instructions).
    y = a;

    a = *far &UseResourcesOverUsb2Snes;
    if !zero {
        ^return resources_over_usb2snes.load_room(y);
    }

    mem16_idx16();
    #[mem16, idx16] {
        // No need to mask high byte of `yy`, it is always 0
        xx = aa = yy << 1;

        aa = RoomsTable[unaligned xx] as u16;
        if aa == INVALID_ROOM_ADDR {
            mem8_idx8();
            return false;
        }

        *(&_farPtr as *u16) = aa;
    }
    mem8();

    #[idx16] {
        #:_farPtr = a = ROOM_DATA_BANK;

        // Copy room into memory.
        yy = sizeof(typeof(room)) - 1;
        do {
            (&room as *u8)[yy] = a = _farPtr[yy];
            yy--;
        } while !negative;
    }
    mem8_idx8();

    return true;
}


// Transfer a section of ppuData to CGRAM
//
// REQUIRES: Force-Blank
// Uses DMA Channel 0
//
// DB = 0x80
#[mem8, idx16, fallthrough]
func dma_to_cgram__forceblank(ppuData_ : PpuData_Dma0 in ppuData, size: u16 in yy) {
    xx = dma.dmap_and_bbad__xx(DMAP_TO_PPU | DMAP_TRANSFER_ONE, <:&CGDATA);
    return dma_ppu_data__forceblank(ppuData_, xx, yy);
}


// Transfer the remaining ppuData to VRAM
//
// REQUIRES: Force-Blank
// Uses DMA Channel 0
//
// DB = 0x80
#[mem8, idx16, fallthrough]
func dma_remaining_to_vram__forceblank(ppuData_ : PpuData_Dma0 in ppuData) {
    yy = ppuData.remaining;

// Fallthrough
}


// Transfer a section of ppuData to VRAM
//
// REQUIRES: Force-Blank
// Uses DMA Channel 0
//
// DB = 0x80
#[mem8, idx16, fallthrough]
func dma_to_vram__forceblank(ppuData_ : PpuData_Dma0 in ppuData, size: u16 in yy) {
    VMAIN  = a = VMAIN_INCREMENT_1 | VMAIN_INCREMENT_HIGH;
    xx = dma.dmap_and_bbad__xx(DMAP_TO_PPU | DMAP_TRANSFER_TWO, <:&VMDATA);

// Fallthrough
}


// Transfer a section of ppuData to the PPU using DMA
//
// REQUIRES: Force-Blank
// Uses DMA Channel 0
//
// DB = 0x80
#[mem8, idx16]
func dma_ppu_data__forceblank(ppuData_ : PpuData_Dma0 in ppuData, dmapAndBbad: u16 in xx, size: u16 in yy) {
    mem16();
    #[mem16] {
        aa = yy;

        // Reverse subtract
        carry = true;
        aa ^= 0xffff;
        aa +#= ppuData.remaining;

        if !carry {
            aa = 0;
        }
        ppuData.remaining = aa;
    }
    mem8();

    // Set DMAP0 and BBAD0
    *(&DMAP0 as *u16) = xx;

    // Address set in __prep_dynamic_sized_ppu_data_transfer()

    // DMA size
    DAS0 = yy;

    // Ensure we are in force blank;
    INIDISP = a = INIDISP_FORCE_BLANK | INIDISP_BRIGHTNESS_MASK;

    HDMAEN = 0;
    MDMAEN = a = MDMAEN_DMA0;
}




// Load a tiles resource into VRAM.
//
// REQUIRES: Force-Blank
// Uses DMA Channel 0
//
// DB = 0x80
#[mem8, idx16]
func load_tiles_resource_into_vram(resourceId : resources.tiles in a, vramWordAddr : u16 in xx) {

    VMADD = xx;

    ppuData = load_resource__ppu_data__forceblank__inline(ResourceType.tiles, a);
    return dma_remaining_to_vram__forceblank(ppuData);
}


let load_tiles_resource_into_vram_a = load_tiles_resource_into_vram as func(u8 in a, u16 in xx);



// Load a bg_image resource into VRAM.
//
// REQUIRES: Force-Blank
// Uses DMA Channel 0
//
// DB = 0x80
#[mem8, idx16]
func load_bg_image_resource_into_vram(resourceId : resources.bg_images in a, vramTilemapWaddr : u16 in xx, vramTilesWaddr : u16 in yy) {
var _vramTilesWaddr : u16 in zpTmp_word_1;

    // BG Image Data RAM data format:
    //  * Single byte header: %000tt000
    //      tt   = tilemap size (number of 32x32 nametables)
    //
    // BG Image PPU data format:
    //  * tilemapData
    //  * tileData
var _header : u8 in zpTmp_byte_0;

    // ::TODO Lookup VRAM word addresses from a table in memory::

    VMADD = xx;
    _vramTilesWaddr = yy;

    ppuData = load_resource__fixed_ram_and_ppu_data__forceblank_inline(ResourceType.bg_image, a, &_header, sizeof(typeof(_header)));

    // Calculate tilemap size
    a = _header;
    mem16();
    #[mem16] {
        aa = aa & 0b00011000;
        if zero {
            // Don't override all of VRAM with a 64 KiB VRAM write
            aa = 1 << 3;
        }
        swap_bytes(aa); // left shift by 8
        yy = aa;
    }
    mem8();

    // Transfer tilemap to VRAM
    // VRAM address set at the top of this function
    dma_to_vram__forceblank(ppuData, yy);

    // Transfer tiles to VRAM
    VMADD = xx = _vramTilesWaddr;
    dma_remaining_to_vram__forceblank(ppuData);
}


let load_bg_image_resource_into_vram_a = load_bg_image_resource_into_vram as func(u8 in a, u16 in xx, u16 in yy);

}



// Rooms
// =====

namespace rooms {
    let STARTING_ROOM = _STARTING_ROOM;
}

}



import "resources-over-usb2snes";

